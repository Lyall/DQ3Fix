#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ADSound

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ADSound_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class ADSound.ADSoundListenerControllerBase
// 0x0060 (0x0088 - 0x0028)
class UADSoundListenerControllerBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FADSoundListenerId, struct FADSoundListenerControllParam> Listeners;                                         // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerControllerBase">();
	}
	static class UADSoundListenerControllerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerControllerBase>();
	}
};
static_assert(alignof(UADSoundListenerControllerBase) == 0x000008, "Wrong alignment on UADSoundListenerControllerBase");
static_assert(sizeof(UADSoundListenerControllerBase) == 0x000088, "Wrong size on UADSoundListenerControllerBase");
static_assert(offsetof(UADSoundListenerControllerBase, Listeners) == 0x000030, "Member 'UADSoundListenerControllerBase::Listeners' has a wrong offset!");

// Class ADSound.ADSoundCategoryParamAccessor
// 0x0000 (0x0028 - 0x0028)
class UADSoundCategoryParamAccessor : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundCategoryParamAccessor">();
	}
	static class UADSoundCategoryParamAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundCategoryParamAccessor>();
	}
};
static_assert(alignof(UADSoundCategoryParamAccessor) == 0x000008, "Wrong alignment on UADSoundCategoryParamAccessor");
static_assert(sizeof(UADSoundCategoryParamAccessor) == 0x000028, "Wrong size on UADSoundCategoryParamAccessor");

// Class ADSound.ADSoundListenerControllerCRIWare
// 0x0000 (0x0088 - 0x0088)
class UADSoundListenerControllerCRIWare : public UADSoundListenerControllerBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerControllerCRIWare">();
	}
	static class UADSoundListenerControllerCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerControllerCRIWare>();
	}
};
static_assert(alignof(UADSoundListenerControllerCRIWare) == 0x000008, "Wrong alignment on UADSoundListenerControllerCRIWare");
static_assert(sizeof(UADSoundListenerControllerCRIWare) == 0x000088, "Wrong size on UADSoundListenerControllerCRIWare");

// Class ADSound.ADSoundListenerBase
// 0x0068 (0x0090 - 0x0028)
class UADSoundListenerBase : public UObject
{
public:
	uint8                                         Pad_28[0x68];                                      // 0x0028(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerBase">();
	}
	static class UADSoundListenerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerBase>();
	}
};
static_assert(alignof(UADSoundListenerBase) == 0x000008, "Wrong alignment on UADSoundListenerBase");
static_assert(sizeof(UADSoundListenerBase) == 0x000090, "Wrong size on UADSoundListenerBase");

// Class ADSound.ADSoundListenerCRIWare
// 0x0010 (0x00A0 - 0x0090)
class UADSoundListenerCRIWare : public UADSoundListenerBase
{
public:
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerCRIWare">();
	}
	static class UADSoundListenerCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerCRIWare>();
	}
};
static_assert(alignof(UADSoundListenerCRIWare) == 0x000008, "Wrong alignment on UADSoundListenerCRIWare");
static_assert(sizeof(UADSoundListenerCRIWare) == 0x0000A0, "Wrong size on UADSoundListenerCRIWare");

// Class ADSound.ADSoundDeviceWatcher
// 0x0008 (0x0030 - 0x0028)
class UADSoundDeviceWatcher : public UObject
{
public:
	class UObject*                                AtomDeviceWatcher;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundDeviceWatcher">();
	}
	static class UADSoundDeviceWatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundDeviceWatcher>();
	}
};
static_assert(alignof(UADSoundDeviceWatcher) == 0x000008, "Wrong alignment on UADSoundDeviceWatcher");
static_assert(sizeof(UADSoundDeviceWatcher) == 0x000030, "Wrong size on UADSoundDeviceWatcher");
static_assert(offsetof(UADSoundDeviceWatcher, AtomDeviceWatcher) == 0x000028, "Member 'UADSoundDeviceWatcher::AtomDeviceWatcher' has a wrong offset!");

// Class ADSound.ADSoundManagerBase
// 0x00E0 (0x0108 - 0x0028)
class UADSoundManagerBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UADSoundPlayerControllerBase*           PlayerController;                                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UADSoundListenerControllerBase*         ListenerController;                                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UADSoundCategoryController*             CategoryController;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UADSoundOwnedController*                OwnedController;                                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class USoundAttenuation*>   SoundAttenuations;                                 // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, class USoundConcurrency*>   SoundConcurrencys;                                 // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PauseById(const struct FADSoundPlaybackId& ID, bool bPause);
	void SetBooleanParamById(const struct FADSoundPlaybackId& ID, const class FName& ParamName, const bool Value);
	void SetBusSendLevelById(const struct FADSoundPlaybackId& ID, const class FString& BusName, float Level);
	void SetLocationById(const struct FADSoundPlaybackId& ID, const struct FVector& Location);
	void SetMuteById(const struct FADSoundPlaybackId& ID, bool bMute);
	void SetPitchRateById(const struct FADSoundPlaybackId& ID, float Rate);
	void SetPitchRateMaxById(const struct FADSoundPlaybackId& ID, float Rate);
	void SetVolumeFadeInById(const struct FADSoundPlaybackId& ID, float DurationSec);
	void SetVolumeFadeOutById(const struct FADSoundPlaybackId& ID, float DurationSec, bool bAutoStop);
	void SetVolumeRateById(const struct FADSoundPlaybackId& ID, float Rate);
	bool StopById(const struct FADSoundPlaybackId& ID);
	void TransitionVolumeRateById(const struct FADSoundPlaybackId& ID, float TargetRate, float DurationSec);

	int32 GetLengthMilliSecById(const struct FADSoundPlaybackId& ID) const;
	int32 GetRemainingMilliSecById(const struct FADSoundPlaybackId& ID) const;
	bool IsLoopById(const struct FADSoundPlaybackId& ID) const;
	bool IsPausedById(const struct FADSoundPlaybackId& ID) const;
	bool IsPlayingById(const struct FADSoundPlaybackId& ID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundManagerBase">();
	}
	static class UADSoundManagerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundManagerBase>();
	}
};
static_assert(alignof(UADSoundManagerBase) == 0x000008, "Wrong alignment on UADSoundManagerBase");
static_assert(sizeof(UADSoundManagerBase) == 0x000108, "Wrong size on UADSoundManagerBase");
static_assert(offsetof(UADSoundManagerBase, PlayerController) == 0x000030, "Member 'UADSoundManagerBase::PlayerController' has a wrong offset!");
static_assert(offsetof(UADSoundManagerBase, ListenerController) == 0x000038, "Member 'UADSoundManagerBase::ListenerController' has a wrong offset!");
static_assert(offsetof(UADSoundManagerBase, CategoryController) == 0x000040, "Member 'UADSoundManagerBase::CategoryController' has a wrong offset!");
static_assert(offsetof(UADSoundManagerBase, OwnedController) == 0x000048, "Member 'UADSoundManagerBase::OwnedController' has a wrong offset!");
static_assert(offsetof(UADSoundManagerBase, SoundAttenuations) == 0x000050, "Member 'UADSoundManagerBase::SoundAttenuations' has a wrong offset!");
static_assert(offsetof(UADSoundManagerBase, SoundConcurrencys) == 0x0000A0, "Member 'UADSoundManagerBase::SoundConcurrencys' has a wrong offset!");

// Class ADSound.ADSoundManagerCRIWare
// 0x0198 (0x02A0 - 0x0108)
class UADSoundManagerCRIWare : public UADSoundManagerBase
{
public:
	uint8                                         Pad_108[0x198];                                    // 0x0108(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAisacParamById(const struct FADSoundPlaybackId& PlaybackId, int32 AisacId, float AisacValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundManagerCRIWare">();
	}
	static class UADSoundManagerCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundManagerCRIWare>();
	}
};
static_assert(alignof(UADSoundManagerCRIWare) == 0x000008, "Wrong alignment on UADSoundManagerCRIWare");
static_assert(sizeof(UADSoundManagerCRIWare) == 0x0002A0, "Wrong size on UADSoundManagerCRIWare");

// Class ADSound.ADSoundCategoryController
// 0x0050 (0x0078 - 0x0028)
class UADSoundCategoryController final : public UADSoundCategoryParamAccessor
{
public:
	TMap<struct FADSoundCategoryId, struct FADSoundCategoryParams> MapCategoryParams;                                 // 0x0028(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundCategoryController">();
	}
	static class UADSoundCategoryController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundCategoryController>();
	}
};
static_assert(alignof(UADSoundCategoryController) == 0x000008, "Wrong alignment on UADSoundCategoryController");
static_assert(sizeof(UADSoundCategoryController) == 0x000078, "Wrong size on UADSoundCategoryController");
static_assert(offsetof(UADSoundCategoryController, MapCategoryParams) == 0x000028, "Member 'UADSoundCategoryController::MapCategoryParams' has a wrong offset!");

// Class ADSound.ADSoundFunctionLibraryBase
// 0x0000 (0x0028 - 0x0028)
class UADSoundFunctionLibraryBase : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundFunctionLibraryBase">();
	}
	static class UADSoundFunctionLibraryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundFunctionLibraryBase>();
	}
};
static_assert(alignof(UADSoundFunctionLibraryBase) == 0x000008, "Wrong alignment on UADSoundFunctionLibraryBase");
static_assert(sizeof(UADSoundFunctionLibraryBase) == 0x000028, "Wrong size on UADSoundFunctionLibraryBase");

// Class ADSound.ADSoundFunctionLibraryCRIWare
// 0x0000 (0x0028 - 0x0028)
class UADSoundFunctionLibraryCRIWare final : public UADSoundFunctionLibraryBase
{
public:
	static void GetBusNames(TSet<class FName>* Out);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundFunctionLibraryCRIWare">();
	}
	static class UADSoundFunctionLibraryCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundFunctionLibraryCRIWare>();
	}
};
static_assert(alignof(UADSoundFunctionLibraryCRIWare) == 0x000008, "Wrong alignment on UADSoundFunctionLibraryCRIWare");
static_assert(sizeof(UADSoundFunctionLibraryCRIWare) == 0x000028, "Wrong size on UADSoundFunctionLibraryCRIWare");

// Class ADSound.ADSoundInterpFloat
// 0x0050 (0x0078 - 0x0028)
class UADSoundInterpFloat final : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelTransition(bool bCallDelegate);
	void SetClampRange(float NewClampValueMin, float NewClampValueMax);
	void SetCurrentValue(float NewCurrentValue);
	void StartTransition(float NewTargetValue, float NewDurationSec);

	float GetCurrentValue() const;
	bool IsOnTransition() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundInterpFloat">();
	}
	static class UADSoundInterpFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundInterpFloat>();
	}
};
static_assert(alignof(UADSoundInterpFloat) == 0x000008, "Wrong alignment on UADSoundInterpFloat");
static_assert(sizeof(UADSoundInterpFloat) == 0x000078, "Wrong size on UADSoundInterpFloat");

// Class ADSound.ADSoundListenerControllerUE4
// 0x0000 (0x0088 - 0x0088)
class UADSoundListenerControllerUE4 final : public UADSoundListenerControllerBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerControllerUE4">();
	}
	static class UADSoundListenerControllerUE4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerControllerUE4>();
	}
};
static_assert(alignof(UADSoundListenerControllerUE4) == 0x000008, "Wrong alignment on UADSoundListenerControllerUE4");
static_assert(sizeof(UADSoundListenerControllerUE4) == 0x000088, "Wrong size on UADSoundListenerControllerUE4");

// Class ADSound.ADSoundListenerHandle
// 0x0008 (0x0030 - 0x0028)
class UADSoundListenerHandle final : public UObject
{
public:
	class UADSoundListenerBase*                   Listener;                                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddRelativeLocation(const struct FVector& AddLocation);
	void AddRelativeRotation(const struct FQuat& AddRotation);
	void AddRelativeTransform(const struct FTransform& AddTransform);
	void AddWorldLocation(const struct FVector& AddLocation);
	void AddWorldRotation(const struct FQuat& AddRotation);
	void AddWorldTransform(const struct FTransform& AddTransform);
	void EnableAutoUpdateVelocity(const bool bEnable);
	void SetOwner(const class AActor* NewOwner);
	void SetRelativeLocation(const struct FVector& NewLocation);
	void SetRelativeRotation(const struct FQuat& NewRotation);
	void SetRelativeTransform(const struct FTransform& NewTransform);
	void SetVelocity(const struct FVector& NewVelocity);
	void SetWorldLocation(const struct FVector& NewLocation);
	void SetWorldRotation(const struct FQuat& NewRotation);
	void SetWorldTransform(const struct FTransform& NewTransform);
	void UseCameraRotation(const bool bEnable);

	class AActor* GetOwner() const;
	struct FVector GetRelativeLocation() const;
	struct FQuat GetRelativeRotation() const;
	struct FTransform GetRelativeTransform() const;
	struct FVector GetVelocity() const;
	struct FVector GetWorldLocation() const;
	struct FQuat GetWorldRotation() const;
	struct FTransform GetWorldTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerHandle">();
	}
	static class UADSoundListenerHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerHandle>();
	}
};
static_assert(alignof(UADSoundListenerHandle) == 0x000008, "Wrong alignment on UADSoundListenerHandle");
static_assert(sizeof(UADSoundListenerHandle) == 0x000030, "Wrong size on UADSoundListenerHandle");
static_assert(offsetof(UADSoundListenerHandle, Listener) == 0x000028, "Member 'UADSoundListenerHandle::Listener' has a wrong offset!");

// Class ADSound.ADSoundListenerUE4
// 0x0000 (0x0090 - 0x0090)
class UADSoundListenerUE4 final : public UADSoundListenerBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundListenerUE4">();
	}
	static class UADSoundListenerUE4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundListenerUE4>();
	}
};
static_assert(alignof(UADSoundListenerUE4) == 0x000008, "Wrong alignment on UADSoundListenerUE4");
static_assert(sizeof(UADSoundListenerUE4) == 0x000090, "Wrong size on UADSoundListenerUE4");

// Class ADSound.ADSoundManagerUE4
// 0x0000 (0x0108 - 0x0108)
class UADSoundManagerUE4 final : public UADSoundManagerBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundManagerUE4">();
	}
	static class UADSoundManagerUE4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundManagerUE4>();
	}
};
static_assert(alignof(UADSoundManagerUE4) == 0x000008, "Wrong alignment on UADSoundManagerUE4");
static_assert(sizeof(UADSoundManagerUE4) == 0x000108, "Wrong size on UADSoundManagerUE4");

// Class ADSound.ADSoundMediatorListener
// 0x0000 (0x0028 - 0x0028)
class IADSoundMediatorListener final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundMediatorListener">();
	}
	static class IADSoundMediatorListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<IADSoundMediatorListener>();
	}
};
static_assert(alignof(IADSoundMediatorListener) == 0x000008, "Wrong alignment on IADSoundMediatorListener");
static_assert(sizeof(IADSoundMediatorListener) == 0x000028, "Wrong size on IADSoundMediatorListener");

// Class ADSound.ADSoundOwnedController
// 0x0058 (0x0080 - 0x0028)
class UADSoundOwnedController final : public UObject
{
public:
	class UADSoundPlayerPoolAccessor*             PlayerPoolAccessor;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundOwnedController">();
	}
	static class UADSoundOwnedController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundOwnedController>();
	}
};
static_assert(alignof(UADSoundOwnedController) == 0x000008, "Wrong alignment on UADSoundOwnedController");
static_assert(sizeof(UADSoundOwnedController) == 0x000080, "Wrong size on UADSoundOwnedController");
static_assert(offsetof(UADSoundOwnedController, PlayerPoolAccessor) == 0x000028, "Member 'UADSoundOwnedController::PlayerPoolAccessor' has a wrong offset!");

// Class ADSound.ADSoundPlayerBase
// 0x00C0 (0x00E8 - 0x0028)
class UADSoundPlayerBase : public UObject
{
public:
	class UADSoundSourceBase*                     SoundSource;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UADSoundCategoryParamAccessor*          CategoryParamAccessor;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IADSoundMediatorListener> MediatorListener;                                  // 0x0038(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x88];                                      // 0x0048(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class UADSoundInterpFloat*                    DynamicVolumeRate;                                 // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UADSoundInterpFloat*                    VolumeFadeParam;                                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerBase">();
	}
	static class UADSoundPlayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerBase>();
	}
};
static_assert(alignof(UADSoundPlayerBase) == 0x000008, "Wrong alignment on UADSoundPlayerBase");
static_assert(sizeof(UADSoundPlayerBase) == 0x0000E8, "Wrong size on UADSoundPlayerBase");
static_assert(offsetof(UADSoundPlayerBase, SoundSource) == 0x000028, "Member 'UADSoundPlayerBase::SoundSource' has a wrong offset!");
static_assert(offsetof(UADSoundPlayerBase, CategoryParamAccessor) == 0x000030, "Member 'UADSoundPlayerBase::CategoryParamAccessor' has a wrong offset!");
static_assert(offsetof(UADSoundPlayerBase, MediatorListener) == 0x000038, "Member 'UADSoundPlayerBase::MediatorListener' has a wrong offset!");
static_assert(offsetof(UADSoundPlayerBase, DynamicVolumeRate) == 0x0000D0, "Member 'UADSoundPlayerBase::DynamicVolumeRate' has a wrong offset!");
static_assert(offsetof(UADSoundPlayerBase, VolumeFadeParam) == 0x0000D8, "Member 'UADSoundPlayerBase::VolumeFadeParam' has a wrong offset!");

// Class ADSound.ADSoundPlayerPoolAccessor
// 0x0000 (0x0028 - 0x0028)
class UADSoundPlayerPoolAccessor : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerPoolAccessor">();
	}
	static class UADSoundPlayerPoolAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerPoolAccessor>();
	}
};
static_assert(alignof(UADSoundPlayerPoolAccessor) == 0x000008, "Wrong alignment on UADSoundPlayerPoolAccessor");
static_assert(sizeof(UADSoundPlayerPoolAccessor) == 0x000028, "Wrong size on UADSoundPlayerPoolAccessor");

// Class ADSound.ADSoundPlayerControllerBase
// 0x0078 (0x00A0 - 0x0028)
class UADSoundPlayerControllerBase : public UADSoundPlayerPoolAccessor
{
public:
	TArray<class UADSoundPlayerBase*>             arraySoundPlayerPool;                              // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UADSoundPlayerBase*>             arrayReadySoundPlayer;                             // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FADSoundPlaybackId, class UADSoundPlayerBase*> mapUsingSoundPlayer;                               // 0x0048(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerControllerBase">();
	}
	static class UADSoundPlayerControllerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerControllerBase>();
	}
};
static_assert(alignof(UADSoundPlayerControllerBase) == 0x000008, "Wrong alignment on UADSoundPlayerControllerBase");
static_assert(sizeof(UADSoundPlayerControllerBase) == 0x0000A0, "Wrong size on UADSoundPlayerControllerBase");
static_assert(offsetof(UADSoundPlayerControllerBase, arraySoundPlayerPool) == 0x000028, "Member 'UADSoundPlayerControllerBase::arraySoundPlayerPool' has a wrong offset!");
static_assert(offsetof(UADSoundPlayerControllerBase, arrayReadySoundPlayer) == 0x000038, "Member 'UADSoundPlayerControllerBase::arrayReadySoundPlayer' has a wrong offset!");
static_assert(offsetof(UADSoundPlayerControllerBase, mapUsingSoundPlayer) == 0x000048, "Member 'UADSoundPlayerControllerBase::mapUsingSoundPlayer' has a wrong offset!");

// Class ADSound.ADSoundPlayerControllerCRIWare
// 0x0010 (0x00B0 - 0x00A0)
class UADSoundPlayerControllerCRIWare final : public UADSoundPlayerControllerBase
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerControllerCRIWare">();
	}
	static class UADSoundPlayerControllerCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerControllerCRIWare>();
	}
};
static_assert(alignof(UADSoundPlayerControllerCRIWare) == 0x000008, "Wrong alignment on UADSoundPlayerControllerCRIWare");
static_assert(sizeof(UADSoundPlayerControllerCRIWare) == 0x0000B0, "Wrong size on UADSoundPlayerControllerCRIWare");

// Class ADSound.ADSoundPlayerControllerUE4
// 0x0000 (0x00A0 - 0x00A0)
class UADSoundPlayerControllerUE4 final : public UADSoundPlayerControllerBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerControllerUE4">();
	}
	static class UADSoundPlayerControllerUE4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerControllerUE4>();
	}
};
static_assert(alignof(UADSoundPlayerControllerUE4) == 0x000008, "Wrong alignment on UADSoundPlayerControllerUE4");
static_assert(sizeof(UADSoundPlayerControllerUE4) == 0x0000A0, "Wrong size on UADSoundPlayerControllerUE4");

// Class ADSound.ADSoundPlayerCRIWare
// 0x0040 (0x0128 - 0x00E8)
class UADSoundPlayerCRIWare final : public UADSoundPlayerBase
{
public:
	uint8                                         Pad_E8[0x40];                                      // 0x00E8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerCRIWare">();
	}
	static class UADSoundPlayerCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerCRIWare>();
	}
};
static_assert(alignof(UADSoundPlayerCRIWare) == 0x000008, "Wrong alignment on UADSoundPlayerCRIWare");
static_assert(sizeof(UADSoundPlayerCRIWare) == 0x000128, "Wrong size on UADSoundPlayerCRIWare");

// Class ADSound.ADSoundPlayerUE4
// 0x0008 (0x00F0 - 0x00E8)
class UADSoundPlayerUE4 final : public UADSoundPlayerBase
{
public:
	class UAudioComponent*                        CurrentSound;                                      // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundPlayerUE4">();
	}
	static class UADSoundPlayerUE4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundPlayerUE4>();
	}
};
static_assert(alignof(UADSoundPlayerUE4) == 0x000008, "Wrong alignment on UADSoundPlayerUE4");
static_assert(sizeof(UADSoundPlayerUE4) == 0x0000F0, "Wrong size on UADSoundPlayerUE4");
static_assert(offsetof(UADSoundPlayerUE4, CurrentSound) == 0x0000E8, "Member 'UADSoundPlayerUE4::CurrentSound' has a wrong offset!");

// Class ADSound.ADSoundSourceBase
// 0x0098 (0x00C0 - 0x0028)
class UADSoundSourceBase : public UObject
{
public:
	class USoundAttenuation*                      SoundAttenuation;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UADSoundListenerBase*                   Listener;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UADSoundInterpFloat*                    OcclusionVolumeRate;                               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UADSoundInterpFloat*                    OcclusionCutOffFilterFrequencyHigh;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundSourceBase">();
	}
	static class UADSoundSourceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundSourceBase>();
	}
};
static_assert(alignof(UADSoundSourceBase) == 0x000008, "Wrong alignment on UADSoundSourceBase");
static_assert(sizeof(UADSoundSourceBase) == 0x0000C0, "Wrong size on UADSoundSourceBase");
static_assert(offsetof(UADSoundSourceBase, SoundAttenuation) == 0x000028, "Member 'UADSoundSourceBase::SoundAttenuation' has a wrong offset!");
static_assert(offsetof(UADSoundSourceBase, Listener) == 0x000038, "Member 'UADSoundSourceBase::Listener' has a wrong offset!");
static_assert(offsetof(UADSoundSourceBase, OcclusionVolumeRate) == 0x000090, "Member 'UADSoundSourceBase::OcclusionVolumeRate' has a wrong offset!");
static_assert(offsetof(UADSoundSourceBase, OcclusionCutOffFilterFrequencyHigh) == 0x000098, "Member 'UADSoundSourceBase::OcclusionCutOffFilterFrequencyHigh' has a wrong offset!");

// Class ADSound.ADSoundSourceCRIWare
// 0x0008 (0x00C8 - 0x00C0)
class UADSoundSourceCRIWare final : public UADSoundSourceBase
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundSourceCRIWare">();
	}
	static class UADSoundSourceCRIWare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundSourceCRIWare>();
	}
};
static_assert(alignof(UADSoundSourceCRIWare) == 0x000008, "Wrong alignment on UADSoundSourceCRIWare");
static_assert(sizeof(UADSoundSourceCRIWare) == 0x0000C8, "Wrong size on UADSoundSourceCRIWare");

// Class ADSound.ADSoundSourceUE4
// 0x0000 (0x00C0 - 0x00C0)
class UADSoundSourceUE4 final : public UADSoundSourceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSoundSourceUE4">();
	}
	static class UADSoundSourceUE4* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSoundSourceUE4>();
	}
};
static_assert(alignof(UADSoundSourceUE4) == 0x000008, "Wrong alignment on UADSoundSourceUE4");
static_assert(sizeof(UADSoundSourceUE4) == 0x0000C0, "Wrong size on UADSoundSourceUE4");

}

