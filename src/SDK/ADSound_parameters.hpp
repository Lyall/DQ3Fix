#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ADSound

#include "Basic.hpp"

#include "ADSound_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ADSound.ADSoundManagerBase.PauseById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_PauseById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_PauseById) == 0x000004, "Wrong alignment on ADSoundManagerBase_PauseById");
static_assert(sizeof(ADSoundManagerBase_PauseById) == 0x000008, "Wrong size on ADSoundManagerBase_PauseById");
static_assert(offsetof(ADSoundManagerBase_PauseById, ID) == 0x000000, "Member 'ADSoundManagerBase_PauseById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_PauseById, bPause) == 0x000004, "Member 'ADSoundManagerBase_PauseById::bPause' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetBooleanParamById
// 0x0010 (0x0010 - 0x0000)
struct ADSoundManagerBase_SetBooleanParamById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_SetBooleanParamById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetBooleanParamById");
static_assert(sizeof(ADSoundManagerBase_SetBooleanParamById) == 0x000010, "Wrong size on ADSoundManagerBase_SetBooleanParamById");
static_assert(offsetof(ADSoundManagerBase_SetBooleanParamById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetBooleanParamById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetBooleanParamById, ParamName) == 0x000004, "Member 'ADSoundManagerBase_SetBooleanParamById::ParamName' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetBooleanParamById, Value) == 0x00000C, "Member 'ADSoundManagerBase_SetBooleanParamById::Value' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetBusSendLevelById
// 0x0020 (0x0020 - 0x0000)
struct ADSoundManagerBase_SetBusSendLevelById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BusName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_SetBusSendLevelById) == 0x000008, "Wrong alignment on ADSoundManagerBase_SetBusSendLevelById");
static_assert(sizeof(ADSoundManagerBase_SetBusSendLevelById) == 0x000020, "Wrong size on ADSoundManagerBase_SetBusSendLevelById");
static_assert(offsetof(ADSoundManagerBase_SetBusSendLevelById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetBusSendLevelById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetBusSendLevelById, BusName) == 0x000008, "Member 'ADSoundManagerBase_SetBusSendLevelById::BusName' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetBusSendLevelById, Level) == 0x000018, "Member 'ADSoundManagerBase_SetBusSendLevelById::Level' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetLocationById
// 0x0010 (0x0010 - 0x0000)
struct ADSoundManagerBase_SetLocationById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_SetLocationById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetLocationById");
static_assert(sizeof(ADSoundManagerBase_SetLocationById) == 0x000010, "Wrong size on ADSoundManagerBase_SetLocationById");
static_assert(offsetof(ADSoundManagerBase_SetLocationById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetLocationById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetLocationById, Location) == 0x000004, "Member 'ADSoundManagerBase_SetLocationById::Location' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetMuteById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_SetMuteById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMute;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_SetMuteById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetMuteById");
static_assert(sizeof(ADSoundManagerBase_SetMuteById) == 0x000008, "Wrong size on ADSoundManagerBase_SetMuteById");
static_assert(offsetof(ADSoundManagerBase_SetMuteById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetMuteById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetMuteById, bMute) == 0x000004, "Member 'ADSoundManagerBase_SetMuteById::bMute' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetPitchRateById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_SetPitchRateById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_SetPitchRateById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetPitchRateById");
static_assert(sizeof(ADSoundManagerBase_SetPitchRateById) == 0x000008, "Wrong size on ADSoundManagerBase_SetPitchRateById");
static_assert(offsetof(ADSoundManagerBase_SetPitchRateById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetPitchRateById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetPitchRateById, Rate) == 0x000004, "Member 'ADSoundManagerBase_SetPitchRateById::Rate' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetPitchRateMaxById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_SetPitchRateMaxById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_SetPitchRateMaxById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetPitchRateMaxById");
static_assert(sizeof(ADSoundManagerBase_SetPitchRateMaxById) == 0x000008, "Wrong size on ADSoundManagerBase_SetPitchRateMaxById");
static_assert(offsetof(ADSoundManagerBase_SetPitchRateMaxById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetPitchRateMaxById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetPitchRateMaxById, Rate) == 0x000004, "Member 'ADSoundManagerBase_SetPitchRateMaxById::Rate' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetVolumeFadeInById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_SetVolumeFadeInById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_SetVolumeFadeInById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetVolumeFadeInById");
static_assert(sizeof(ADSoundManagerBase_SetVolumeFadeInById) == 0x000008, "Wrong size on ADSoundManagerBase_SetVolumeFadeInById");
static_assert(offsetof(ADSoundManagerBase_SetVolumeFadeInById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetVolumeFadeInById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetVolumeFadeInById, DurationSec) == 0x000004, "Member 'ADSoundManagerBase_SetVolumeFadeInById::DurationSec' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetVolumeFadeOutById
// 0x000C (0x000C - 0x0000)
struct ADSoundManagerBase_SetVolumeFadeOutById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStop;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_SetVolumeFadeOutById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetVolumeFadeOutById");
static_assert(sizeof(ADSoundManagerBase_SetVolumeFadeOutById) == 0x00000C, "Wrong size on ADSoundManagerBase_SetVolumeFadeOutById");
static_assert(offsetof(ADSoundManagerBase_SetVolumeFadeOutById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetVolumeFadeOutById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetVolumeFadeOutById, DurationSec) == 0x000004, "Member 'ADSoundManagerBase_SetVolumeFadeOutById::DurationSec' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetVolumeFadeOutById, bAutoStop) == 0x000008, "Member 'ADSoundManagerBase_SetVolumeFadeOutById::bAutoStop' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.SetVolumeRateById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_SetVolumeRateById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_SetVolumeRateById) == 0x000004, "Wrong alignment on ADSoundManagerBase_SetVolumeRateById");
static_assert(sizeof(ADSoundManagerBase_SetVolumeRateById) == 0x000008, "Wrong size on ADSoundManagerBase_SetVolumeRateById");
static_assert(offsetof(ADSoundManagerBase_SetVolumeRateById, ID) == 0x000000, "Member 'ADSoundManagerBase_SetVolumeRateById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_SetVolumeRateById, Rate) == 0x000004, "Member 'ADSoundManagerBase_SetVolumeRateById::Rate' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.StopById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_StopById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_StopById) == 0x000004, "Wrong alignment on ADSoundManagerBase_StopById");
static_assert(sizeof(ADSoundManagerBase_StopById) == 0x000008, "Wrong size on ADSoundManagerBase_StopById");
static_assert(offsetof(ADSoundManagerBase_StopById, ID) == 0x000000, "Member 'ADSoundManagerBase_StopById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_StopById, ReturnValue) == 0x000004, "Member 'ADSoundManagerBase_StopById::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.TransitionVolumeRateById
// 0x000C (0x000C - 0x0000)
struct ADSoundManagerBase_TransitionVolumeRateById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_TransitionVolumeRateById) == 0x000004, "Wrong alignment on ADSoundManagerBase_TransitionVolumeRateById");
static_assert(sizeof(ADSoundManagerBase_TransitionVolumeRateById) == 0x00000C, "Wrong size on ADSoundManagerBase_TransitionVolumeRateById");
static_assert(offsetof(ADSoundManagerBase_TransitionVolumeRateById, ID) == 0x000000, "Member 'ADSoundManagerBase_TransitionVolumeRateById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_TransitionVolumeRateById, TargetRate) == 0x000004, "Member 'ADSoundManagerBase_TransitionVolumeRateById::TargetRate' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_TransitionVolumeRateById, DurationSec) == 0x000008, "Member 'ADSoundManagerBase_TransitionVolumeRateById::DurationSec' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.GetLengthMilliSecById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_GetLengthMilliSecById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_GetLengthMilliSecById) == 0x000004, "Wrong alignment on ADSoundManagerBase_GetLengthMilliSecById");
static_assert(sizeof(ADSoundManagerBase_GetLengthMilliSecById) == 0x000008, "Wrong size on ADSoundManagerBase_GetLengthMilliSecById");
static_assert(offsetof(ADSoundManagerBase_GetLengthMilliSecById, ID) == 0x000000, "Member 'ADSoundManagerBase_GetLengthMilliSecById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_GetLengthMilliSecById, ReturnValue) == 0x000004, "Member 'ADSoundManagerBase_GetLengthMilliSecById::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.GetRemainingMilliSecById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_GetRemainingMilliSecById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerBase_GetRemainingMilliSecById) == 0x000004, "Wrong alignment on ADSoundManagerBase_GetRemainingMilliSecById");
static_assert(sizeof(ADSoundManagerBase_GetRemainingMilliSecById) == 0x000008, "Wrong size on ADSoundManagerBase_GetRemainingMilliSecById");
static_assert(offsetof(ADSoundManagerBase_GetRemainingMilliSecById, ID) == 0x000000, "Member 'ADSoundManagerBase_GetRemainingMilliSecById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_GetRemainingMilliSecById, ReturnValue) == 0x000004, "Member 'ADSoundManagerBase_GetRemainingMilliSecById::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.IsLoopById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_IsLoopById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_IsLoopById) == 0x000004, "Wrong alignment on ADSoundManagerBase_IsLoopById");
static_assert(sizeof(ADSoundManagerBase_IsLoopById) == 0x000008, "Wrong size on ADSoundManagerBase_IsLoopById");
static_assert(offsetof(ADSoundManagerBase_IsLoopById, ID) == 0x000000, "Member 'ADSoundManagerBase_IsLoopById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_IsLoopById, ReturnValue) == 0x000004, "Member 'ADSoundManagerBase_IsLoopById::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.IsPausedById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_IsPausedById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_IsPausedById) == 0x000004, "Wrong alignment on ADSoundManagerBase_IsPausedById");
static_assert(sizeof(ADSoundManagerBase_IsPausedById) == 0x000008, "Wrong size on ADSoundManagerBase_IsPausedById");
static_assert(offsetof(ADSoundManagerBase_IsPausedById, ID) == 0x000000, "Member 'ADSoundManagerBase_IsPausedById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_IsPausedById, ReturnValue) == 0x000004, "Member 'ADSoundManagerBase_IsPausedById::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundManagerBase.IsPlayingById
// 0x0008 (0x0008 - 0x0000)
struct ADSoundManagerBase_IsPlayingById final
{
public:
	struct FADSoundPlaybackId                     ID;                                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ADSoundManagerBase_IsPlayingById) == 0x000004, "Wrong alignment on ADSoundManagerBase_IsPlayingById");
static_assert(sizeof(ADSoundManagerBase_IsPlayingById) == 0x000008, "Wrong size on ADSoundManagerBase_IsPlayingById");
static_assert(offsetof(ADSoundManagerBase_IsPlayingById, ID) == 0x000000, "Member 'ADSoundManagerBase_IsPlayingById::ID' has a wrong offset!");
static_assert(offsetof(ADSoundManagerBase_IsPlayingById, ReturnValue) == 0x000004, "Member 'ADSoundManagerBase_IsPlayingById::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundManagerCRIWare.SetAisacParamById
// 0x000C (0x000C - 0x0000)
struct ADSoundManagerCRIWare_SetAisacParamById final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AisacId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AisacValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundManagerCRIWare_SetAisacParamById) == 0x000004, "Wrong alignment on ADSoundManagerCRIWare_SetAisacParamById");
static_assert(sizeof(ADSoundManagerCRIWare_SetAisacParamById) == 0x00000C, "Wrong size on ADSoundManagerCRIWare_SetAisacParamById");
static_assert(offsetof(ADSoundManagerCRIWare_SetAisacParamById, PlaybackId) == 0x000000, "Member 'ADSoundManagerCRIWare_SetAisacParamById::PlaybackId' has a wrong offset!");
static_assert(offsetof(ADSoundManagerCRIWare_SetAisacParamById, AisacId) == 0x000004, "Member 'ADSoundManagerCRIWare_SetAisacParamById::AisacId' has a wrong offset!");
static_assert(offsetof(ADSoundManagerCRIWare_SetAisacParamById, AisacValue) == 0x000008, "Member 'ADSoundManagerCRIWare_SetAisacParamById::AisacValue' has a wrong offset!");

// Function ADSound.ADSoundFunctionLibraryCRIWare.GetBusNames
// 0x0050 (0x0050 - 0x0000)
struct ADSoundFunctionLibraryCRIWare_GetBusNames final
{
public:
	TSet<class FName>                             Out;                                               // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundFunctionLibraryCRIWare_GetBusNames) == 0x000008, "Wrong alignment on ADSoundFunctionLibraryCRIWare_GetBusNames");
static_assert(sizeof(ADSoundFunctionLibraryCRIWare_GetBusNames) == 0x000050, "Wrong size on ADSoundFunctionLibraryCRIWare_GetBusNames");
static_assert(offsetof(ADSoundFunctionLibraryCRIWare_GetBusNames, Out) == 0x000000, "Member 'ADSoundFunctionLibraryCRIWare_GetBusNames::Out' has a wrong offset!");

// Function ADSound.ADSoundInterpFloat.CancelTransition
// 0x0001 (0x0001 - 0x0000)
struct ADSoundInterpFloat_CancelTransition final
{
public:
	bool                                          bCallDelegate;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundInterpFloat_CancelTransition) == 0x000001, "Wrong alignment on ADSoundInterpFloat_CancelTransition");
static_assert(sizeof(ADSoundInterpFloat_CancelTransition) == 0x000001, "Wrong size on ADSoundInterpFloat_CancelTransition");
static_assert(offsetof(ADSoundInterpFloat_CancelTransition, bCallDelegate) == 0x000000, "Member 'ADSoundInterpFloat_CancelTransition::bCallDelegate' has a wrong offset!");

// Function ADSound.ADSoundInterpFloat.SetClampRange
// 0x0008 (0x0008 - 0x0000)
struct ADSoundInterpFloat_SetClampRange final
{
public:
	float                                         NewClampValueMin;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewClampValueMax;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundInterpFloat_SetClampRange) == 0x000004, "Wrong alignment on ADSoundInterpFloat_SetClampRange");
static_assert(sizeof(ADSoundInterpFloat_SetClampRange) == 0x000008, "Wrong size on ADSoundInterpFloat_SetClampRange");
static_assert(offsetof(ADSoundInterpFloat_SetClampRange, NewClampValueMin) == 0x000000, "Member 'ADSoundInterpFloat_SetClampRange::NewClampValueMin' has a wrong offset!");
static_assert(offsetof(ADSoundInterpFloat_SetClampRange, NewClampValueMax) == 0x000004, "Member 'ADSoundInterpFloat_SetClampRange::NewClampValueMax' has a wrong offset!");

// Function ADSound.ADSoundInterpFloat.SetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct ADSoundInterpFloat_SetCurrentValue final
{
public:
	float                                         NewCurrentValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundInterpFloat_SetCurrentValue) == 0x000004, "Wrong alignment on ADSoundInterpFloat_SetCurrentValue");
static_assert(sizeof(ADSoundInterpFloat_SetCurrentValue) == 0x000004, "Wrong size on ADSoundInterpFloat_SetCurrentValue");
static_assert(offsetof(ADSoundInterpFloat_SetCurrentValue, NewCurrentValue) == 0x000000, "Member 'ADSoundInterpFloat_SetCurrentValue::NewCurrentValue' has a wrong offset!");

// Function ADSound.ADSoundInterpFloat.StartTransition
// 0x0008 (0x0008 - 0x0000)
struct ADSoundInterpFloat_StartTransition final
{
public:
	float                                         NewTargetValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDurationSec;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundInterpFloat_StartTransition) == 0x000004, "Wrong alignment on ADSoundInterpFloat_StartTransition");
static_assert(sizeof(ADSoundInterpFloat_StartTransition) == 0x000008, "Wrong size on ADSoundInterpFloat_StartTransition");
static_assert(offsetof(ADSoundInterpFloat_StartTransition, NewTargetValue) == 0x000000, "Member 'ADSoundInterpFloat_StartTransition::NewTargetValue' has a wrong offset!");
static_assert(offsetof(ADSoundInterpFloat_StartTransition, NewDurationSec) == 0x000004, "Member 'ADSoundInterpFloat_StartTransition::NewDurationSec' has a wrong offset!");

// Function ADSound.ADSoundInterpFloat.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct ADSoundInterpFloat_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundInterpFloat_GetCurrentValue) == 0x000004, "Wrong alignment on ADSoundInterpFloat_GetCurrentValue");
static_assert(sizeof(ADSoundInterpFloat_GetCurrentValue) == 0x000004, "Wrong size on ADSoundInterpFloat_GetCurrentValue");
static_assert(offsetof(ADSoundInterpFloat_GetCurrentValue, ReturnValue) == 0x000000, "Member 'ADSoundInterpFloat_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundInterpFloat.IsOnTransition
// 0x0001 (0x0001 - 0x0000)
struct ADSoundInterpFloat_IsOnTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundInterpFloat_IsOnTransition) == 0x000001, "Wrong alignment on ADSoundInterpFloat_IsOnTransition");
static_assert(sizeof(ADSoundInterpFloat_IsOnTransition) == 0x000001, "Wrong size on ADSoundInterpFloat_IsOnTransition");
static_assert(offsetof(ADSoundInterpFloat_IsOnTransition, ReturnValue) == 0x000000, "Member 'ADSoundInterpFloat_IsOnTransition::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.AddRelativeLocation
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_AddRelativeLocation final
{
public:
	struct FVector                                AddLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_AddRelativeLocation) == 0x000004, "Wrong alignment on ADSoundListenerHandle_AddRelativeLocation");
static_assert(sizeof(ADSoundListenerHandle_AddRelativeLocation) == 0x00000C, "Wrong size on ADSoundListenerHandle_AddRelativeLocation");
static_assert(offsetof(ADSoundListenerHandle_AddRelativeLocation, AddLocation) == 0x000000, "Member 'ADSoundListenerHandle_AddRelativeLocation::AddLocation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.AddRelativeRotation
// 0x0010 (0x0010 - 0x0000)
struct ADSoundListenerHandle_AddRelativeRotation final
{
public:
	struct FQuat                                  AddRotation;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_AddRelativeRotation) == 0x000010, "Wrong alignment on ADSoundListenerHandle_AddRelativeRotation");
static_assert(sizeof(ADSoundListenerHandle_AddRelativeRotation) == 0x000010, "Wrong size on ADSoundListenerHandle_AddRelativeRotation");
static_assert(offsetof(ADSoundListenerHandle_AddRelativeRotation, AddRotation) == 0x000000, "Member 'ADSoundListenerHandle_AddRelativeRotation::AddRotation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.AddRelativeTransform
// 0x0030 (0x0030 - 0x0000)
struct ADSoundListenerHandle_AddRelativeTransform final
{
public:
	struct FTransform                             AddTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_AddRelativeTransform) == 0x000010, "Wrong alignment on ADSoundListenerHandle_AddRelativeTransform");
static_assert(sizeof(ADSoundListenerHandle_AddRelativeTransform) == 0x000030, "Wrong size on ADSoundListenerHandle_AddRelativeTransform");
static_assert(offsetof(ADSoundListenerHandle_AddRelativeTransform, AddTransform) == 0x000000, "Member 'ADSoundListenerHandle_AddRelativeTransform::AddTransform' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.AddWorldLocation
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_AddWorldLocation final
{
public:
	struct FVector                                AddLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_AddWorldLocation) == 0x000004, "Wrong alignment on ADSoundListenerHandle_AddWorldLocation");
static_assert(sizeof(ADSoundListenerHandle_AddWorldLocation) == 0x00000C, "Wrong size on ADSoundListenerHandle_AddWorldLocation");
static_assert(offsetof(ADSoundListenerHandle_AddWorldLocation, AddLocation) == 0x000000, "Member 'ADSoundListenerHandle_AddWorldLocation::AddLocation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.AddWorldRotation
// 0x0010 (0x0010 - 0x0000)
struct ADSoundListenerHandle_AddWorldRotation final
{
public:
	struct FQuat                                  AddRotation;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_AddWorldRotation) == 0x000010, "Wrong alignment on ADSoundListenerHandle_AddWorldRotation");
static_assert(sizeof(ADSoundListenerHandle_AddWorldRotation) == 0x000010, "Wrong size on ADSoundListenerHandle_AddWorldRotation");
static_assert(offsetof(ADSoundListenerHandle_AddWorldRotation, AddRotation) == 0x000000, "Member 'ADSoundListenerHandle_AddWorldRotation::AddRotation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.AddWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct ADSoundListenerHandle_AddWorldTransform final
{
public:
	struct FTransform                             AddTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_AddWorldTransform) == 0x000010, "Wrong alignment on ADSoundListenerHandle_AddWorldTransform");
static_assert(sizeof(ADSoundListenerHandle_AddWorldTransform) == 0x000030, "Wrong size on ADSoundListenerHandle_AddWorldTransform");
static_assert(offsetof(ADSoundListenerHandle_AddWorldTransform, AddTransform) == 0x000000, "Member 'ADSoundListenerHandle_AddWorldTransform::AddTransform' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.EnableAutoUpdateVelocity
// 0x0001 (0x0001 - 0x0000)
struct ADSoundListenerHandle_EnableAutoUpdateVelocity final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_EnableAutoUpdateVelocity) == 0x000001, "Wrong alignment on ADSoundListenerHandle_EnableAutoUpdateVelocity");
static_assert(sizeof(ADSoundListenerHandle_EnableAutoUpdateVelocity) == 0x000001, "Wrong size on ADSoundListenerHandle_EnableAutoUpdateVelocity");
static_assert(offsetof(ADSoundListenerHandle_EnableAutoUpdateVelocity, bEnable) == 0x000000, "Member 'ADSoundListenerHandle_EnableAutoUpdateVelocity::bEnable' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetOwner
// 0x0008 (0x0008 - 0x0000)
struct ADSoundListenerHandle_SetOwner final
{
public:
	const class AActor*                           NewOwner;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetOwner) == 0x000008, "Wrong alignment on ADSoundListenerHandle_SetOwner");
static_assert(sizeof(ADSoundListenerHandle_SetOwner) == 0x000008, "Wrong size on ADSoundListenerHandle_SetOwner");
static_assert(offsetof(ADSoundListenerHandle_SetOwner, NewOwner) == 0x000000, "Member 'ADSoundListenerHandle_SetOwner::NewOwner' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetRelativeLocation
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_SetRelativeLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetRelativeLocation) == 0x000004, "Wrong alignment on ADSoundListenerHandle_SetRelativeLocation");
static_assert(sizeof(ADSoundListenerHandle_SetRelativeLocation) == 0x00000C, "Wrong size on ADSoundListenerHandle_SetRelativeLocation");
static_assert(offsetof(ADSoundListenerHandle_SetRelativeLocation, NewLocation) == 0x000000, "Member 'ADSoundListenerHandle_SetRelativeLocation::NewLocation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetRelativeRotation
// 0x0010 (0x0010 - 0x0000)
struct ADSoundListenerHandle_SetRelativeRotation final
{
public:
	struct FQuat                                  NewRotation;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetRelativeRotation) == 0x000010, "Wrong alignment on ADSoundListenerHandle_SetRelativeRotation");
static_assert(sizeof(ADSoundListenerHandle_SetRelativeRotation) == 0x000010, "Wrong size on ADSoundListenerHandle_SetRelativeRotation");
static_assert(offsetof(ADSoundListenerHandle_SetRelativeRotation, NewRotation) == 0x000000, "Member 'ADSoundListenerHandle_SetRelativeRotation::NewRotation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetRelativeTransform
// 0x0030 (0x0030 - 0x0000)
struct ADSoundListenerHandle_SetRelativeTransform final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetRelativeTransform) == 0x000010, "Wrong alignment on ADSoundListenerHandle_SetRelativeTransform");
static_assert(sizeof(ADSoundListenerHandle_SetRelativeTransform) == 0x000030, "Wrong size on ADSoundListenerHandle_SetRelativeTransform");
static_assert(offsetof(ADSoundListenerHandle_SetRelativeTransform, NewTransform) == 0x000000, "Member 'ADSoundListenerHandle_SetRelativeTransform::NewTransform' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetVelocity
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_SetVelocity final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetVelocity) == 0x000004, "Wrong alignment on ADSoundListenerHandle_SetVelocity");
static_assert(sizeof(ADSoundListenerHandle_SetVelocity) == 0x00000C, "Wrong size on ADSoundListenerHandle_SetVelocity");
static_assert(offsetof(ADSoundListenerHandle_SetVelocity, NewVelocity) == 0x000000, "Member 'ADSoundListenerHandle_SetVelocity::NewVelocity' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetWorldLocation
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_SetWorldLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetWorldLocation) == 0x000004, "Wrong alignment on ADSoundListenerHandle_SetWorldLocation");
static_assert(sizeof(ADSoundListenerHandle_SetWorldLocation) == 0x00000C, "Wrong size on ADSoundListenerHandle_SetWorldLocation");
static_assert(offsetof(ADSoundListenerHandle_SetWorldLocation, NewLocation) == 0x000000, "Member 'ADSoundListenerHandle_SetWorldLocation::NewLocation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetWorldRotation
// 0x0010 (0x0010 - 0x0000)
struct ADSoundListenerHandle_SetWorldRotation final
{
public:
	struct FQuat                                  NewRotation;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetWorldRotation) == 0x000010, "Wrong alignment on ADSoundListenerHandle_SetWorldRotation");
static_assert(sizeof(ADSoundListenerHandle_SetWorldRotation) == 0x000010, "Wrong size on ADSoundListenerHandle_SetWorldRotation");
static_assert(offsetof(ADSoundListenerHandle_SetWorldRotation, NewRotation) == 0x000000, "Member 'ADSoundListenerHandle_SetWorldRotation::NewRotation' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.SetWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct ADSoundListenerHandle_SetWorldTransform final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_SetWorldTransform) == 0x000010, "Wrong alignment on ADSoundListenerHandle_SetWorldTransform");
static_assert(sizeof(ADSoundListenerHandle_SetWorldTransform) == 0x000030, "Wrong size on ADSoundListenerHandle_SetWorldTransform");
static_assert(offsetof(ADSoundListenerHandle_SetWorldTransform, NewTransform) == 0x000000, "Member 'ADSoundListenerHandle_SetWorldTransform::NewTransform' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.UseCameraRotation
// 0x0001 (0x0001 - 0x0000)
struct ADSoundListenerHandle_UseCameraRotation final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_UseCameraRotation) == 0x000001, "Wrong alignment on ADSoundListenerHandle_UseCameraRotation");
static_assert(sizeof(ADSoundListenerHandle_UseCameraRotation) == 0x000001, "Wrong size on ADSoundListenerHandle_UseCameraRotation");
static_assert(offsetof(ADSoundListenerHandle_UseCameraRotation, bEnable) == 0x000000, "Member 'ADSoundListenerHandle_UseCameraRotation::bEnable' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct ADSoundListenerHandle_GetOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetOwner) == 0x000008, "Wrong alignment on ADSoundListenerHandle_GetOwner");
static_assert(sizeof(ADSoundListenerHandle_GetOwner) == 0x000008, "Wrong size on ADSoundListenerHandle_GetOwner");
static_assert(offsetof(ADSoundListenerHandle_GetOwner, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetOwner::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetRelativeLocation
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_GetRelativeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetRelativeLocation) == 0x000004, "Wrong alignment on ADSoundListenerHandle_GetRelativeLocation");
static_assert(sizeof(ADSoundListenerHandle_GetRelativeLocation) == 0x00000C, "Wrong size on ADSoundListenerHandle_GetRelativeLocation");
static_assert(offsetof(ADSoundListenerHandle_GetRelativeLocation, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetRelativeLocation::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetRelativeRotation
// 0x0010 (0x0010 - 0x0000)
struct ADSoundListenerHandle_GetRelativeRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetRelativeRotation) == 0x000010, "Wrong alignment on ADSoundListenerHandle_GetRelativeRotation");
static_assert(sizeof(ADSoundListenerHandle_GetRelativeRotation) == 0x000010, "Wrong size on ADSoundListenerHandle_GetRelativeRotation");
static_assert(offsetof(ADSoundListenerHandle_GetRelativeRotation, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetRelativeRotation::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetRelativeTransform
// 0x0030 (0x0030 - 0x0000)
struct ADSoundListenerHandle_GetRelativeTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetRelativeTransform) == 0x000010, "Wrong alignment on ADSoundListenerHandle_GetRelativeTransform");
static_assert(sizeof(ADSoundListenerHandle_GetRelativeTransform) == 0x000030, "Wrong size on ADSoundListenerHandle_GetRelativeTransform");
static_assert(offsetof(ADSoundListenerHandle_GetRelativeTransform, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetRelativeTransform::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetVelocity
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_GetVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetVelocity) == 0x000004, "Wrong alignment on ADSoundListenerHandle_GetVelocity");
static_assert(sizeof(ADSoundListenerHandle_GetVelocity) == 0x00000C, "Wrong size on ADSoundListenerHandle_GetVelocity");
static_assert(offsetof(ADSoundListenerHandle_GetVelocity, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetVelocity::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetWorldLocation
// 0x000C (0x000C - 0x0000)
struct ADSoundListenerHandle_GetWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetWorldLocation) == 0x000004, "Wrong alignment on ADSoundListenerHandle_GetWorldLocation");
static_assert(sizeof(ADSoundListenerHandle_GetWorldLocation) == 0x00000C, "Wrong size on ADSoundListenerHandle_GetWorldLocation");
static_assert(offsetof(ADSoundListenerHandle_GetWorldLocation, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetWorldLocation::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetWorldRotation
// 0x0010 (0x0010 - 0x0000)
struct ADSoundListenerHandle_GetWorldRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetWorldRotation) == 0x000010, "Wrong alignment on ADSoundListenerHandle_GetWorldRotation");
static_assert(sizeof(ADSoundListenerHandle_GetWorldRotation) == 0x000010, "Wrong size on ADSoundListenerHandle_GetWorldRotation");
static_assert(offsetof(ADSoundListenerHandle_GetWorldRotation, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetWorldRotation::ReturnValue' has a wrong offset!");

// Function ADSound.ADSoundListenerHandle.GetWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct ADSoundListenerHandle_GetWorldTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ADSoundListenerHandle_GetWorldTransform) == 0x000010, "Wrong alignment on ADSoundListenerHandle_GetWorldTransform");
static_assert(sizeof(ADSoundListenerHandle_GetWorldTransform) == 0x000030, "Wrong size on ADSoundListenerHandle_GetWorldTransform");
static_assert(offsetof(ADSoundListenerHandle_GetWorldTransform, ReturnValue) == 0x000000, "Member 'ADSoundListenerHandle_GetWorldTransform::ReturnValue' has a wrong offset!");

}

