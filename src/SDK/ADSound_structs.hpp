#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ADSound

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum ADSound.EADSoundAudioDeviceType
// NumValues: 0x0006
enum class EADSoundAudioDeviceType : uint8
{
	INVALID                                  = 0,
	BUILTIN_SPEAKER                          = 1,
	TV                                       = 2,
	STEREO_JACK                              = 3,
	USB_DEVICE                               = 4,
	EADSoundAudioDeviceType_MAX              = 5,
};

// Enum ADSound.ENicolaSoundSuperVisionCategory
// NumValues: 0x0004
enum class ENicolaSoundSuperVisionCategory : uint8
{
	BGM_MISC                                 = 0,
	ME_MISC                                  = 1,
	NONE                                     = 2,
	ENicolaSoundSuperVisionCategory_MAX      = 3,
};

// Enum ADSound.ENicolaSoundCueSheetTypeVoice
// NumValues: 0x0003
enum class ENicolaSoundCueSheetTypeVoice : uint8
{
	COMMON                                   = 0,
	EXPAND                                   = 1,
	ENicolaSoundCueSheetTypeVoice_MAX        = 2,
};

// Enum ADSound.ENicolaSoundCategory
// NumValues: 0x0017
enum class ENicolaSoundCategory : uint8
{
	BGM                                      = 0,
	SE                                       = 1,
	VOICE                                    = 2,
	AMBIENT                                  = 3,
	BGM_BGM                                  = 10,
	BGM_ME                                   = 11,
	SE_BATTLE                                = 12,
	SE_ENVIROMENT                            = 13,
	SE_EVENT                                 = 14,
	SE_SYSTEM                                = 15,
	SE_TOWN_DUNGEON                          = 16,
	VOICE_BATTLE                             = 17,
	VOICE_EVENT                              = 18,
	SE_EVENT_MEPLAYING                       = 19,
	SE_SYSTEM_SKIP                           = 20,
	m2D                                      = 240,
	m3D                                      = 241,
	LUA_SOUND                                = 242,
	AUDIO_DEVICE                             = 244,
	LOOP                                     = 246,
	REGULAR                                  = 253,
	DEBUG                                    = 254,
	MAX                                      = 255,
};

// ScriptStruct ADSound.ADSoundSourceParam
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FADSoundSourceParam final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundSourceParam) == 0x000008, "Wrong alignment on FADSoundSourceParam");
static_assert(sizeof(FADSoundSourceParam) == 0x000080, "Wrong size on FADSoundSourceParam");

// ScriptStruct ADSound.ADSoundPlaybackId
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FADSoundPlaybackId final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundPlaybackId) == 0x000004, "Wrong alignment on FADSoundPlaybackId");
static_assert(sizeof(FADSoundPlaybackId) == 0x000004, "Wrong size on FADSoundPlaybackId");

// ScriptStruct ADSound.ADSoundCategoryParams
// 0x0018 (0x0018 - 0x0000)
struct FADSoundCategoryParams final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UADSoundInterpFloat*                    DynamicVolumeRate;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UADSoundInterpFloat*                    VolumeFadeParam;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FADSoundCategoryParams) == 0x000008, "Wrong alignment on FADSoundCategoryParams");
static_assert(sizeof(FADSoundCategoryParams) == 0x000018, "Wrong size on FADSoundCategoryParams");
static_assert(offsetof(FADSoundCategoryParams, DynamicVolumeRate) == 0x000008, "Member 'FADSoundCategoryParams::DynamicVolumeRate' has a wrong offset!");
static_assert(offsetof(FADSoundCategoryParams, VolumeFadeParam) == 0x000010, "Member 'FADSoundCategoryParams::VolumeFadeParam' has a wrong offset!");

// ScriptStruct ADSound.ADSoundCullingParam
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FADSoundCullingParam final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundCullingParam) == 0x000004, "Wrong alignment on FADSoundCullingParam");
static_assert(sizeof(FADSoundCullingParam) == 0x000010, "Wrong size on FADSoundCullingParam");

// ScriptStruct ADSound.ADSoundSourceCriwareParams
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FADSoundSourceCriwareParams final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundSourceCriwareParams) == 0x000008, "Wrong alignment on FADSoundSourceCriwareParams");
static_assert(sizeof(FADSoundSourceCriwareParams) == 0x000058, "Wrong size on FADSoundSourceCriwareParams");

// ScriptStruct ADSound.ADSoundPlayerParam
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FADSoundPlayerParam final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundPlayerParam) == 0x000008, "Wrong alignment on FADSoundPlayerParam");
static_assert(sizeof(FADSoundPlayerParam) == 0x0000A8, "Wrong size on FADSoundPlayerParam");

// ScriptStruct ADSound.ADSoundPlayerUE4Params
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FADSoundPlayerUE4Params final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundPlayerUE4Params) == 0x000008, "Wrong alignment on FADSoundPlayerUE4Params");
static_assert(sizeof(FADSoundPlayerUE4Params) == 0x000008, "Wrong size on FADSoundPlayerUE4Params");

// ScriptStruct ADSound.ADSoundPlayerCriwareParams
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FADSoundPlayerCriwareParams final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundPlayerCriwareParams) == 0x000008, "Wrong alignment on FADSoundPlayerCriwareParams");
static_assert(sizeof(FADSoundPlayerCriwareParams) == 0x000030, "Wrong size on FADSoundPlayerCriwareParams");

// ScriptStruct ADSound.ADSoundSpeakerAngle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FADSoundSpeakerAngle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundSpeakerAngle) == 0x000004, "Wrong alignment on FADSoundSpeakerAngle");
static_assert(sizeof(FADSoundSpeakerAngle) == 0x000018, "Wrong size on FADSoundSpeakerAngle");

// ScriptStruct ADSound.ADSoundListenerControllParam
// 0x0010 (0x0010 - 0x0000)
struct FADSoundListenerControllParam final
{
public:
	class UADSoundListenerBase*                   Listener;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundListenerControllParam) == 0x000008, "Wrong alignment on FADSoundListenerControllParam");
static_assert(sizeof(FADSoundListenerControllParam) == 0x000010, "Wrong size on FADSoundListenerControllParam");
static_assert(offsetof(FADSoundListenerControllParam, Listener) == 0x000000, "Member 'FADSoundListenerControllParam::Listener' has a wrong offset!");

// ScriptStruct ADSound.ADSoundListenerId
// 0x0002 (0x0002 - 0x0000)
struct alignas(0x02) FADSoundListenerId final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundListenerId) == 0x000002, "Wrong alignment on FADSoundListenerId");
static_assert(sizeof(FADSoundListenerId) == 0x000002, "Wrong size on FADSoundListenerId");

// ScriptStruct ADSound.ADSoundCategoryId
// 0x0002 (0x0002 - 0x0000)
struct alignas(0x02) FADSoundCategoryId final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FADSoundCategoryId) == 0x000002, "Wrong alignment on FADSoundCategoryId");
static_assert(sizeof(FADSoundCategoryId) == 0x000002, "Wrong size on FADSoundCategoryId");

// ScriptStruct ADSound.GOP_Sound_BgmTable
// 0x0030 (0x0038 - 0x0008)
struct FGOP_Sound_BgmTable final : public FTableRowBase
{
public:
	class FString                                 PathCueSheet;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCueID;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaSoundCategory                          CategoryId;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fVolume;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaSoundSuperVisionCategory               SuperVisionCategory;                               // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SuperVisionSoundName;                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGOP_Sound_BgmTable) == 0x000008, "Wrong alignment on FGOP_Sound_BgmTable");
static_assert(sizeof(FGOP_Sound_BgmTable) == 0x000038, "Wrong size on FGOP_Sound_BgmTable");
static_assert(offsetof(FGOP_Sound_BgmTable, PathCueSheet) == 0x000008, "Member 'FGOP_Sound_BgmTable::PathCueSheet' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_BgmTable, iCueID) == 0x000018, "Member 'FGOP_Sound_BgmTable::iCueID' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_BgmTable, CategoryId) == 0x00001C, "Member 'FGOP_Sound_BgmTable::CategoryId' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_BgmTable, fVolume) == 0x000020, "Member 'FGOP_Sound_BgmTable::fVolume' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_BgmTable, SuperVisionCategory) == 0x000024, "Member 'FGOP_Sound_BgmTable::SuperVisionCategory' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_BgmTable, SuperVisionSoundName) == 0x000028, "Member 'FGOP_Sound_BgmTable::SuperVisionSoundName' has a wrong offset!");

// ScriptStruct ADSound.GOP_Sound_SeTable
// 0x0070 (0x0078 - 0x0008)
struct FGOP_Sound_SeTable final : public FTableRowBase
{
public:
	class FString                                 PathCueSheet;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCueID1;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCueID2;                                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCueID3;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueWeight1;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueWeight2;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueWeight3;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaSoundCategory                          CategoryId;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fVolume;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpatialize;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttenauteByDistance;                              // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fAttenuationMin;                                   // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fAttenuationMax;                                   // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fInteriorSourceRadius;                             // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fInteriorDistance;                                 // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iPriorityOffset;                                   // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStopOnOwnerDestroyed;                         // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowOwner;                                      // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCullingLocal;                                     // 0x0052(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrioritizeFirst;                                  // 0x0053(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCullingMilliSec;                                  // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Attenuation;                                       // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Concurrency;                                       // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGOP_Sound_SeTable) == 0x000008, "Wrong alignment on FGOP_Sound_SeTable");
static_assert(sizeof(FGOP_Sound_SeTable) == 0x000078, "Wrong size on FGOP_Sound_SeTable");
static_assert(offsetof(FGOP_Sound_SeTable, PathCueSheet) == 0x000008, "Member 'FGOP_Sound_SeTable::PathCueSheet' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, iCueID1) == 0x000018, "Member 'FGOP_Sound_SeTable::iCueID1' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, iCueID2) == 0x00001C, "Member 'FGOP_Sound_SeTable::iCueID2' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, iCueID3) == 0x000020, "Member 'FGOP_Sound_SeTable::iCueID3' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, CueWeight1) == 0x000024, "Member 'FGOP_Sound_SeTable::CueWeight1' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, CueWeight2) == 0x000028, "Member 'FGOP_Sound_SeTable::CueWeight2' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, CueWeight3) == 0x00002C, "Member 'FGOP_Sound_SeTable::CueWeight3' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, CategoryId) == 0x000030, "Member 'FGOP_Sound_SeTable::CategoryId' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, fVolume) == 0x000034, "Member 'FGOP_Sound_SeTable::fVolume' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, bSpatialize) == 0x000038, "Member 'FGOP_Sound_SeTable::bSpatialize' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, bAttenauteByDistance) == 0x000039, "Member 'FGOP_Sound_SeTable::bAttenauteByDistance' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, fAttenuationMin) == 0x00003C, "Member 'FGOP_Sound_SeTable::fAttenuationMin' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, fAttenuationMax) == 0x000040, "Member 'FGOP_Sound_SeTable::fAttenuationMax' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, fInteriorSourceRadius) == 0x000044, "Member 'FGOP_Sound_SeTable::fInteriorSourceRadius' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, fInteriorDistance) == 0x000048, "Member 'FGOP_Sound_SeTable::fInteriorDistance' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, iPriorityOffset) == 0x00004C, "Member 'FGOP_Sound_SeTable::iPriorityOffset' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, bAutoStopOnOwnerDestroyed) == 0x000050, "Member 'FGOP_Sound_SeTable::bAutoStopOnOwnerDestroyed' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, bFollowOwner) == 0x000051, "Member 'FGOP_Sound_SeTable::bFollowOwner' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, bCullingLocal) == 0x000052, "Member 'FGOP_Sound_SeTable::bCullingLocal' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, bPrioritizeFirst) == 0x000053, "Member 'FGOP_Sound_SeTable::bPrioritizeFirst' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, iCullingMilliSec) == 0x000054, "Member 'FGOP_Sound_SeTable::iCullingMilliSec' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, Attenuation) == 0x000058, "Member 'FGOP_Sound_SeTable::Attenuation' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_SeTable, Concurrency) == 0x000068, "Member 'FGOP_Sound_SeTable::Concurrency' has a wrong offset!");

// ScriptStruct ADSound.GOP_Sound_VoiceTable
// 0x0060 (0x0068 - 0x0008)
struct FGOP_Sound_VoiceTable final : public FTableRowBase
{
public:
	ENicolaSoundCueSheetTypeVoice                 NicolaSoundCueSheetTypeVoice;                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         iCueID1;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCueID2;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCueID3;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueWeight1;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueWeight2;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueWeight3;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fVolume;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpatialize;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttenauteByDistance;                              // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fAttenuationMin;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fAttenuationMax;                                   // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fInteriorSourceRadius;                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fInteriorDistance;                                 // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iPriorityOffset;                                   // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStopOnOwnerDestroyed;                         // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowOwner;                                      // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCullingLocal;                                     // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrioritizeFirst;                                  // 0x0043(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iCullingMilliSec;                                  // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Attenuation;                                       // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Concurrency;                                       // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGOP_Sound_VoiceTable) == 0x000008, "Wrong alignment on FGOP_Sound_VoiceTable");
static_assert(sizeof(FGOP_Sound_VoiceTable) == 0x000068, "Wrong size on FGOP_Sound_VoiceTable");
static_assert(offsetof(FGOP_Sound_VoiceTable, NicolaSoundCueSheetTypeVoice) == 0x000008, "Member 'FGOP_Sound_VoiceTable::NicolaSoundCueSheetTypeVoice' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, iCueID1) == 0x00000C, "Member 'FGOP_Sound_VoiceTable::iCueID1' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, iCueID2) == 0x000010, "Member 'FGOP_Sound_VoiceTable::iCueID2' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, iCueID3) == 0x000014, "Member 'FGOP_Sound_VoiceTable::iCueID3' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, CueWeight1) == 0x000018, "Member 'FGOP_Sound_VoiceTable::CueWeight1' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, CueWeight2) == 0x00001C, "Member 'FGOP_Sound_VoiceTable::CueWeight2' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, CueWeight3) == 0x000020, "Member 'FGOP_Sound_VoiceTable::CueWeight3' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, fVolume) == 0x000024, "Member 'FGOP_Sound_VoiceTable::fVolume' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, bSpatialize) == 0x000028, "Member 'FGOP_Sound_VoiceTable::bSpatialize' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, bAttenauteByDistance) == 0x000029, "Member 'FGOP_Sound_VoiceTable::bAttenauteByDistance' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, fAttenuationMin) == 0x00002C, "Member 'FGOP_Sound_VoiceTable::fAttenuationMin' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, fAttenuationMax) == 0x000030, "Member 'FGOP_Sound_VoiceTable::fAttenuationMax' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, fInteriorSourceRadius) == 0x000034, "Member 'FGOP_Sound_VoiceTable::fInteriorSourceRadius' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, fInteriorDistance) == 0x000038, "Member 'FGOP_Sound_VoiceTable::fInteriorDistance' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, iPriorityOffset) == 0x00003C, "Member 'FGOP_Sound_VoiceTable::iPriorityOffset' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, bAutoStopOnOwnerDestroyed) == 0x000040, "Member 'FGOP_Sound_VoiceTable::bAutoStopOnOwnerDestroyed' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, bFollowOwner) == 0x000041, "Member 'FGOP_Sound_VoiceTable::bFollowOwner' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, bCullingLocal) == 0x000042, "Member 'FGOP_Sound_VoiceTable::bCullingLocal' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, bPrioritizeFirst) == 0x000043, "Member 'FGOP_Sound_VoiceTable::bPrioritizeFirst' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, iCullingMilliSec) == 0x000044, "Member 'FGOP_Sound_VoiceTable::iCullingMilliSec' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, Attenuation) == 0x000048, "Member 'FGOP_Sound_VoiceTable::Attenuation' has a wrong offset!");
static_assert(offsetof(FGOP_Sound_VoiceTable, Concurrency) == 0x000058, "Member 'FGOP_Sound_VoiceTable::Concurrency' has a wrong offset!");

}

