#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NicolaCharacterBase

#include "Basic.hpp"

#include "Nicola_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NicolaCharacterBase.BP_NicolaCharacterBase_C
// 0x0050 (0x0770 - 0x0720)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_NicolaCharacterBase_C : public ANicolaCharacterBase
{
public:
	class UEventMangaIconComponent*               EventMangaIcon;                                    // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        decalCharacterShadow;                              // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNpcEventTrigger*                       NpcEventTrigger;                                   // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       EventCollision;                                    // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNicolaPaperFlipbookComponent*          DammyShadowCharacter;                              // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNicolaPaperFlipbookComponent*          Weapon;                                            // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        CIRCLE_SHADOW;                                     // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CircleShadowPosition;                              // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   ConstructionTagName;                               // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NicolaCharacterBase_C">();
	}
	static class ABP_NicolaCharacterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NicolaCharacterBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_NicolaCharacterBase_C) == 0x000010, "Wrong alignment on ABP_NicolaCharacterBase_C");
static_assert(sizeof(ABP_NicolaCharacterBase_C) == 0x000770, "Wrong size on ABP_NicolaCharacterBase_C");
static_assert(offsetof(ABP_NicolaCharacterBase_C, EventMangaIcon) == 0x000720, "Member 'ABP_NicolaCharacterBase_C::EventMangaIcon' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, decalCharacterShadow) == 0x000728, "Member 'ABP_NicolaCharacterBase_C::decalCharacterShadow' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, NpcEventTrigger) == 0x000730, "Member 'ABP_NicolaCharacterBase_C::NpcEventTrigger' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, EventCollision) == 0x000738, "Member 'ABP_NicolaCharacterBase_C::EventCollision' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, DammyShadowCharacter) == 0x000740, "Member 'ABP_NicolaCharacterBase_C::DammyShadowCharacter' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, Weapon) == 0x000748, "Member 'ABP_NicolaCharacterBase_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, CIRCLE_SHADOW) == 0x000750, "Member 'ABP_NicolaCharacterBase_C::CIRCLE_SHADOW' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, CircleShadowPosition) == 0x000758, "Member 'ABP_NicolaCharacterBase_C::CircleShadowPosition' has a wrong offset!");
static_assert(offsetof(ABP_NicolaCharacterBase_C, ConstructionTagName) == 0x000760, "Member 'ABP_NicolaCharacterBase_C::ConstructionTagName' has a wrong offset!");

}

