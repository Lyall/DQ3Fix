#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Nicola

#include "Basic.hpp"

#include "ADSound_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Nicola_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "CriWareRuntime_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Nicola.TriggerEventActor.GetTriggerType
// 0x0001 (0x0001 - 0x0000)
struct TriggerEventActor_GetTriggerType final
{
public:
	EEventTriggerType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerEventActor_GetTriggerType) == 0x000001, "Wrong alignment on TriggerEventActor_GetTriggerType");
static_assert(sizeof(TriggerEventActor_GetTriggerType) == 0x000001, "Wrong size on TriggerEventActor_GetTriggerType");
static_assert(offsetof(TriggerEventActor_GetTriggerType, ReturnValue) == 0x000000, "Member 'TriggerEventActor_GetTriggerType::ReturnValue' has a wrong offset!");

// Function Nicola.ActorListMan.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct ActorListMan_GetInstance final
{
public:
	class UActorListMan*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorListMan_GetInstance) == 0x000008, "Wrong alignment on ActorListMan_GetInstance");
static_assert(sizeof(ActorListMan_GetInstance) == 0x000008, "Wrong size on ActorListMan_GetInstance");
static_assert(offsetof(ActorListMan_GetInstance, ReturnValue) == 0x000000, "Member 'ActorListMan_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.ActorListMan.GetActorList
// 0x0018 (0x0018 - 0x0000)
struct ActorListMan_GetActorList final
{
public:
	EActorType                                    actorType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorListMan_GetActorList) == 0x000008, "Wrong alignment on ActorListMan_GetActorList");
static_assert(sizeof(ActorListMan_GetActorList) == 0x000018, "Wrong size on ActorListMan_GetActorList");
static_assert(offsetof(ActorListMan_GetActorList, actorType) == 0x000000, "Member 'ActorListMan_GetActorList::actorType' has a wrong offset!");
static_assert(offsetof(ActorListMan_GetActorList, ReturnValue) == 0x000008, "Member 'ActorListMan_GetActorList::ReturnValue' has a wrong offset!");

// Function Nicola.ActorListMan.GetActorListInRange
// 0x0028 (0x0028 - 0x0000)
struct ActorListMan_GetActorListInRange final
{
public:
	EActorType                                    actorType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Center;                                            // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreZ;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorListMan_GetActorListInRange) == 0x000008, "Wrong alignment on ActorListMan_GetActorListInRange");
static_assert(sizeof(ActorListMan_GetActorListInRange) == 0x000028, "Wrong size on ActorListMan_GetActorListInRange");
static_assert(offsetof(ActorListMan_GetActorListInRange, actorType) == 0x000000, "Member 'ActorListMan_GetActorListInRange::actorType' has a wrong offset!");
static_assert(offsetof(ActorListMan_GetActorListInRange, Center) == 0x000004, "Member 'ActorListMan_GetActorListInRange::Center' has a wrong offset!");
static_assert(offsetof(ActorListMan_GetActorListInRange, Radius) == 0x000010, "Member 'ActorListMan_GetActorListInRange::Radius' has a wrong offset!");
static_assert(offsetof(ActorListMan_GetActorListInRange, bIgnoreZ) == 0x000014, "Member 'ActorListMan_GetActorListInRange::bIgnoreZ' has a wrong offset!");
static_assert(offsetof(ActorListMan_GetActorListInRange, ReturnValue) == 0x000018, "Member 'ActorListMan_GetActorListInRange::ReturnValue' has a wrong offset!");

// Function Nicola.LevelLoaderActor.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct LevelLoaderActor_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLoaderActor_OnOverlapBegin) == 0x000008, "Wrong alignment on LevelLoaderActor_OnOverlapBegin");
static_assert(sizeof(LevelLoaderActor_OnOverlapBegin) == 0x0000A8, "Wrong size on LevelLoaderActor_OnOverlapBegin");
static_assert(offsetof(LevelLoaderActor_OnOverlapBegin, OverlappedComp) == 0x000000, "Member 'LevelLoaderActor_OnOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(LevelLoaderActor_OnOverlapBegin, OtherActor) == 0x000008, "Member 'LevelLoaderActor_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(LevelLoaderActor_OnOverlapBegin, OtherComp) == 0x000010, "Member 'LevelLoaderActor_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(LevelLoaderActor_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'LevelLoaderActor_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(LevelLoaderActor_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'LevelLoaderActor_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(LevelLoaderActor_OnOverlapBegin, SweepResult) == 0x000020, "Member 'LevelLoaderActor_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function Nicola.ButtonGuideComponent.BP_ShowButtonGuide
// 0x0008 (0x0008 - 0x0000)
struct ButtonGuideComponent_BP_ShowButtonGuide final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButtonGuideComponent_BP_ShowButtonGuide) == 0x000004, "Wrong alignment on ButtonGuideComponent_BP_ShowButtonGuide");
static_assert(sizeof(ButtonGuideComponent_BP_ShowButtonGuide) == 0x000008, "Wrong size on ButtonGuideComponent_BP_ShowButtonGuide");
static_assert(offsetof(ButtonGuideComponent_BP_ShowButtonGuide, ID) == 0x000000, "Member 'ButtonGuideComponent_BP_ShowButtonGuide::ID' has a wrong offset!");

// Function Nicola.NicolaPaperFlipbookComponent.PlayNewFlipbook
// 0x0018 (0x0018 - 0x0000)
struct NicolaPaperFlipbookComponent_PlayNewFlipbook final
{
public:
	class UPaperFlipbook*                         NewFlipbook;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         mReservedStartFrame;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mReservedPlayRate;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPaperFlipbookComponent_PlayNewFlipbook) == 0x000008, "Wrong alignment on NicolaPaperFlipbookComponent_PlayNewFlipbook");
static_assert(sizeof(NicolaPaperFlipbookComponent_PlayNewFlipbook) == 0x000018, "Wrong size on NicolaPaperFlipbookComponent_PlayNewFlipbook");
static_assert(offsetof(NicolaPaperFlipbookComponent_PlayNewFlipbook, NewFlipbook) == 0x000000, "Member 'NicolaPaperFlipbookComponent_PlayNewFlipbook::NewFlipbook' has a wrong offset!");
static_assert(offsetof(NicolaPaperFlipbookComponent_PlayNewFlipbook, bLoop) == 0x000008, "Member 'NicolaPaperFlipbookComponent_PlayNewFlipbook::bLoop' has a wrong offset!");
static_assert(offsetof(NicolaPaperFlipbookComponent_PlayNewFlipbook, bReverse) == 0x000009, "Member 'NicolaPaperFlipbookComponent_PlayNewFlipbook::bReverse' has a wrong offset!");
static_assert(offsetof(NicolaPaperFlipbookComponent_PlayNewFlipbook, mReservedStartFrame) == 0x00000C, "Member 'NicolaPaperFlipbookComponent_PlayNewFlipbook::mReservedStartFrame' has a wrong offset!");
static_assert(offsetof(NicolaPaperFlipbookComponent_PlayNewFlipbook, mReservedPlayRate) == 0x000010, "Member 'NicolaPaperFlipbookComponent_PlayNewFlipbook::mReservedPlayRate' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugGetDlcFlags
// 0x0008 (0x0008 - 0x0000)
struct NicolaPlatformDebugFL_DebugGetDlcFlags final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugGetDlcFlags) == 0x000004, "Wrong alignment on NicolaPlatformDebugFL_DebugGetDlcFlags");
static_assert(sizeof(NicolaPlatformDebugFL_DebugGetDlcFlags) == 0x000008, "Wrong size on NicolaPlatformDebugFL_DebugGetDlcFlags");
static_assert(offsetof(NicolaPlatformDebugFL_DebugGetDlcFlags, ID) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugGetDlcFlags::ID' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugGetDlcFlags, ReturnValue) == 0x000004, "Member 'NicolaPlatformDebugFL_DebugGetDlcFlags::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetDisplayTestConsoleCommand
// 0x0020 (0x0020 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InCmd;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InQuality;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand) == 0x000020, "Wrong size on NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand, InCmd) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand::InCmd' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand, InQuality) == 0x000018, "Member 'NicolaPlatformDebugFL_DebugSetDisplayTestConsoleCommand::InQuality' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetDlcFlags
// 0x0008 (0x0008 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetDlcFlags final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetDlcFlags) == 0x000004, "Wrong alignment on NicolaPlatformDebugFL_DebugSetDlcFlags");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetDlcFlags) == 0x000008, "Wrong size on NicolaPlatformDebugFL_DebugSetDlcFlags");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetDlcFlags, ID) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetDlcFlags::ID' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetDlcFlags, InFlag) == 0x000004, "Member 'NicolaPlatformDebugFL_DebugSetDlcFlags::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetMaxFps
// 0x0010 (0x0010 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetMaxFps final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FPS;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetMaxFps) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetMaxFps");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetMaxFps) == 0x000010, "Wrong size on NicolaPlatformDebugFL_DebugSetMaxFps");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetMaxFps, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetMaxFps::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetMaxFps, FPS) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetMaxFps::FPS' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetMouseCursorVisibility
// 0x0010 (0x0010 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetMouseCursorVisibility final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetMouseCursorVisibility) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetMouseCursorVisibility");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetMouseCursorVisibility) == 0x000010, "Wrong size on NicolaPlatformDebugFL_DebugSetMouseCursorVisibility");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetMouseCursorVisibility, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetMouseCursorVisibility::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetMouseCursorVisibility, InFlag) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetMouseCursorVisibility::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetMouseLockMode
// 0x0010 (0x0010 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetMouseLockMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetMouseLockMode) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetMouseLockMode");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetMouseLockMode) == 0x000010, "Wrong size on NicolaPlatformDebugFL_DebugSetMouseLockMode");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetMouseLockMode, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetMouseLockMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetMouseLockMode, InFlag) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetMouseLockMode::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetShowMouseCursorAlways
// 0x0010 (0x0010 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways) == 0x000010, "Wrong size on NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways, InFlag) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetShowMouseCursorAlways::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetUnfocusPadEnable
// 0x0010 (0x0010 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetUnfocusPadEnable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetUnfocusPadEnable) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetUnfocusPadEnable");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetUnfocusPadEnable) == 0x000010, "Wrong size on NicolaPlatformDebugFL_DebugSetUnfocusPadEnable");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetUnfocusPadEnable, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetUnfocusPadEnable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetUnfocusPadEnable, InFlag) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetUnfocusPadEnable::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetUnfocusSoundEnable
// 0x0001 (0x0001 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable final
{
public:
	bool                                          InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable) == 0x000001, "Wrong alignment on NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable) == 0x000001, "Wrong size on NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable, InFlag) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetUnfocusSoundEnable::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetVSync
// 0x0010 (0x0010 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetVSync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetVSync) == 0x000008, "Wrong alignment on NicolaPlatformDebugFL_DebugSetVSync");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetVSync) == 0x000010, "Wrong size on NicolaPlatformDebugFL_DebugSetVSync");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetVSync, WorldContextObject) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetVSync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetVSync, InFlag) == 0x000008, "Member 'NicolaPlatformDebugFL_DebugSetVSync::InFlag' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetWindowMode
// 0x0001 (0x0001 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetWindowMode final
{
public:
	EWindowMode                                   InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetWindowMode) == 0x000001, "Wrong alignment on NicolaPlatformDebugFL_DebugSetWindowMode");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetWindowMode) == 0x000001, "Wrong size on NicolaPlatformDebugFL_DebugSetWindowMode");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetWindowMode, InMode) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetWindowMode::InMode' has a wrong offset!");

// Function Nicola.NicolaPlatformDebugFL.DebugSetWindowResolution
// 0x0008 (0x0008 - 0x0000)
struct NicolaPlatformDebugFL_DebugSetWindowResolution final
{
public:
	struct FIntPoint                              InResolution;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlatformDebugFL_DebugSetWindowResolution) == 0x000004, "Wrong alignment on NicolaPlatformDebugFL_DebugSetWindowResolution");
static_assert(sizeof(NicolaPlatformDebugFL_DebugSetWindowResolution) == 0x000008, "Wrong size on NicolaPlatformDebugFL_DebugSetWindowResolution");
static_assert(offsetof(NicolaPlatformDebugFL_DebugSetWindowResolution, InResolution) == 0x000000, "Member 'NicolaPlatformDebugFL_DebugSetWindowResolution::InResolution' has a wrong offset!");

// Function Nicola.NicolaMiscFL.ExecConsoleCommand
// 0x0030 (0x0030 - 0x0000)
struct NicolaMiscFL_ExecConsoleCommand final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_ExecConsoleCommand) == 0x000008, "Wrong alignment on NicolaMiscFL_ExecConsoleCommand");
static_assert(sizeof(NicolaMiscFL_ExecConsoleCommand) == 0x000030, "Wrong size on NicolaMiscFL_ExecConsoleCommand");
static_assert(offsetof(NicolaMiscFL_ExecConsoleCommand, WorldContextObject) == 0x000000, "Member 'NicolaMiscFL_ExecConsoleCommand::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_ExecConsoleCommand, Command) == 0x000008, "Member 'NicolaMiscFL_ExecConsoleCommand::Command' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_ExecConsoleCommand, PlayerId) == 0x000018, "Member 'NicolaMiscFL_ExecConsoleCommand::PlayerId' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_ExecConsoleCommand, ReturnValue) == 0x000020, "Member 'NicolaMiscFL_ExecConsoleCommand::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.GetActorLevel
// 0x0010 (0x0010 - 0x0000)
struct NicolaMiscFL_GetActorLevel final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_GetActorLevel) == 0x000008, "Wrong alignment on NicolaMiscFL_GetActorLevel");
static_assert(sizeof(NicolaMiscFL_GetActorLevel) == 0x000010, "Wrong size on NicolaMiscFL_GetActorLevel");
static_assert(offsetof(NicolaMiscFL_GetActorLevel, TARGET) == 0x000000, "Member 'NicolaMiscFL_GetActorLevel::TARGET' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_GetActorLevel, ReturnValue) == 0x000008, "Member 'NicolaMiscFL_GetActorLevel::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.GetMeshNumTriangles
// 0x0010 (0x0010 - 0x0000)
struct NicolaMiscFL_GetMeshNumTriangles final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lod;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_GetMeshNumTriangles) == 0x000008, "Wrong alignment on NicolaMiscFL_GetMeshNumTriangles");
static_assert(sizeof(NicolaMiscFL_GetMeshNumTriangles) == 0x000010, "Wrong size on NicolaMiscFL_GetMeshNumTriangles");
static_assert(offsetof(NicolaMiscFL_GetMeshNumTriangles, Mesh) == 0x000000, "Member 'NicolaMiscFL_GetMeshNumTriangles::Mesh' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_GetMeshNumTriangles, lod) == 0x000008, "Member 'NicolaMiscFL_GetMeshNumTriangles::lod' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_GetMeshNumTriangles, ReturnValue) == 0x00000C, "Member 'NicolaMiscFL_GetMeshNumTriangles::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.HasActorBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct NicolaMiscFL_HasActorBegunPlay final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaMiscFL_HasActorBegunPlay) == 0x000008, "Wrong alignment on NicolaMiscFL_HasActorBegunPlay");
static_assert(sizeof(NicolaMiscFL_HasActorBegunPlay) == 0x000010, "Wrong size on NicolaMiscFL_HasActorBegunPlay");
static_assert(offsetof(NicolaMiscFL_HasActorBegunPlay, TARGET) == 0x000000, "Member 'NicolaMiscFL_HasActorBegunPlay::TARGET' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_HasActorBegunPlay, ReturnValue) == 0x000008, "Member 'NicolaMiscFL_HasActorBegunPlay::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.IsEditing
// 0x0010 (0x0010 - 0x0000)
struct NicolaMiscFL_IsEditing final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaMiscFL_IsEditing) == 0x000008, "Wrong alignment on NicolaMiscFL_IsEditing");
static_assert(sizeof(NicolaMiscFL_IsEditing) == 0x000010, "Wrong size on NicolaMiscFL_IsEditing");
static_assert(offsetof(NicolaMiscFL_IsEditing, InWorldContextObject) == 0x000000, "Member 'NicolaMiscFL_IsEditing::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_IsEditing, ReturnValue) == 0x000008, "Member 'NicolaMiscFL_IsEditing::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.IsVisibleLevel
// 0x0010 (0x0010 - 0x0000)
struct NicolaMiscFL_IsVisibleLevel final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaMiscFL_IsVisibleLevel) == 0x000008, "Wrong alignment on NicolaMiscFL_IsVisibleLevel");
static_assert(sizeof(NicolaMiscFL_IsVisibleLevel) == 0x000010, "Wrong size on NicolaMiscFL_IsVisibleLevel");
static_assert(offsetof(NicolaMiscFL_IsVisibleLevel, Level) == 0x000000, "Member 'NicolaMiscFL_IsVisibleLevel::Level' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_IsVisibleLevel, ReturnValue) == 0x000008, "Member 'NicolaMiscFL_IsVisibleLevel::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.IsWithEditor
// 0x0001 (0x0001 - 0x0000)
struct NicolaMiscFL_IsWithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_IsWithEditor) == 0x000001, "Wrong alignment on NicolaMiscFL_IsWithEditor");
static_assert(sizeof(NicolaMiscFL_IsWithEditor) == 0x000001, "Wrong size on NicolaMiscFL_IsWithEditor");
static_assert(offsetof(NicolaMiscFL_IsWithEditor, ReturnValue) == 0x000000, "Member 'NicolaMiscFL_IsWithEditor::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.SetVisibleActor
// 0x0010 (0x0010 - 0x0000)
struct NicolaMiscFL_SetVisibleActor final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaMiscFL_SetVisibleActor) == 0x000008, "Wrong alignment on NicolaMiscFL_SetVisibleActor");
static_assert(sizeof(NicolaMiscFL_SetVisibleActor) == 0x000010, "Wrong size on NicolaMiscFL_SetVisibleActor");
static_assert(offsetof(NicolaMiscFL_SetVisibleActor, TARGET) == 0x000000, "Member 'NicolaMiscFL_SetVisibleActor::TARGET' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_SetVisibleActor, IsVisible) == 0x000008, "Member 'NicolaMiscFL_SetVisibleActor::IsVisible' has a wrong offset!");

// Function Nicola.NicolaMiscFL.SortStringArray
// 0x0020 (0x0020 - 0x0000)
struct NicolaMiscFL_SortStringArray final
{
public:
	TArray<class FString>                         Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_SortStringArray) == 0x000008, "Wrong alignment on NicolaMiscFL_SortStringArray");
static_assert(sizeof(NicolaMiscFL_SortStringArray) == 0x000020, "Wrong size on NicolaMiscFL_SortStringArray");
static_assert(offsetof(NicolaMiscFL_SortStringArray, Values) == 0x000000, "Member 'NicolaMiscFL_SortStringArray::Values' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_SortStringArray, ReturnValue) == 0x000010, "Member 'NicolaMiscFL_SortStringArray::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.SplitPath
// 0x0040 (0x0040 - 0x0000)
struct NicolaMiscFL_SplitPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DirPart;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilenamePart;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtensionPart;                                     // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_SplitPath) == 0x000008, "Wrong alignment on NicolaMiscFL_SplitPath");
static_assert(sizeof(NicolaMiscFL_SplitPath) == 0x000040, "Wrong size on NicolaMiscFL_SplitPath");
static_assert(offsetof(NicolaMiscFL_SplitPath, Path) == 0x000000, "Member 'NicolaMiscFL_SplitPath::Path' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_SplitPath, DirPart) == 0x000010, "Member 'NicolaMiscFL_SplitPath::DirPart' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_SplitPath, FilenamePart) == 0x000020, "Member 'NicolaMiscFL_SplitPath::FilenamePart' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_SplitPath, ExtensionPart) == 0x000030, "Member 'NicolaMiscFL_SplitPath::ExtensionPart' has a wrong offset!");

// Function Nicola.NicolaMiscFL.StringArrayToTextArray
// 0x0020 (0x0020 - 0x0000)
struct NicolaMiscFL_StringArrayToTextArray final
{
public:
	TArray<class FString>                         Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_StringArrayToTextArray) == 0x000008, "Wrong alignment on NicolaMiscFL_StringArrayToTextArray");
static_assert(sizeof(NicolaMiscFL_StringArrayToTextArray) == 0x000020, "Wrong size on NicolaMiscFL_StringArrayToTextArray");
static_assert(offsetof(NicolaMiscFL_StringArrayToTextArray, Values) == 0x000000, "Member 'NicolaMiscFL_StringArrayToTextArray::Values' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_StringArrayToTextArray, ReturnValue) == 0x000010, "Member 'NicolaMiscFL_StringArrayToTextArray::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.StringSetToSortedArray
// 0x0060 (0x0060 - 0x0000)
struct NicolaMiscFL_StringSetToSortedArray final
{
public:
	TSet<class FString>                           Values;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_StringSetToSortedArray) == 0x000008, "Wrong alignment on NicolaMiscFL_StringSetToSortedArray");
static_assert(sizeof(NicolaMiscFL_StringSetToSortedArray) == 0x000060, "Wrong size on NicolaMiscFL_StringSetToSortedArray");
static_assert(offsetof(NicolaMiscFL_StringSetToSortedArray, Values) == 0x000000, "Member 'NicolaMiscFL_StringSetToSortedArray::Values' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_StringSetToSortedArray, ReturnValue) == 0x000050, "Member 'NicolaMiscFL_StringSetToSortedArray::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaMiscFL.TextArrayToStringArray
// 0x0020 (0x0020 - 0x0000)
struct NicolaMiscFL_TextArrayToStringArray final
{
public:
	TArray<class FText>                           Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaMiscFL_TextArrayToStringArray) == 0x000008, "Wrong alignment on NicolaMiscFL_TextArrayToStringArray");
static_assert(sizeof(NicolaMiscFL_TextArrayToStringArray) == 0x000020, "Wrong size on NicolaMiscFL_TextArrayToStringArray");
static_assert(offsetof(NicolaMiscFL_TextArrayToStringArray, Values) == 0x000000, "Member 'NicolaMiscFL_TextArrayToStringArray::Values' has a wrong offset!");
static_assert(offsetof(NicolaMiscFL_TextArrayToStringArray, ReturnValue) == 0x000010, "Member 'NicolaMiscFL_TextArrayToStringArray::ReturnValue' has a wrong offset!");

// Function Nicola.BattleBlendActor.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct BattleBlendActor_SetEnable final
{
public:
	bool                                          menable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlendActor_SetEnable) == 0x000001, "Wrong alignment on BattleBlendActor_SetEnable");
static_assert(sizeof(BattleBlendActor_SetEnable) == 0x000001, "Wrong size on BattleBlendActor_SetEnable");
static_assert(offsetof(BattleBlendActor_SetEnable, menable) == 0x000000, "Member 'BattleBlendActor_SetEnable::menable' has a wrong offset!");

// Function Nicola.BattleBlendActor.SetRate
// 0x0004 (0x0004 - 0x0000)
struct BattleBlendActor_SetRate final
{
public:
	float                                         mrate;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlendActor_SetRate) == 0x000004, "Wrong alignment on BattleBlendActor_SetRate");
static_assert(sizeof(BattleBlendActor_SetRate) == 0x000004, "Wrong size on BattleBlendActor_SetRate");
static_assert(offsetof(BattleBlendActor_SetRate, mrate) == 0x000000, "Member 'BattleBlendActor_SetRate::mrate' has a wrong offset!");

// Function Nicola.BattleCameraControl.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct BattleCameraControl_GetInstance final
{
public:
	class ABattleCameraControl*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_GetInstance) == 0x000008, "Wrong alignment on BattleCameraControl_GetInstance");
static_assert(sizeof(BattleCameraControl_GetInstance) == 0x000008, "Wrong size on BattleCameraControl_GetInstance");
static_assert(offsetof(BattleCameraControl_GetInstance, ReturnValue) == 0x000000, "Member 'BattleCameraControl_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraControl.ChangeBattleCameraByIndex
// 0x000C (0x000C - 0x0000)
struct BattleCameraControl_ChangeBattleCameraByIndex final
{
public:
	int32                                         typeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          misFree;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraControl_ChangeBattleCameraByIndex) == 0x000004, "Wrong alignment on BattleCameraControl_ChangeBattleCameraByIndex");
static_assert(sizeof(BattleCameraControl_ChangeBattleCameraByIndex) == 0x00000C, "Wrong size on BattleCameraControl_ChangeBattleCameraByIndex");
static_assert(offsetof(BattleCameraControl_ChangeBattleCameraByIndex, typeIndex) == 0x000000, "Member 'BattleCameraControl_ChangeBattleCameraByIndex::typeIndex' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_ChangeBattleCameraByIndex, BlendTime) == 0x000004, "Member 'BattleCameraControl_ChangeBattleCameraByIndex::BlendTime' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_ChangeBattleCameraByIndex, misFree) == 0x000008, "Member 'BattleCameraControl_ChangeBattleCameraByIndex::misFree' has a wrong offset!");

// Function Nicola.BattleCameraControl.ChangeScaleMode
// 0x0001 (0x0001 - 0x0000)
struct BattleCameraControl_ChangeScaleMode final
{
public:
	EBattleTestActorMode                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_ChangeScaleMode) == 0x000001, "Wrong alignment on BattleCameraControl_ChangeScaleMode");
static_assert(sizeof(BattleCameraControl_ChangeScaleMode) == 0x000001, "Wrong size on BattleCameraControl_ChangeScaleMode");
static_assert(offsetof(BattleCameraControl_ChangeScaleMode, Mode) == 0x000000, "Member 'BattleCameraControl_ChangeScaleMode::Mode' has a wrong offset!");

// Function Nicola.BattleCameraControl.DebugGetMonsterLocation
// 0x001C (0x001C - 0x0000)
struct BattleCameraControl_DebugGetMonsterLocation final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outWorldLocation;                                  // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outRelativeLocation;                               // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_DebugGetMonsterLocation) == 0x000004, "Wrong alignment on BattleCameraControl_DebugGetMonsterLocation");
static_assert(sizeof(BattleCameraControl_DebugGetMonsterLocation) == 0x00001C, "Wrong size on BattleCameraControl_DebugGetMonsterLocation");
static_assert(offsetof(BattleCameraControl_DebugGetMonsterLocation, SlotIndex) == 0x000000, "Member 'BattleCameraControl_DebugGetMonsterLocation::SlotIndex' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_DebugGetMonsterLocation, outWorldLocation) == 0x000004, "Member 'BattleCameraControl_DebugGetMonsterLocation::outWorldLocation' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_DebugGetMonsterLocation, outRelativeLocation) == 0x000010, "Member 'BattleCameraControl_DebugGetMonsterLocation::outRelativeLocation' has a wrong offset!");

// Function Nicola.BattleCameraControl.DebugGetPlayerLocation
// 0x001C (0x001C - 0x0000)
struct BattleCameraControl_DebugGetPlayerLocation final
{
public:
	int32                                         formationIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outWorldLocation;                                  // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outRelativeLocation;                               // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_DebugGetPlayerLocation) == 0x000004, "Wrong alignment on BattleCameraControl_DebugGetPlayerLocation");
static_assert(sizeof(BattleCameraControl_DebugGetPlayerLocation) == 0x00001C, "Wrong size on BattleCameraControl_DebugGetPlayerLocation");
static_assert(offsetof(BattleCameraControl_DebugGetPlayerLocation, formationIndex) == 0x000000, "Member 'BattleCameraControl_DebugGetPlayerLocation::formationIndex' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_DebugGetPlayerLocation, outWorldLocation) == 0x000004, "Member 'BattleCameraControl_DebugGetPlayerLocation::outWorldLocation' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_DebugGetPlayerLocation, outRelativeLocation) == 0x000010, "Member 'BattleCameraControl_DebugGetPlayerLocation::outRelativeLocation' has a wrong offset!");

// Function Nicola.BattleCameraControl.GetCameraActor
// 0x0010 (0x0010 - 0x0000)
struct BattleCameraControl_GetCameraActor final
{
public:
	EBattleCameraSettingType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_GetCameraActor) == 0x000008, "Wrong alignment on BattleCameraControl_GetCameraActor");
static_assert(sizeof(BattleCameraControl_GetCameraActor) == 0x000010, "Wrong size on BattleCameraControl_GetCameraActor");
static_assert(offsetof(BattleCameraControl_GetCameraActor, Type) == 0x000000, "Member 'BattleCameraControl_GetCameraActor::Type' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_GetCameraActor, ReturnValue) == 0x000008, "Member 'BattleCameraControl_GetCameraActor::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraControl.GetEnemyBattlePositionLine
// 0x0008 (0x0008 - 0x0000)
struct BattleCameraControl_GetEnemyBattlePositionLine final
{
public:
	class ABattlePositionLine*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_GetEnemyBattlePositionLine) == 0x000008, "Wrong alignment on BattleCameraControl_GetEnemyBattlePositionLine");
static_assert(sizeof(BattleCameraControl_GetEnemyBattlePositionLine) == 0x000008, "Wrong size on BattleCameraControl_GetEnemyBattlePositionLine");
static_assert(offsetof(BattleCameraControl_GetEnemyBattlePositionLine, ReturnValue) == 0x000000, "Member 'BattleCameraControl_GetEnemyBattlePositionLine::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraControl.LoadSetting
// 0x0018 (0x0018 - 0x0000)
struct BattleCameraControl_LoadSetting final
{
public:
	class FString                                 settingFile;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleCameraSettingType                      Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraControl_LoadSetting) == 0x000008, "Wrong alignment on BattleCameraControl_LoadSetting");
static_assert(sizeof(BattleCameraControl_LoadSetting) == 0x000018, "Wrong size on BattleCameraControl_LoadSetting");
static_assert(offsetof(BattleCameraControl_LoadSetting, settingFile) == 0x000000, "Member 'BattleCameraControl_LoadSetting::settingFile' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_LoadSetting, Type) == 0x000010, "Member 'BattleCameraControl_LoadSetting::Type' has a wrong offset!");

// Function Nicola.BattleCameraControl.OnChangeFreeCamera
// 0x0001 (0x0001 - 0x0000)
struct BattleCameraControl_OnChangeFreeCamera final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_OnChangeFreeCamera) == 0x000001, "Wrong alignment on BattleCameraControl_OnChangeFreeCamera");
static_assert(sizeof(BattleCameraControl_OnChangeFreeCamera) == 0x000001, "Wrong size on BattleCameraControl_OnChangeFreeCamera");
static_assert(offsetof(BattleCameraControl_OnChangeFreeCamera, Enable) == 0x000000, "Member 'BattleCameraControl_OnChangeFreeCamera::Enable' has a wrong offset!");

// Function Nicola.BattleCameraControl.OnInput
// 0x0008 (0x0008 - 0x0000)
struct BattleCameraControl_OnInput final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_OnInput) == 0x000004, "Wrong alignment on BattleCameraControl_OnInput");
static_assert(sizeof(BattleCameraControl_OnInput) == 0x000008, "Wrong size on BattleCameraControl_OnInput");
static_assert(offsetof(BattleCameraControl_OnInput, Message) == 0x000000, "Member 'BattleCameraControl_OnInput::Message' has a wrong offset!");

// Function Nicola.BattleCameraControl.PlaySequenceBackToFront
// 0x0003 (0x0003 - 0x0000)
struct BattleCameraControl_PlaySequenceBackToFront final
{
public:
	bool                                          GoToEndAndStop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDragon;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          doCrossFade;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_PlaySequenceBackToFront) == 0x000001, "Wrong alignment on BattleCameraControl_PlaySequenceBackToFront");
static_assert(sizeof(BattleCameraControl_PlaySequenceBackToFront) == 0x000003, "Wrong size on BattleCameraControl_PlaySequenceBackToFront");
static_assert(offsetof(BattleCameraControl_PlaySequenceBackToFront, GoToEndAndStop) == 0x000000, "Member 'BattleCameraControl_PlaySequenceBackToFront::GoToEndAndStop' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_PlaySequenceBackToFront, isDragon) == 0x000001, "Member 'BattleCameraControl_PlaySequenceBackToFront::isDragon' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_PlaySequenceBackToFront, doCrossFade) == 0x000002, "Member 'BattleCameraControl_PlaySequenceBackToFront::doCrossFade' has a wrong offset!");

// Function Nicola.BattleCameraControl.PlaySequenceFrontToBack
// 0x0003 (0x0003 - 0x0000)
struct BattleCameraControl_PlaySequenceFrontToBack final
{
public:
	bool                                          GoToEndAndStop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDragon;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          doCrossFade;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_PlaySequenceFrontToBack) == 0x000001, "Wrong alignment on BattleCameraControl_PlaySequenceFrontToBack");
static_assert(sizeof(BattleCameraControl_PlaySequenceFrontToBack) == 0x000003, "Wrong size on BattleCameraControl_PlaySequenceFrontToBack");
static_assert(offsetof(BattleCameraControl_PlaySequenceFrontToBack, GoToEndAndStop) == 0x000000, "Member 'BattleCameraControl_PlaySequenceFrontToBack::GoToEndAndStop' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_PlaySequenceFrontToBack, isDragon) == 0x000001, "Member 'BattleCameraControl_PlaySequenceFrontToBack::isDragon' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_PlaySequenceFrontToBack, doCrossFade) == 0x000002, "Member 'BattleCameraControl_PlaySequenceFrontToBack::doCrossFade' has a wrong offset!");

// Function Nicola.BattleCameraControl.SaveSetting
// 0x0018 (0x0018 - 0x0000)
struct BattleCameraControl_SaveSetting final
{
public:
	class FString                                 settingFile;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleCameraSettingType                      Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraControl_SaveSetting) == 0x000008, "Wrong alignment on BattleCameraControl_SaveSetting");
static_assert(sizeof(BattleCameraControl_SaveSetting) == 0x000018, "Wrong size on BattleCameraControl_SaveSetting");
static_assert(offsetof(BattleCameraControl_SaveSetting, settingFile) == 0x000000, "Member 'BattleCameraControl_SaveSetting::settingFile' has a wrong offset!");
static_assert(offsetof(BattleCameraControl_SaveSetting, Type) == 0x000010, "Member 'BattleCameraControl_SaveSetting::Type' has a wrong offset!");

// Function Nicola.BattleCameraControl.UpdateDistanceRate
// 0x0001 (0x0001 - 0x0000)
struct BattleCameraControl_UpdateDistanceRate final
{
public:
	bool                                          isForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_UpdateDistanceRate) == 0x000001, "Wrong alignment on BattleCameraControl_UpdateDistanceRate");
static_assert(sizeof(BattleCameraControl_UpdateDistanceRate) == 0x000001, "Wrong size on BattleCameraControl_UpdateDistanceRate");
static_assert(offsetof(BattleCameraControl_UpdateDistanceRate, isForce) == 0x000000, "Member 'BattleCameraControl_UpdateDistanceRate::isForce' has a wrong offset!");

// Function Nicola.BattleCameraControl.IsOpenDebugMenu
// 0x0001 (0x0001 - 0x0000)
struct BattleCameraControl_IsOpenDebugMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraControl_IsOpenDebugMenu) == 0x000001, "Wrong alignment on BattleCameraControl_IsOpenDebugMenu");
static_assert(sizeof(BattleCameraControl_IsOpenDebugMenu) == 0x000001, "Wrong size on BattleCameraControl_IsOpenDebugMenu");
static_assert(offsetof(BattleCameraControl_IsOpenDebugMenu, ReturnValue) == 0x000000, "Member 'BattleCameraControl_IsOpenDebugMenu::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraSequenceControl.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct BattleCameraSequenceControl_GetInstance final
{
public:
	class ABattleCameraSequenceControl*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraSequenceControl_GetInstance) == 0x000008, "Wrong alignment on BattleCameraSequenceControl_GetInstance");
static_assert(sizeof(BattleCameraSequenceControl_GetInstance) == 0x000008, "Wrong size on BattleCameraSequenceControl_GetInstance");
static_assert(offsetof(BattleCameraSequenceControl_GetInstance, ReturnValue) == 0x000000, "Member 'BattleCameraSequenceControl_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraSequenceControl.PlaySequence
// 0x0030 (0x0030 - 0x0000)
struct BattleCameraSequenceControl_PlaySequence final
{
public:
	TSoftObjectPtr<class ULevelSequence>          sequenceSoftObjectPtr;                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GoToEndAndStop;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSequenceControl_PlaySequence) == 0x000008, "Wrong alignment on BattleCameraSequenceControl_PlaySequence");
static_assert(sizeof(BattleCameraSequenceControl_PlaySequence) == 0x000030, "Wrong size on BattleCameraSequenceControl_PlaySequence");
static_assert(offsetof(BattleCameraSequenceControl_PlaySequence, sequenceSoftObjectPtr) == 0x000000, "Member 'BattleCameraSequenceControl_PlaySequence::sequenceSoftObjectPtr' has a wrong offset!");
static_assert(offsetof(BattleCameraSequenceControl_PlaySequence, GoToEndAndStop) == 0x000028, "Member 'BattleCameraSequenceControl_PlaySequence::GoToEndAndStop' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.CameraSettingToMap
// 0x0050 (0x0050 - 0x0000)
struct BattleCameraSettingFL_CameraSettingToMap final
{
public:
	TMap<class FName, struct FBattleCameraSetting> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraSettingFL_CameraSettingToMap) == 0x000008, "Wrong alignment on BattleCameraSettingFL_CameraSettingToMap");
static_assert(sizeof(BattleCameraSettingFL_CameraSettingToMap) == 0x000050, "Wrong size on BattleCameraSettingFL_CameraSettingToMap");
static_assert(offsetof(BattleCameraSettingFL_CameraSettingToMap, ReturnValue) == 0x000000, "Member 'BattleCameraSettingFL_CameraSettingToMap::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.GetCameraSettingDirPath
// 0x0010 (0x0010 - 0x0000)
struct BattleCameraSettingFL_GetCameraSettingDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraSettingFL_GetCameraSettingDirPath) == 0x000008, "Wrong alignment on BattleCameraSettingFL_GetCameraSettingDirPath");
static_assert(sizeof(BattleCameraSettingFL_GetCameraSettingDirPath) == 0x000010, "Wrong size on BattleCameraSettingFL_GetCameraSettingDirPath");
static_assert(offsetof(BattleCameraSettingFL_GetCameraSettingDirPath, ReturnValue) == 0x000000, "Member 'BattleCameraSettingFL_GetCameraSettingDirPath::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.GetDistanceRate
// 0x0028 (0x0028 - 0x0000)
struct BattleCameraSettingFL_GetDistanceRate final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Now;                                               // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCameraSettingFL_GetDistanceRate) == 0x000004, "Wrong alignment on BattleCameraSettingFL_GetDistanceRate");
static_assert(sizeof(BattleCameraSettingFL_GetDistanceRate) == 0x000028, "Wrong size on BattleCameraSettingFL_GetDistanceRate");
static_assert(offsetof(BattleCameraSettingFL_GetDistanceRate, Start) == 0x000000, "Member 'BattleCameraSettingFL_GetDistanceRate::Start' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_GetDistanceRate, End) == 0x00000C, "Member 'BattleCameraSettingFL_GetDistanceRate::End' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_GetDistanceRate, Now) == 0x000018, "Member 'BattleCameraSettingFL_GetDistanceRate::Now' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_GetDistanceRate, ReturnValue) == 0x000024, "Member 'BattleCameraSettingFL_GetDistanceRate::ReturnValue' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.LoadCameraSetting
// 0x0028 (0x0028 - 0x0000)
struct BattleCameraSettingFL_LoadCameraSetting final
{
public:
	EBattleCameraSettingType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattleCameraSetting                   OutCameraSetting;                                  // 0x0004(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_LoadCameraSetting) == 0x000004, "Wrong alignment on BattleCameraSettingFL_LoadCameraSetting");
static_assert(sizeof(BattleCameraSettingFL_LoadCameraSetting) == 0x000028, "Wrong size on BattleCameraSettingFL_LoadCameraSetting");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSetting, Type) == 0x000000, "Member 'BattleCameraSettingFL_LoadCameraSetting::Type' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSetting, OutCameraSetting) == 0x000004, "Member 'BattleCameraSettingFL_LoadCameraSetting::OutCameraSetting' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSetting, Success) == 0x000024, "Member 'BattleCameraSettingFL_LoadCameraSetting::Success' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.LoadCameraSettingByFile
// 0x0040 (0x0040 - 0x0000)
struct BattleCameraSettingFL_LoadCameraSettingByFile final
{
public:
	EBattleCameraSettingType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SettingFilePath;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleCameraSetting                   OutCameraSetting;                                  // 0x0018(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_LoadCameraSettingByFile) == 0x000008, "Wrong alignment on BattleCameraSettingFL_LoadCameraSettingByFile");
static_assert(sizeof(BattleCameraSettingFL_LoadCameraSettingByFile) == 0x000040, "Wrong size on BattleCameraSettingFL_LoadCameraSettingByFile");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFile, Type) == 0x000000, "Member 'BattleCameraSettingFL_LoadCameraSettingByFile::Type' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFile, SettingFilePath) == 0x000008, "Member 'BattleCameraSettingFL_LoadCameraSettingByFile::SettingFilePath' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFile, OutCameraSetting) == 0x000018, "Member 'BattleCameraSettingFL_LoadCameraSettingByFile::OutCameraSetting' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFile, Success) == 0x000038, "Member 'BattleCameraSettingFL_LoadCameraSettingByFile::Success' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.LoadCameraSettingByFileOrAsset
// 0x0040 (0x0040 - 0x0000)
struct BattleCameraSettingFL_LoadCameraSettingByFileOrAsset final
{
public:
	EBattleCameraSettingType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SettingFilePath;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleCameraSetting                   OutCameraSetting;                                  // 0x0018(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_LoadCameraSettingByFileOrAsset) == 0x000008, "Wrong alignment on BattleCameraSettingFL_LoadCameraSettingByFileOrAsset");
static_assert(sizeof(BattleCameraSettingFL_LoadCameraSettingByFileOrAsset) == 0x000040, "Wrong size on BattleCameraSettingFL_LoadCameraSettingByFileOrAsset");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFileOrAsset, Type) == 0x000000, "Member 'BattleCameraSettingFL_LoadCameraSettingByFileOrAsset::Type' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFileOrAsset, SettingFilePath) == 0x000008, "Member 'BattleCameraSettingFL_LoadCameraSettingByFileOrAsset::SettingFilePath' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFileOrAsset, OutCameraSetting) == 0x000018, "Member 'BattleCameraSettingFL_LoadCameraSettingByFileOrAsset::OutCameraSetting' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_LoadCameraSettingByFileOrAsset, Success) == 0x000038, "Member 'BattleCameraSettingFL_LoadCameraSettingByFileOrAsset::Success' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.SaveCameraSetting
// 0x0024 (0x0024 - 0x0000)
struct BattleCameraSettingFL_SaveCameraSetting final
{
public:
	struct FBattleCameraSetting                   InCameraSetting;                                   // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_SaveCameraSetting) == 0x000004, "Wrong alignment on BattleCameraSettingFL_SaveCameraSetting");
static_assert(sizeof(BattleCameraSettingFL_SaveCameraSetting) == 0x000024, "Wrong size on BattleCameraSettingFL_SaveCameraSetting");
static_assert(offsetof(BattleCameraSettingFL_SaveCameraSetting, InCameraSetting) == 0x000000, "Member 'BattleCameraSettingFL_SaveCameraSetting::InCameraSetting' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_SaveCameraSetting, Success) == 0x000020, "Member 'BattleCameraSettingFL_SaveCameraSetting::Success' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.SaveCameraSettingByFile
// 0x0038 (0x0038 - 0x0000)
struct BattleCameraSettingFL_SaveCameraSettingByFile final
{
public:
	struct FBattleCameraSetting                   InCameraSetting;                                   // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SettingFilePath;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_SaveCameraSettingByFile) == 0x000008, "Wrong alignment on BattleCameraSettingFL_SaveCameraSettingByFile");
static_assert(sizeof(BattleCameraSettingFL_SaveCameraSettingByFile) == 0x000038, "Wrong size on BattleCameraSettingFL_SaveCameraSettingByFile");
static_assert(offsetof(BattleCameraSettingFL_SaveCameraSettingByFile, InCameraSetting) == 0x000000, "Member 'BattleCameraSettingFL_SaveCameraSettingByFile::InCameraSetting' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_SaveCameraSettingByFile, SettingFilePath) == 0x000020, "Member 'BattleCameraSettingFL_SaveCameraSettingByFile::SettingFilePath' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_SaveCameraSettingByFile, Success) == 0x000030, "Member 'BattleCameraSettingFL_SaveCameraSettingByFile::Success' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.TextFileLoad
// 0x0028 (0x0028 - 0x0000)
struct BattleCameraSettingFL_TextFileLoad final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileData;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_TextFileLoad) == 0x000008, "Wrong alignment on BattleCameraSettingFL_TextFileLoad");
static_assert(sizeof(BattleCameraSettingFL_TextFileLoad) == 0x000028, "Wrong size on BattleCameraSettingFL_TextFileLoad");
static_assert(offsetof(BattleCameraSettingFL_TextFileLoad, FilePath) == 0x000000, "Member 'BattleCameraSettingFL_TextFileLoad::FilePath' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_TextFileLoad, FileData) == 0x000010, "Member 'BattleCameraSettingFL_TextFileLoad::FileData' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_TextFileLoad, Success) == 0x000020, "Member 'BattleCameraSettingFL_TextFileLoad::Success' has a wrong offset!");

// Function Nicola.BattleCameraSettingFL.TextFileSave
// 0x0028 (0x0028 - 0x0000)
struct BattleCameraSettingFL_TextFileSave final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileData;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCameraSettingFL_TextFileSave) == 0x000008, "Wrong alignment on BattleCameraSettingFL_TextFileSave");
static_assert(sizeof(BattleCameraSettingFL_TextFileSave) == 0x000028, "Wrong size on BattleCameraSettingFL_TextFileSave");
static_assert(offsetof(BattleCameraSettingFL_TextFileSave, FilePath) == 0x000000, "Member 'BattleCameraSettingFL_TextFileSave::FilePath' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_TextFileSave, FileData) == 0x000010, "Member 'BattleCameraSettingFL_TextFileSave::FileData' has a wrong offset!");
static_assert(offsetof(BattleCameraSettingFL_TextFileSave, Success) == 0x000020, "Member 'BattleCameraSettingFL_TextFileSave::Success' has a wrong offset!");

// Function Nicola.BattleCharaOpacity.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct BattleCharaOpacity_SetEnable final
{
public:
	bool                                          menable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCharaOpacity_SetEnable) == 0x000001, "Wrong alignment on BattleCharaOpacity_SetEnable");
static_assert(sizeof(BattleCharaOpacity_SetEnable) == 0x000001, "Wrong size on BattleCharaOpacity_SetEnable");
static_assert(offsetof(BattleCharaOpacity_SetEnable, menable) == 0x000000, "Member 'BattleCharaOpacity_SetEnable::menable' has a wrong offset!");

// Function Nicola.BattleCharaOpacity.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct BattleCharaOpacity_SetOpacity final
{
public:
	float                                         mopacity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleCharaOpacity_SetOpacity) == 0x000004, "Wrong alignment on BattleCharaOpacity_SetOpacity");
static_assert(sizeof(BattleCharaOpacity_SetOpacity) == 0x000004, "Wrong size on BattleCharaOpacity_SetOpacity");
static_assert(offsetof(BattleCharaOpacity_SetOpacity, mopacity) == 0x000000, "Member 'BattleCharaOpacity_SetOpacity::mopacity' has a wrong offset!");

// Function Nicola.UIInitialMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIInitialMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIInitialMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIInitialMenu_IsExecMenu");
static_assert(sizeof(UIInitialMenu_IsExecMenu) == 0x000001, "Wrong size on UIInitialMenu_IsExecMenu");
static_assert(offsetof(UIInitialMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIInitialMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.BattleDebugFL.GetBattleEncountIdMonsterNameMap
// 0x0050 (0x0050 - 0x0000)
struct BattleDebugFL_GetBattleEncountIdMonsterNameMap final
{
public:
	TMap<class FString, class FName>              outMap;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDebugFL_GetBattleEncountIdMonsterNameMap) == 0x000008, "Wrong alignment on BattleDebugFL_GetBattleEncountIdMonsterNameMap");
static_assert(sizeof(BattleDebugFL_GetBattleEncountIdMonsterNameMap) == 0x000050, "Wrong size on BattleDebugFL_GetBattleEncountIdMonsterNameMap");
static_assert(offsetof(BattleDebugFL_GetBattleEncountIdMonsterNameMap, outMap) == 0x000000, "Member 'BattleDebugFL_GetBattleEncountIdMonsterNameMap::outMap' has a wrong offset!");

// Function Nicola.BattleDebugFL.GetBattleEncountIds
// 0x0010 (0x0010 - 0x0000)
struct BattleDebugFL_GetBattleEncountIds final
{
public:
	TArray<class FName>                           outArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDebugFL_GetBattleEncountIds) == 0x000008, "Wrong alignment on BattleDebugFL_GetBattleEncountIds");
static_assert(sizeof(BattleDebugFL_GetBattleEncountIds) == 0x000010, "Wrong size on BattleDebugFL_GetBattleEncountIds");
static_assert(offsetof(BattleDebugFL_GetBattleEncountIds, outArray) == 0x000000, "Member 'BattleDebugFL_GetBattleEncountIds::outArray' has a wrong offset!");

// Function Nicola.BattleDebugFL.GetBattleFieldIds
// 0x0010 (0x0010 - 0x0000)
struct BattleDebugFL_GetBattleFieldIds final
{
public:
	TArray<class FName>                           outArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDebugFL_GetBattleFieldIds) == 0x000008, "Wrong alignment on BattleDebugFL_GetBattleFieldIds");
static_assert(sizeof(BattleDebugFL_GetBattleFieldIds) == 0x000010, "Wrong size on BattleDebugFL_GetBattleFieldIds");
static_assert(offsetof(BattleDebugFL_GetBattleFieldIds, outArray) == 0x000000, "Member 'BattleDebugFL_GetBattleFieldIds::outArray' has a wrong offset!");

// Function Nicola.BattleDebugFL.GetBattleMonsterIdsFromEncountId
// 0x0028 (0x0028 - 0x0000)
struct BattleDebugFL_GetBattleMonsterIdsFromEncountId final
{
public:
	class FName                                   encountId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           outArray;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         outMonsterNames;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleDebugFL_GetBattleMonsterIdsFromEncountId) == 0x000008, "Wrong alignment on BattleDebugFL_GetBattleMonsterIdsFromEncountId");
static_assert(sizeof(BattleDebugFL_GetBattleMonsterIdsFromEncountId) == 0x000028, "Wrong size on BattleDebugFL_GetBattleMonsterIdsFromEncountId");
static_assert(offsetof(BattleDebugFL_GetBattleMonsterIdsFromEncountId, encountId) == 0x000000, "Member 'BattleDebugFL_GetBattleMonsterIdsFromEncountId::encountId' has a wrong offset!");
static_assert(offsetof(BattleDebugFL_GetBattleMonsterIdsFromEncountId, outArray) == 0x000008, "Member 'BattleDebugFL_GetBattleMonsterIdsFromEncountId::outArray' has a wrong offset!");
static_assert(offsetof(BattleDebugFL_GetBattleMonsterIdsFromEncountId, outMonsterNames) == 0x000018, "Member 'BattleDebugFL_GetBattleMonsterIdsFromEncountId::outMonsterNames' has a wrong offset!");

// Function Nicola.BattleDebugFL.StartDebugBattle
// 0x0070 (0x0070 - 0x0000)
struct BattleDebugFL_StartDebugBattle final
{
public:
	struct FBattleEncountInfo                     Info;                                              // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
	EMapTimeFrame                                 Time;                                              // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleDebugFL_StartDebugBattle) == 0x000008, "Wrong alignment on BattleDebugFL_StartDebugBattle");
static_assert(sizeof(BattleDebugFL_StartDebugBattle) == 0x000070, "Wrong size on BattleDebugFL_StartDebugBattle");
static_assert(offsetof(BattleDebugFL_StartDebugBattle, Info) == 0x000000, "Member 'BattleDebugFL_StartDebugBattle::Info' has a wrong offset!");
static_assert(offsetof(BattleDebugFL_StartDebugBattle, Time) == 0x000068, "Member 'BattleDebugFL_StartDebugBattle::Time' has a wrong offset!");

// Function Nicola.BattleEffectManager.PlayEffectAtLocation
// 0x0030 (0x0030 - 0x0000)
struct BattleEffectManager_PlayEffectAtLocation final
{
public:
	class UFXSystemAsset*                         Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleEffectManager_PlayEffectAtLocation) == 0x000008, "Wrong alignment on BattleEffectManager_PlayEffectAtLocation");
static_assert(sizeof(BattleEffectManager_PlayEffectAtLocation) == 0x000030, "Wrong size on BattleEffectManager_PlayEffectAtLocation");
static_assert(offsetof(BattleEffectManager_PlayEffectAtLocation, Particle) == 0x000000, "Member 'BattleEffectManager_PlayEffectAtLocation::Particle' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectAtLocation, Location) == 0x000008, "Member 'BattleEffectManager_PlayEffectAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectAtLocation, Rotation) == 0x000014, "Member 'BattleEffectManager_PlayEffectAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectAtLocation, Scale) == 0x000020, "Member 'BattleEffectManager_PlayEffectAtLocation::Scale' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectAtLocation, ReturnValue) == 0x000028, "Member 'BattleEffectManager_PlayEffectAtLocation::ReturnValue' has a wrong offset!");

// Function Nicola.BattleEffectManager.PlayEffectOnUnit
// 0x0030 (0x0030 - 0x0000)
struct BattleEffectManager_PlayEffectOnUnit final
{
public:
	class UFXSystemAsset*                         Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleUnitType                               unitType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANicolaCharacterBase*                   Character;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         formationIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleEffectLocationType                     LocationType;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleEffectManager_PlayEffectOnUnit) == 0x000008, "Wrong alignment on BattleEffectManager_PlayEffectOnUnit");
static_assert(sizeof(BattleEffectManager_PlayEffectOnUnit) == 0x000030, "Wrong size on BattleEffectManager_PlayEffectOnUnit");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, Particle) == 0x000000, "Member 'BattleEffectManager_PlayEffectOnUnit::Particle' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, unitType) == 0x000008, "Member 'BattleEffectManager_PlayEffectOnUnit::unitType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, Character) == 0x000010, "Member 'BattleEffectManager_PlayEffectOnUnit::Character' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, formationIndex) == 0x000018, "Member 'BattleEffectManager_PlayEffectOnUnit::formationIndex' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, LocationType) == 0x00001C, "Member 'BattleEffectManager_PlayEffectOnUnit::LocationType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, Scale) == 0x000020, "Member 'BattleEffectManager_PlayEffectOnUnit::Scale' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, bAttach) == 0x000024, "Member 'BattleEffectManager_PlayEffectOnUnit::bAttach' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayEffectOnUnit, ReturnValue) == 0x000028, "Member 'BattleEffectManager_PlayEffectOnUnit::ReturnValue' has a wrong offset!");

// Function Nicola.BattleEffectManager.PlayMovingEndLocationEffect
// 0x0040 (0x0040 - 0x0000)
struct BattleEffectManager_PlayMovingEndLocationEffect final
{
public:
	class UFXSystemAsset*                         Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                moveTargetLocation;                                // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         moveSec;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         waitSec;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleEffectManager_PlayMovingEndLocationEffect) == 0x000008, "Wrong alignment on BattleEffectManager_PlayMovingEndLocationEffect");
static_assert(sizeof(BattleEffectManager_PlayMovingEndLocationEffect) == 0x000040, "Wrong size on BattleEffectManager_PlayMovingEndLocationEffect");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, Particle) == 0x000000, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::Particle' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, StartLocation) == 0x000008, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::StartLocation' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, EndLocation) == 0x000014, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::EndLocation' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, moveTargetLocation) == 0x000020, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::moveTargetLocation' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, moveSec) == 0x00002C, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::moveSec' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, waitSec) == 0x000030, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::waitSec' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayMovingEndLocationEffect, ReturnValue) == 0x000038, "Member 'BattleEffectManager_PlayMovingEndLocationEffect::ReturnValue' has a wrong offset!");

// Function Nicola.BattleEffectManager.PlayUnitToAllEffect
// 0x0028 (0x0028 - 0x0000)
struct BattleEffectManager_PlayUnitToAllEffect final
{
public:
	class UFXSystemAsset*                         Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleUnitType                               startUnitType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ANicolaCharacterBase*             startCharacter;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startCharacterFormationIndex;                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleEffectLocationType                     startLocationType;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetIsUserSide;                                 // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleEffectManager_PlayUnitToAllEffect) == 0x000008, "Wrong alignment on BattleEffectManager_PlayUnitToAllEffect");
static_assert(sizeof(BattleEffectManager_PlayUnitToAllEffect) == 0x000028, "Wrong size on BattleEffectManager_PlayUnitToAllEffect");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, Particle) == 0x000000, "Member 'BattleEffectManager_PlayUnitToAllEffect::Particle' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, startUnitType) == 0x000008, "Member 'BattleEffectManager_PlayUnitToAllEffect::startUnitType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, startCharacter) == 0x000010, "Member 'BattleEffectManager_PlayUnitToAllEffect::startCharacter' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, startCharacterFormationIndex) == 0x000018, "Member 'BattleEffectManager_PlayUnitToAllEffect::startCharacterFormationIndex' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, startLocationType) == 0x00001C, "Member 'BattleEffectManager_PlayUnitToAllEffect::startLocationType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, bTargetIsUserSide) == 0x00001D, "Member 'BattleEffectManager_PlayUnitToAllEffect::bTargetIsUserSide' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToAllEffect, ReturnValue) == 0x000020, "Member 'BattleEffectManager_PlayUnitToAllEffect::ReturnValue' has a wrong offset!");

// Function Nicola.BattleEffectManager.PlayUnitToUnitEffect
// 0x0038 (0x0038 - 0x0000)
struct BattleEffectManager_PlayUnitToUnitEffect final
{
public:
	class UFXSystemAsset*                         Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleUnitType                               startUnitType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANicolaCharacterBase*                   startCharacter;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startCharacterFormationIndex;                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleEffectLocationType                     startLocationType;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleUnitType                               endUnitType;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ANicolaCharacterBase*                   endCharacter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endCharacterFormationIndex;                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleEffectLocationType                     endLocationType;                                   // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleEffectManager_PlayUnitToUnitEffect) == 0x000008, "Wrong alignment on BattleEffectManager_PlayUnitToUnitEffect");
static_assert(sizeof(BattleEffectManager_PlayUnitToUnitEffect) == 0x000038, "Wrong size on BattleEffectManager_PlayUnitToUnitEffect");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, Particle) == 0x000000, "Member 'BattleEffectManager_PlayUnitToUnitEffect::Particle' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, startUnitType) == 0x000008, "Member 'BattleEffectManager_PlayUnitToUnitEffect::startUnitType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, startCharacter) == 0x000010, "Member 'BattleEffectManager_PlayUnitToUnitEffect::startCharacter' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, startCharacterFormationIndex) == 0x000018, "Member 'BattleEffectManager_PlayUnitToUnitEffect::startCharacterFormationIndex' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, startLocationType) == 0x00001C, "Member 'BattleEffectManager_PlayUnitToUnitEffect::startLocationType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, endUnitType) == 0x00001D, "Member 'BattleEffectManager_PlayUnitToUnitEffect::endUnitType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, endCharacter) == 0x000020, "Member 'BattleEffectManager_PlayUnitToUnitEffect::endCharacter' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, endCharacterFormationIndex) == 0x000028, "Member 'BattleEffectManager_PlayUnitToUnitEffect::endCharacterFormationIndex' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, endLocationType) == 0x00002C, "Member 'BattleEffectManager_PlayUnitToUnitEffect::endLocationType' has a wrong offset!");
static_assert(offsetof(BattleEffectManager_PlayUnitToUnitEffect, ReturnValue) == 0x000030, "Member 'BattleEffectManager_PlayUnitToUnitEffect::ReturnValue' has a wrong offset!");

// Function Nicola.BattleEffectManager.UpdateActionCameraPlayerLocation
// 0x0004 (0x0004 - 0x0000)
struct BattleEffectManager_UpdateActionCameraPlayerLocation final
{
public:
	int32                                         partyMembaerNum;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleEffectManager_UpdateActionCameraPlayerLocation) == 0x000004, "Wrong alignment on BattleEffectManager_UpdateActionCameraPlayerLocation");
static_assert(sizeof(BattleEffectManager_UpdateActionCameraPlayerLocation) == 0x000004, "Wrong size on BattleEffectManager_UpdateActionCameraPlayerLocation");
static_assert(offsetof(BattleEffectManager_UpdateActionCameraPlayerLocation, partyMembaerNum) == 0x000000, "Member 'BattleEffectManager_UpdateActionCameraPlayerLocation::partyMembaerNum' has a wrong offset!");

// Function Nicola.BattleFL.GetPrevBattleEncountMonsterId
// 0x0008 (0x0008 - 0x0000)
struct BattleFL_GetPrevBattleEncountMonsterId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleFL_GetPrevBattleEncountMonsterId) == 0x000004, "Wrong alignment on BattleFL_GetPrevBattleEncountMonsterId");
static_assert(sizeof(BattleFL_GetPrevBattleEncountMonsterId) == 0x000008, "Wrong size on BattleFL_GetPrevBattleEncountMonsterId");
static_assert(offsetof(BattleFL_GetPrevBattleEncountMonsterId, ReturnValue) == 0x000000, "Member 'BattleFL_GetPrevBattleEncountMonsterId::ReturnValue' has a wrong offset!");

// Function Nicola.BattleFL.IsRunningBattle
// 0x0001 (0x0001 - 0x0000)
struct BattleFL_IsRunningBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleFL_IsRunningBattle) == 0x000001, "Wrong alignment on BattleFL_IsRunningBattle");
static_assert(sizeof(BattleFL_IsRunningBattle) == 0x000001, "Wrong size on BattleFL_IsRunningBattle");
static_assert(offsetof(BattleFL_IsRunningBattle, ReturnValue) == 0x000000, "Member 'BattleFL_IsRunningBattle::ReturnValue' has a wrong offset!");

// Function Nicola.BattleFL.StartBattle
// 0x0068 (0x0068 - 0x0000)
struct BattleFL_StartBattle final
{
public:
	struct FBattleEncountInfo                     encountInfo;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleFL_StartBattle) == 0x000008, "Wrong alignment on BattleFL_StartBattle");
static_assert(sizeof(BattleFL_StartBattle) == 0x000068, "Wrong size on BattleFL_StartBattle");
static_assert(offsetof(BattleFL_StartBattle, encountInfo) == 0x000000, "Member 'BattleFL_StartBattle::encountInfo' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetAperture
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_SetAperture final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetAperture) == 0x000004, "Wrong alignment on NicolaCameraActor_SetAperture");
static_assert(sizeof(NicolaCameraActor_SetAperture) == 0x000008, "Wrong size on NicolaCameraActor_SetAperture");
static_assert(offsetof(NicolaCameraActor_SetAperture, Value) == 0x000000, "Member 'NicolaCameraActor_SetAperture::Value' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_SetAperture, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_SetAperture::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetCameraRotation
// 0x000C (0x000C - 0x0000)
struct NicolaCameraActor_SetCameraRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetCameraRotation) == 0x000004, "Wrong alignment on NicolaCameraActor_SetCameraRotation");
static_assert(sizeof(NicolaCameraActor_SetCameraRotation) == 0x00000C, "Wrong size on NicolaCameraActor_SetCameraRotation");
static_assert(offsetof(NicolaCameraActor_SetCameraRotation, Rotation) == 0x000000, "Member 'NicolaCameraActor_SetCameraRotation::Rotation' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetCameraTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_SetCameraTargetDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetCameraTargetDistance) == 0x000004, "Wrong alignment on NicolaCameraActor_SetCameraTargetDistance");
static_assert(sizeof(NicolaCameraActor_SetCameraTargetDistance) == 0x000004, "Wrong size on NicolaCameraActor_SetCameraTargetDistance");
static_assert(offsetof(NicolaCameraActor_SetCameraTargetDistance, Distance) == 0x000000, "Member 'NicolaCameraActor_SetCameraTargetDistance::Distance' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetCameraTargetOffset
// 0x000C (0x000C - 0x0000)
struct NicolaCameraActor_SetCameraTargetOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetCameraTargetOffset) == 0x000004, "Wrong alignment on NicolaCameraActor_SetCameraTargetOffset");
static_assert(sizeof(NicolaCameraActor_SetCameraTargetOffset) == 0x00000C, "Wrong size on NicolaCameraActor_SetCameraTargetOffset");
static_assert(offsetof(NicolaCameraActor_SetCameraTargetOffset, Offset) == 0x000000, "Member 'NicolaCameraActor_SetCameraTargetOffset::Offset' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetDepthBlurAmount
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_SetDepthBlurAmount final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetDepthBlurAmount) == 0x000004, "Wrong alignment on NicolaCameraActor_SetDepthBlurAmount");
static_assert(sizeof(NicolaCameraActor_SetDepthBlurAmount) == 0x000008, "Wrong size on NicolaCameraActor_SetDepthBlurAmount");
static_assert(offsetof(NicolaCameraActor_SetDepthBlurAmount, Value) == 0x000000, "Member 'NicolaCameraActor_SetDepthBlurAmount::Value' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_SetDepthBlurAmount, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_SetDepthBlurAmount::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetDepthBlurRadius
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_SetDepthBlurRadius final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetDepthBlurRadius) == 0x000004, "Wrong alignment on NicolaCameraActor_SetDepthBlurRadius");
static_assert(sizeof(NicolaCameraActor_SetDepthBlurRadius) == 0x000008, "Wrong size on NicolaCameraActor_SetDepthBlurRadius");
static_assert(offsetof(NicolaCameraActor_SetDepthBlurRadius, Value) == 0x000000, "Member 'NicolaCameraActor_SetDepthBlurRadius::Value' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_SetDepthBlurRadius, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_SetDepthBlurRadius::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_SetFieldOfView final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetFieldOfView) == 0x000004, "Wrong alignment on NicolaCameraActor_SetFieldOfView");
static_assert(sizeof(NicolaCameraActor_SetFieldOfView) == 0x000008, "Wrong size on NicolaCameraActor_SetFieldOfView");
static_assert(offsetof(NicolaCameraActor_SetFieldOfView, FOV) == 0x000000, "Member 'NicolaCameraActor_SetFieldOfView::FOV' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_SetFieldOfView, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_SetFieldOfView::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.SetNearDOFPower
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_SetNearDOFPower final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_SetNearDOFPower) == 0x000004, "Wrong alignment on NicolaCameraActor_SetNearDOFPower");
static_assert(sizeof(NicolaCameraActor_SetNearDOFPower) == 0x000008, "Wrong size on NicolaCameraActor_SetNearDOFPower");
static_assert(offsetof(NicolaCameraActor_SetNearDOFPower, Value) == 0x000000, "Member 'NicolaCameraActor_SetNearDOFPower::Value' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_SetNearDOFPower, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_SetNearDOFPower::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.CalcFieldOfViewFromFocalLength
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_CalcFieldOfViewFromFocalLength final
{
public:
	float                                         FocalLength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_CalcFieldOfViewFromFocalLength) == 0x000004, "Wrong alignment on NicolaCameraActor_CalcFieldOfViewFromFocalLength");
static_assert(sizeof(NicolaCameraActor_CalcFieldOfViewFromFocalLength) == 0x000008, "Wrong size on NicolaCameraActor_CalcFieldOfViewFromFocalLength");
static_assert(offsetof(NicolaCameraActor_CalcFieldOfViewFromFocalLength, FocalLength) == 0x000000, "Member 'NicolaCameraActor_CalcFieldOfViewFromFocalLength::FocalLength' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_CalcFieldOfViewFromFocalLength, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_CalcFieldOfViewFromFocalLength::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.CalcFocalLengthFromFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraActor_CalcFocalLengthFromFieldOfView final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_CalcFocalLengthFromFieldOfView) == 0x000004, "Wrong alignment on NicolaCameraActor_CalcFocalLengthFromFieldOfView");
static_assert(sizeof(NicolaCameraActor_CalcFocalLengthFromFieldOfView) == 0x000008, "Wrong size on NicolaCameraActor_CalcFocalLengthFromFieldOfView");
static_assert(offsetof(NicolaCameraActor_CalcFocalLengthFromFieldOfView, FOV) == 0x000000, "Member 'NicolaCameraActor_CalcFocalLengthFromFieldOfView::FOV' has a wrong offset!");
static_assert(offsetof(NicolaCameraActor_CalcFocalLengthFromFieldOfView, ReturnValue) == 0x000004, "Member 'NicolaCameraActor_CalcFocalLengthFromFieldOfView::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetAperture
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_GetAperture final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetAperture) == 0x000004, "Wrong alignment on NicolaCameraActor_GetAperture");
static_assert(sizeof(NicolaCameraActor_GetAperture) == 0x000004, "Wrong size on NicolaCameraActor_GetAperture");
static_assert(offsetof(NicolaCameraActor_GetAperture, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetAperture::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetCameraRotation
// 0x000C (0x000C - 0x0000)
struct NicolaCameraActor_GetCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetCameraRotation) == 0x000004, "Wrong alignment on NicolaCameraActor_GetCameraRotation");
static_assert(sizeof(NicolaCameraActor_GetCameraRotation) == 0x00000C, "Wrong size on NicolaCameraActor_GetCameraRotation");
static_assert(offsetof(NicolaCameraActor_GetCameraRotation, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetCameraRotation::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetCameraTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_GetCameraTargetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetCameraTargetDistance) == 0x000004, "Wrong alignment on NicolaCameraActor_GetCameraTargetDistance");
static_assert(sizeof(NicolaCameraActor_GetCameraTargetDistance) == 0x000004, "Wrong size on NicolaCameraActor_GetCameraTargetDistance");
static_assert(offsetof(NicolaCameraActor_GetCameraTargetDistance, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetCameraTargetDistance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetCameraTargetLocation
// 0x000C (0x000C - 0x0000)
struct NicolaCameraActor_GetCameraTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetCameraTargetLocation) == 0x000004, "Wrong alignment on NicolaCameraActor_GetCameraTargetLocation");
static_assert(sizeof(NicolaCameraActor_GetCameraTargetLocation) == 0x00000C, "Wrong size on NicolaCameraActor_GetCameraTargetLocation");
static_assert(offsetof(NicolaCameraActor_GetCameraTargetLocation, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetCameraTargetLocation::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetCameraTargetOffset
// 0x000C (0x000C - 0x0000)
struct NicolaCameraActor_GetCameraTargetOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetCameraTargetOffset) == 0x000004, "Wrong alignment on NicolaCameraActor_GetCameraTargetOffset");
static_assert(sizeof(NicolaCameraActor_GetCameraTargetOffset) == 0x00000C, "Wrong size on NicolaCameraActor_GetCameraTargetOffset");
static_assert(offsetof(NicolaCameraActor_GetCameraTargetOffset, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetCameraTargetOffset::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetDepthBlurAmount
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_GetDepthBlurAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetDepthBlurAmount) == 0x000004, "Wrong alignment on NicolaCameraActor_GetDepthBlurAmount");
static_assert(sizeof(NicolaCameraActor_GetDepthBlurAmount) == 0x000004, "Wrong size on NicolaCameraActor_GetDepthBlurAmount");
static_assert(offsetof(NicolaCameraActor_GetDepthBlurAmount, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetDepthBlurAmount::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetDepthBlurRadius
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_GetDepthBlurRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetDepthBlurRadius) == 0x000004, "Wrong alignment on NicolaCameraActor_GetDepthBlurRadius");
static_assert(sizeof(NicolaCameraActor_GetDepthBlurRadius) == 0x000004, "Wrong size on NicolaCameraActor_GetDepthBlurRadius");
static_assert(offsetof(NicolaCameraActor_GetDepthBlurRadius, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetDepthBlurRadius::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_GetFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetFieldOfView) == 0x000004, "Wrong alignment on NicolaCameraActor_GetFieldOfView");
static_assert(sizeof(NicolaCameraActor_GetFieldOfView) == 0x000004, "Wrong size on NicolaCameraActor_GetFieldOfView");
static_assert(offsetof(NicolaCameraActor_GetFieldOfView, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActor.GetNearDOFPower
// 0x0004 (0x0004 - 0x0000)
struct NicolaCameraActor_GetNearDOFPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActor_GetNearDOFPower) == 0x000004, "Wrong alignment on NicolaCameraActor_GetNearDOFPower");
static_assert(sizeof(NicolaCameraActor_GetNearDOFPower) == 0x000004, "Wrong size on NicolaCameraActor_GetNearDOFPower");
static_assert(offsetof(NicolaCameraActor_GetNearDOFPower, ReturnValue) == 0x000000, "Member 'NicolaCameraActor_GetNearDOFPower::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCameraActorControllable.SetDebugControlFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaCameraActorControllable_SetDebugControlFlag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraActorControllable_SetDebugControlFlag) == 0x000001, "Wrong alignment on NicolaCameraActorControllable_SetDebugControlFlag");
static_assert(sizeof(NicolaCameraActorControllable_SetDebugControlFlag) == 0x000001, "Wrong size on NicolaCameraActorControllable_SetDebugControlFlag");
static_assert(offsetof(NicolaCameraActorControllable_SetDebugControlFlag, Value) == 0x000000, "Member 'NicolaCameraActorControllable_SetDebugControlFlag::Value' has a wrong offset!");

// Function Nicola.BattlePositionLine.GetChildAll
// 0x0018 (0x0018 - 0x0000)
struct BattlePositionLine_GetChildAll final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         arr;                                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePositionLine_GetChildAll) == 0x000008, "Wrong alignment on BattlePositionLine_GetChildAll");
static_assert(sizeof(BattlePositionLine_GetChildAll) == 0x000018, "Wrong size on BattlePositionLine_GetChildAll");
static_assert(offsetof(BattlePositionLine_GetChildAll, TARGET) == 0x000000, "Member 'BattlePositionLine_GetChildAll::TARGET' has a wrong offset!");
static_assert(offsetof(BattlePositionLine_GetChildAll, arr) == 0x000008, "Member 'BattlePositionLine_GetChildAll::arr' has a wrong offset!");

// Function Nicola.BattlePositionLine.SetupFromActors
// 0x0010 (0x0010 - 0x0000)
struct BattlePositionLine_SetupFromActors final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePositionLine_SetupFromActors) == 0x000008, "Wrong alignment on BattlePositionLine_SetupFromActors");
static_assert(sizeof(BattlePositionLine_SetupFromActors) == 0x000010, "Wrong size on BattlePositionLine_SetupFromActors");
static_assert(offsetof(BattlePositionLine_SetupFromActors, Actors) == 0x000000, "Member 'BattlePositionLine_SetupFromActors::Actors' has a wrong offset!");

// Function Nicola.BattlePositionLine.UpdatePositionLine
// 0x0004 (0x0004 - 0x0000)
struct BattlePositionLine_UpdatePositionLine final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePositionLine_UpdatePositionLine) == 0x000004, "Wrong alignment on BattlePositionLine_UpdatePositionLine");
static_assert(sizeof(BattlePositionLine_UpdatePositionLine) == 0x000004, "Wrong size on BattlePositionLine_UpdatePositionLine");
static_assert(offsetof(BattlePositionLine_UpdatePositionLine, Rate) == 0x000000, "Member 'BattlePositionLine_UpdatePositionLine::Rate' has a wrong offset!");

// Function Nicola.BattleRoadStartEffectManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct BattleRoadStartEffectManager_GetInstance final
{
public:
	class ABattleRoadStartEffectManager*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRoadStartEffectManager_GetInstance) == 0x000008, "Wrong alignment on BattleRoadStartEffectManager_GetInstance");
static_assert(sizeof(BattleRoadStartEffectManager_GetInstance) == 0x000008, "Wrong size on BattleRoadStartEffectManager_GetInstance");
static_assert(offsetof(BattleRoadStartEffectManager_GetInstance, ReturnValue) == 0x000000, "Member 'BattleRoadStartEffectManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_FadeIn final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_FadeIn) == 0x000004, "Wrong alignment on NicolaSoundFL_FadeIn");
static_assert(sizeof(NicolaSoundFL_FadeIn) == 0x000008, "Wrong size on NicolaSoundFL_FadeIn");
static_assert(offsetof(NicolaSoundFL_FadeIn, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_FadeIn::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_FadeIn, DurationSec) == 0x000004, "Member 'NicolaSoundFL_FadeIn::DurationSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.FadeInCategoryVolumeRate
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_FadeInCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_FadeInCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundFL_FadeInCategoryVolumeRate");
static_assert(sizeof(NicolaSoundFL_FadeInCategoryVolumeRate) == 0x000008, "Wrong size on NicolaSoundFL_FadeInCategoryVolumeRate");
static_assert(offsetof(NicolaSoundFL_FadeInCategoryVolumeRate, SoundCategory) == 0x000000, "Member 'NicolaSoundFL_FadeInCategoryVolumeRate::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_FadeInCategoryVolumeRate, DurationSec) == 0x000004, "Member 'NicolaSoundFL_FadeInCategoryVolumeRate::DurationSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.FadeOut
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_FadeOut final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStop;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_FadeOut) == 0x000004, "Wrong alignment on NicolaSoundFL_FadeOut");
static_assert(sizeof(NicolaSoundFL_FadeOut) == 0x00000C, "Wrong size on NicolaSoundFL_FadeOut");
static_assert(offsetof(NicolaSoundFL_FadeOut, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_FadeOut::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_FadeOut, DurationSec) == 0x000004, "Member 'NicolaSoundFL_FadeOut::DurationSec' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_FadeOut, bAutoStop) == 0x000008, "Member 'NicolaSoundFL_FadeOut::bAutoStop' has a wrong offset!");

// Function Nicola.NicolaSoundFL.FadeOutCategoryVolumeRate
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_FadeOutCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStop;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_FadeOutCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundFL_FadeOutCategoryVolumeRate");
static_assert(sizeof(NicolaSoundFL_FadeOutCategoryVolumeRate) == 0x00000C, "Wrong size on NicolaSoundFL_FadeOutCategoryVolumeRate");
static_assert(offsetof(NicolaSoundFL_FadeOutCategoryVolumeRate, SoundCategory) == 0x000000, "Member 'NicolaSoundFL_FadeOutCategoryVolumeRate::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_FadeOutCategoryVolumeRate, DurationSec) == 0x000004, "Member 'NicolaSoundFL_FadeOutCategoryVolumeRate::DurationSec' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_FadeOutCategoryVolumeRate, bAutoStop) == 0x000008, "Member 'NicolaSoundFL_FadeOutCategoryVolumeRate::bAutoStop' has a wrong offset!");

// Function Nicola.NicolaSoundFL.GetSEGopList_Event
// 0x0010 (0x0010 - 0x0000)
struct NicolaSoundFL_GetSEGopList_Event final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_GetSEGopList_Event) == 0x000008, "Wrong alignment on NicolaSoundFL_GetSEGopList_Event");
static_assert(sizeof(NicolaSoundFL_GetSEGopList_Event) == 0x000010, "Wrong size on NicolaSoundFL_GetSEGopList_Event");
static_assert(offsetof(NicolaSoundFL_GetSEGopList_Event, GopIdList) == 0x000000, "Member 'NicolaSoundFL_GetSEGopList_Event::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSoundFL.GetSEGopList_Magic
// 0x0010 (0x0010 - 0x0000)
struct NicolaSoundFL_GetSEGopList_Magic final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_GetSEGopList_Magic) == 0x000008, "Wrong alignment on NicolaSoundFL_GetSEGopList_Magic");
static_assert(sizeof(NicolaSoundFL_GetSEGopList_Magic) == 0x000010, "Wrong size on NicolaSoundFL_GetSEGopList_Magic");
static_assert(offsetof(NicolaSoundFL_GetSEGopList_Magic, GopIdList) == 0x000000, "Member 'NicolaSoundFL_GetSEGopList_Magic::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSoundFL.GetSEGopList_System
// 0x0010 (0x0010 - 0x0000)
struct NicolaSoundFL_GetSEGopList_System final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_GetSEGopList_System) == 0x000008, "Wrong alignment on NicolaSoundFL_GetSEGopList_System");
static_assert(sizeof(NicolaSoundFL_GetSEGopList_System) == 0x000010, "Wrong size on NicolaSoundFL_GetSEGopList_System");
static_assert(offsetof(NicolaSoundFL_GetSEGopList_System, GopIdList) == 0x000000, "Member 'NicolaSoundFL_GetSEGopList_System::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSoundFL.GetSEGopList_Weapon
// 0x0010 (0x0010 - 0x0000)
struct NicolaSoundFL_GetSEGopList_Weapon final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_GetSEGopList_Weapon) == 0x000008, "Wrong alignment on NicolaSoundFL_GetSEGopList_Weapon");
static_assert(sizeof(NicolaSoundFL_GetSEGopList_Weapon) == 0x000010, "Wrong size on NicolaSoundFL_GetSEGopList_Weapon");
static_assert(offsetof(NicolaSoundFL_GetSEGopList_Weapon, GopIdList) == 0x000000, "Member 'NicolaSoundFL_GetSEGopList_Weapon::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSoundFL.GetSoundGopList
// 0x0018 (0x0018 - 0x0000)
struct NicolaSoundFL_GetSoundGopList final
{
public:
	ENicolaSoundDataTableType                     DataType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GopIdList;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_GetSoundGopList) == 0x000008, "Wrong alignment on NicolaSoundFL_GetSoundGopList");
static_assert(sizeof(NicolaSoundFL_GetSoundGopList) == 0x000018, "Wrong size on NicolaSoundFL_GetSoundGopList");
static_assert(offsetof(NicolaSoundFL_GetSoundGopList, DataType) == 0x000000, "Member 'NicolaSoundFL_GetSoundGopList::DataType' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_GetSoundGopList, GopIdList) == 0x000008, "Member 'NicolaSoundFL_GetSoundGopList::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSoundFL.IsLoop
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_IsLoop final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_IsLoop) == 0x000004, "Wrong alignment on NicolaSoundFL_IsLoop");
static_assert(sizeof(NicolaSoundFL_IsLoop) == 0x000008, "Wrong size on NicolaSoundFL_IsLoop");
static_assert(offsetof(NicolaSoundFL_IsLoop, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_IsLoop::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_IsLoop, ReturnValue) == 0x000004, "Member 'NicolaSoundFL_IsLoop::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.IsPaused
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_IsPaused final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_IsPaused) == 0x000004, "Wrong alignment on NicolaSoundFL_IsPaused");
static_assert(sizeof(NicolaSoundFL_IsPaused) == 0x000008, "Wrong size on NicolaSoundFL_IsPaused");
static_assert(offsetof(NicolaSoundFL_IsPaused, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_IsPaused::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_IsPaused, ReturnValue) == 0x000004, "Member 'NicolaSoundFL_IsPaused::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.IsPlaying
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_IsPlaying final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_IsPlaying) == 0x000004, "Wrong alignment on NicolaSoundFL_IsPlaying");
static_assert(sizeof(NicolaSoundFL_IsPlaying) == 0x000008, "Wrong size on NicolaSoundFL_IsPlaying");
static_assert(offsetof(NicolaSoundFL_IsPlaying, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_IsPlaying::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_IsPlaying, ReturnValue) == 0x000004, "Member 'NicolaSoundFL_IsPlaying::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.IsPlayingBgm
// 0x0001 (0x0001 - 0x0000)
struct NicolaSoundFL_IsPlayingBgm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_IsPlayingBgm) == 0x000001, "Wrong alignment on NicolaSoundFL_IsPlayingBgm");
static_assert(sizeof(NicolaSoundFL_IsPlayingBgm) == 0x000001, "Wrong size on NicolaSoundFL_IsPlayingBgm");
static_assert(offsetof(NicolaSoundFL_IsPlayingBgm, ReturnValue) == 0x000000, "Member 'NicolaSoundFL_IsPlayingBgm::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.IsPlayingJingle
// 0x0001 (0x0001 - 0x0000)
struct NicolaSoundFL_IsPlayingJingle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_IsPlayingJingle) == 0x000001, "Wrong alignment on NicolaSoundFL_IsPlayingJingle");
static_assert(sizeof(NicolaSoundFL_IsPlayingJingle) == 0x000001, "Wrong size on NicolaSoundFL_IsPlayingJingle");
static_assert(offsetof(NicolaSoundFL_IsPlayingJingle, ReturnValue) == 0x000000, "Member 'NicolaSoundFL_IsPlayingJingle::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.Pause
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_Pause final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_Pause) == 0x000004, "Wrong alignment on NicolaSoundFL_Pause");
static_assert(sizeof(NicolaSoundFL_Pause) == 0x000008, "Wrong size on NicolaSoundFL_Pause");
static_assert(offsetof(NicolaSoundFL_Pause, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_Pause::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_Pause, bPause) == 0x000004, "Member 'NicolaSoundFL_Pause::bPause' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PauseMainBGM
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_PauseMainBGM final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeSec;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PauseMainBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_PauseMainBGM");
static_assert(sizeof(NicolaSoundFL_PauseMainBGM) == 0x000008, "Wrong size on NicolaSoundFL_PauseMainBGM");
static_assert(offsetof(NicolaSoundFL_PauseMainBGM, bPause) == 0x000000, "Member 'NicolaSoundFL_PauseMainBGM::bPause' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PauseMainBGM, FadeSec) == 0x000004, "Member 'NicolaSoundFL_PauseMainBGM::FadeSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlayBattleBGM
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlayBattleBGM final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeOutSec;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlayBattleBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_PlayBattleBGM");
static_assert(sizeof(NicolaSoundFL_PlayBattleBGM) == 0x00000C, "Wrong size on NicolaSoundFL_PlayBattleBGM");
static_assert(offsetof(NicolaSoundFL_PlayBattleBGM, GopId) == 0x000000, "Member 'NicolaSoundFL_PlayBattleBGM::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlayBattleBGM, fadeOutSec) == 0x000008, "Member 'NicolaSoundFL_PlayBattleBGM::fadeOutSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlayBGM
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlayBGM final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSec;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlayBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_PlayBGM");
static_assert(sizeof(NicolaSoundFL_PlayBGM) == 0x00000C, "Wrong size on NicolaSoundFL_PlayBGM");
static_assert(offsetof(NicolaSoundFL_PlayBGM, GopId) == 0x000000, "Member 'NicolaSoundFL_PlayBGM::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlayBGM, FadeSec) == 0x000008, "Member 'NicolaSoundFL_PlayBGM::FadeSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlayMainBGM
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlayMainBGM final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSec;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlayMainBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_PlayMainBGM");
static_assert(sizeof(NicolaSoundFL_PlayMainBGM) == 0x00000C, "Wrong size on NicolaSoundFL_PlayMainBGM");
static_assert(offsetof(NicolaSoundFL_PlayMainBGM, GopId) == 0x000000, "Member 'NicolaSoundFL_PlayMainBGM::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlayMainBGM, FadeSec) == 0x000008, "Member 'NicolaSoundFL_PlayMainBGM::FadeSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlaySE
// 0x0028 (0x0028 - 0x0000)
struct NicolaSoundFL_PlaySE final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Owner;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_PlaySE) == 0x000008, "Wrong alignment on NicolaSoundFL_PlaySE");
static_assert(sizeof(NicolaSoundFL_PlaySE) == 0x000028, "Wrong size on NicolaSoundFL_PlaySE");
static_assert(offsetof(NicolaSoundFL_PlaySE, GopId) == 0x000000, "Member 'NicolaSoundFL_PlaySE::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySE, Location) == 0x000008, "Member 'NicolaSoundFL_PlaySE::Location' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySE, Owner) == 0x000018, "Member 'NicolaSoundFL_PlaySE::Owner' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySE, ReturnValue) == 0x000020, "Member 'NicolaSoundFL_PlaySE::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlaySE2D
// 0x0018 (0x0018 - 0x0000)
struct NicolaSoundFL_PlaySE2D final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Owner;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundFL_PlaySE2D) == 0x000008, "Wrong alignment on NicolaSoundFL_PlaySE2D");
static_assert(sizeof(NicolaSoundFL_PlaySE2D) == 0x000018, "Wrong size on NicolaSoundFL_PlaySE2D");
static_assert(offsetof(NicolaSoundFL_PlaySE2D, GopId) == 0x000000, "Member 'NicolaSoundFL_PlaySE2D::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySE2D, Owner) == 0x000008, "Member 'NicolaSoundFL_PlaySE2D::Owner' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySE2D, ReturnValue) == 0x000010, "Member 'NicolaSoundFL_PlaySE2D::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlaySEEvent
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlaySEEvent final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlaySEEvent) == 0x000004, "Wrong alignment on NicolaSoundFL_PlaySEEvent");
static_assert(sizeof(NicolaSoundFL_PlaySEEvent) == 0x00000C, "Wrong size on NicolaSoundFL_PlaySEEvent");
static_assert(offsetof(NicolaSoundFL_PlaySEEvent, GopId) == 0x000000, "Member 'NicolaSoundFL_PlaySEEvent::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySEEvent, ReturnValue) == 0x000008, "Member 'NicolaSoundFL_PlaySEEvent::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlaySEMagic
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlaySEMagic final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlaySEMagic) == 0x000004, "Wrong alignment on NicolaSoundFL_PlaySEMagic");
static_assert(sizeof(NicolaSoundFL_PlaySEMagic) == 0x00000C, "Wrong size on NicolaSoundFL_PlaySEMagic");
static_assert(offsetof(NicolaSoundFL_PlaySEMagic, GopId) == 0x000000, "Member 'NicolaSoundFL_PlaySEMagic::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySEMagic, ReturnValue) == 0x000008, "Member 'NicolaSoundFL_PlaySEMagic::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlaySEUI
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlaySEUI final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlaySEUI) == 0x000004, "Wrong alignment on NicolaSoundFL_PlaySEUI");
static_assert(sizeof(NicolaSoundFL_PlaySEUI) == 0x00000C, "Wrong size on NicolaSoundFL_PlaySEUI");
static_assert(offsetof(NicolaSoundFL_PlaySEUI, GopId) == 0x000000, "Member 'NicolaSoundFL_PlaySEUI::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySEUI, ReturnValue) == 0x000008, "Member 'NicolaSoundFL_PlaySEUI::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlaySEWeapon
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlaySEWeapon final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlaySEWeapon) == 0x000004, "Wrong alignment on NicolaSoundFL_PlaySEWeapon");
static_assert(sizeof(NicolaSoundFL_PlaySEWeapon) == 0x00000C, "Wrong size on NicolaSoundFL_PlaySEWeapon");
static_assert(offsetof(NicolaSoundFL_PlaySEWeapon, GopId) == 0x000000, "Member 'NicolaSoundFL_PlaySEWeapon::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlaySEWeapon, ReturnValue) == 0x000008, "Member 'NicolaSoundFL_PlaySEWeapon::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.PlayVoice
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_PlayVoice final
{
public:
	class FName                                   GopVoiceId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_PlayVoice) == 0x000004, "Wrong alignment on NicolaSoundFL_PlayVoice");
static_assert(sizeof(NicolaSoundFL_PlayVoice) == 0x00000C, "Wrong size on NicolaSoundFL_PlayVoice");
static_assert(offsetof(NicolaSoundFL_PlayVoice, GopVoiceId) == 0x000000, "Member 'NicolaSoundFL_PlayVoice::GopVoiceId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_PlayVoice, ReturnValue) == 0x000008, "Member 'NicolaSoundFL_PlayVoice::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.RequestPlayJingle
// 0x0020 (0x0020 - 0x0000)
struct NicolaSoundFL_RequestPlayJingle final
{
public:
	class FName                                   JingleGopIDSoundBgm;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBgmPlayerManagerMEPlayRequestType            BgmPlayerManagerMEPlayRequestType;                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentBgmFadeOutSec;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBgmPlayerManagerLineTypeOnMEEnd              BgmPlayerManagerLineTypeOnMEEnd;                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextBgmFadeInSec;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextGopIDSoundBgm;                                 // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_RequestPlayJingle) == 0x000004, "Wrong alignment on NicolaSoundFL_RequestPlayJingle");
static_assert(sizeof(NicolaSoundFL_RequestPlayJingle) == 0x000020, "Wrong size on NicolaSoundFL_RequestPlayJingle");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingle, JingleGopIDSoundBgm) == 0x000000, "Member 'NicolaSoundFL_RequestPlayJingle::JingleGopIDSoundBgm' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingle, BgmPlayerManagerMEPlayRequestType) == 0x000008, "Member 'NicolaSoundFL_RequestPlayJingle::BgmPlayerManagerMEPlayRequestType' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingle, CurrentBgmFadeOutSec) == 0x00000C, "Member 'NicolaSoundFL_RequestPlayJingle::CurrentBgmFadeOutSec' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingle, BgmPlayerManagerLineTypeOnMEEnd) == 0x000010, "Member 'NicolaSoundFL_RequestPlayJingle::BgmPlayerManagerLineTypeOnMEEnd' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingle, NextBgmFadeInSec) == 0x000014, "Member 'NicolaSoundFL_RequestPlayJingle::NextBgmFadeInSec' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingle, NextGopIDSoundBgm) == 0x000018, "Member 'NicolaSoundFL_RequestPlayJingle::NextGopIDSoundBgm' has a wrong offset!");

// Function Nicola.NicolaSoundFL.RequestPlayJingleTemporary
// 0x0010 (0x0010 - 0x0000)
struct NicolaSoundFL_RequestPlayJingleTemporary final
{
public:
	class FName                                   JingleGopIDSoundBgm;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentBgmFadeOutSec;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextBgmFadeInSec;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_RequestPlayJingleTemporary) == 0x000004, "Wrong alignment on NicolaSoundFL_RequestPlayJingleTemporary");
static_assert(sizeof(NicolaSoundFL_RequestPlayJingleTemporary) == 0x000010, "Wrong size on NicolaSoundFL_RequestPlayJingleTemporary");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingleTemporary, JingleGopIDSoundBgm) == 0x000000, "Member 'NicolaSoundFL_RequestPlayJingleTemporary::JingleGopIDSoundBgm' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingleTemporary, CurrentBgmFadeOutSec) == 0x000008, "Member 'NicolaSoundFL_RequestPlayJingleTemporary::CurrentBgmFadeOutSec' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingleTemporary, NextBgmFadeInSec) == 0x00000C, "Member 'NicolaSoundFL_RequestPlayJingleTemporary::NextBgmFadeInSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.RequestPlayJingleTemporaryDefaultFade
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade final
{
public:
	class FName                                   JingleGopIDSoundBgm;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade) == 0x000004, "Wrong alignment on NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade");
static_assert(sizeof(NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade) == 0x000008, "Wrong size on NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade");
static_assert(offsetof(NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade, JingleGopIDSoundBgm) == 0x000000, "Member 'NicolaSoundFL_RequestPlayJingleTemporaryDefaultFade::JingleGopIDSoundBgm' has a wrong offset!");

// Function Nicola.NicolaSoundFL.SetAisacParamById
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_SetAisacParamById final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AisacId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AisacValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_SetAisacParamById) == 0x000004, "Wrong alignment on NicolaSoundFL_SetAisacParamById");
static_assert(sizeof(NicolaSoundFL_SetAisacParamById) == 0x00000C, "Wrong size on NicolaSoundFL_SetAisacParamById");
static_assert(offsetof(NicolaSoundFL_SetAisacParamById, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_SetAisacParamById::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_SetAisacParamById, AisacId) == 0x000004, "Member 'NicolaSoundFL_SetAisacParamById::AisacId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_SetAisacParamById, AisacValue) == 0x000008, "Member 'NicolaSoundFL_SetAisacParamById::AisacValue' has a wrong offset!");

// Function Nicola.NicolaSoundFL.SetCategoryVolumeRate
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_SetCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_SetCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundFL_SetCategoryVolumeRate");
static_assert(sizeof(NicolaSoundFL_SetCategoryVolumeRate) == 0x000008, "Wrong size on NicolaSoundFL_SetCategoryVolumeRate");
static_assert(offsetof(NicolaSoundFL_SetCategoryVolumeRate, SoundCategory) == 0x000000, "Member 'NicolaSoundFL_SetCategoryVolumeRate::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_SetCategoryVolumeRate, TargetRate) == 0x000004, "Member 'NicolaSoundFL_SetCategoryVolumeRate::TargetRate' has a wrong offset!");

// Function Nicola.NicolaSoundFL.SetDebugDrawFlag_AttenuationShapeAll
// 0x0001 (0x0001 - 0x0000)
struct NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll) == 0x000001, "Wrong alignment on NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll");
static_assert(sizeof(NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll) == 0x000001, "Wrong size on NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll");
static_assert(offsetof(NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll, bEnable) == 0x000000, "Member 'NicolaSoundFL_SetDebugDrawFlag_AttenuationShapeAll::bEnable' has a wrong offset!");

// Function Nicola.NicolaSoundFL.SetMuteByCategory
// 0x0002 (0x0002 - 0x0000)
struct NicolaSoundFL_SetMuteByCategory final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMute;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_SetMuteByCategory) == 0x000001, "Wrong alignment on NicolaSoundFL_SetMuteByCategory");
static_assert(sizeof(NicolaSoundFL_SetMuteByCategory) == 0x000002, "Wrong size on NicolaSoundFL_SetMuteByCategory");
static_assert(offsetof(NicolaSoundFL_SetMuteByCategory, SoundCategory) == 0x000000, "Member 'NicolaSoundFL_SetMuteByCategory::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_SetMuteByCategory, bMute) == 0x000001, "Member 'NicolaSoundFL_SetMuteByCategory::bMute' has a wrong offset!");

// Function Nicola.NicolaSoundFL.SetVolumeRate
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundFL_SetVolumeRate final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_SetVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundFL_SetVolumeRate");
static_assert(sizeof(NicolaSoundFL_SetVolumeRate) == 0x000008, "Wrong size on NicolaSoundFL_SetVolumeRate");
static_assert(offsetof(NicolaSoundFL_SetVolumeRate, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_SetVolumeRate::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_SetVolumeRate, TargetRate) == 0x000004, "Member 'NicolaSoundFL_SetVolumeRate::TargetRate' has a wrong offset!");

// Function Nicola.NicolaSoundFL.Stop
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundFL_Stop final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_Stop) == 0x000004, "Wrong alignment on NicolaSoundFL_Stop");
static_assert(sizeof(NicolaSoundFL_Stop) == 0x000004, "Wrong size on NicolaSoundFL_Stop");
static_assert(offsetof(NicolaSoundFL_Stop, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_Stop::PlaybackId' has a wrong offset!");

// Function Nicola.NicolaSoundFL.StopBattleBGM
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundFL_StopBattleBGM final
{
public:
	float                                         fadeOutSec;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_StopBattleBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_StopBattleBGM");
static_assert(sizeof(NicolaSoundFL_StopBattleBGM) == 0x000004, "Wrong size on NicolaSoundFL_StopBattleBGM");
static_assert(offsetof(NicolaSoundFL_StopBattleBGM, fadeOutSec) == 0x000000, "Member 'NicolaSoundFL_StopBattleBGM::fadeOutSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.StopBGM
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundFL_StopBGM final
{
public:
	float                                         fadeOutSec;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_StopBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_StopBGM");
static_assert(sizeof(NicolaSoundFL_StopBGM) == 0x000004, "Wrong size on NicolaSoundFL_StopBGM");
static_assert(offsetof(NicolaSoundFL_StopBGM, fadeOutSec) == 0x000000, "Member 'NicolaSoundFL_StopBGM::fadeOutSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.StopByCategory
// 0x0001 (0x0001 - 0x0000)
struct NicolaSoundFL_StopByCategory final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_StopByCategory) == 0x000001, "Wrong alignment on NicolaSoundFL_StopByCategory");
static_assert(sizeof(NicolaSoundFL_StopByCategory) == 0x000001, "Wrong size on NicolaSoundFL_StopByCategory");
static_assert(offsetof(NicolaSoundFL_StopByCategory, SoundCategory) == 0x000000, "Member 'NicolaSoundFL_StopByCategory::SoundCategory' has a wrong offset!");

// Function Nicola.NicolaSoundFL.StopMainBGM
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundFL_StopMainBGM final
{
public:
	float                                         fadeOutSec;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_StopMainBGM) == 0x000004, "Wrong alignment on NicolaSoundFL_StopMainBGM");
static_assert(sizeof(NicolaSoundFL_StopMainBGM) == 0x000004, "Wrong size on NicolaSoundFL_StopMainBGM");
static_assert(offsetof(NicolaSoundFL_StopMainBGM, fadeOutSec) == 0x000000, "Member 'NicolaSoundFL_StopMainBGM::fadeOutSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.TransitionCategoryVolumeRate
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_TransitionCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_TransitionCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundFL_TransitionCategoryVolumeRate");
static_assert(sizeof(NicolaSoundFL_TransitionCategoryVolumeRate) == 0x00000C, "Wrong size on NicolaSoundFL_TransitionCategoryVolumeRate");
static_assert(offsetof(NicolaSoundFL_TransitionCategoryVolumeRate, SoundCategory) == 0x000000, "Member 'NicolaSoundFL_TransitionCategoryVolumeRate::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_TransitionCategoryVolumeRate, TargetRate) == 0x000004, "Member 'NicolaSoundFL_TransitionCategoryVolumeRate::TargetRate' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_TransitionCategoryVolumeRate, DurationSec) == 0x000008, "Member 'NicolaSoundFL_TransitionCategoryVolumeRate::DurationSec' has a wrong offset!");

// Function Nicola.NicolaSoundFL.TransitionVolumeRate
// 0x000C (0x000C - 0x0000)
struct NicolaSoundFL_TransitionVolumeRate final
{
public:
	struct FADSoundPlaybackId                     PlaybackId;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundFL_TransitionVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundFL_TransitionVolumeRate");
static_assert(sizeof(NicolaSoundFL_TransitionVolumeRate) == 0x00000C, "Wrong size on NicolaSoundFL_TransitionVolumeRate");
static_assert(offsetof(NicolaSoundFL_TransitionVolumeRate, PlaybackId) == 0x000000, "Member 'NicolaSoundFL_TransitionVolumeRate::PlaybackId' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_TransitionVolumeRate, TargetRate) == 0x000004, "Member 'NicolaSoundFL_TransitionVolumeRate::TargetRate' has a wrong offset!");
static_assert(offsetof(NicolaSoundFL_TransitionVolumeRate, DurationSec) == 0x000008, "Member 'NicolaSoundFL_TransitionVolumeRate::DurationSec' has a wrong offset!");

// Function Nicola.NicolaSoundAmbientCoastAreaActor.OnBeginOverlapOther
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther final
{
public:
	const class AActor*                           Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther) == 0x000008, "Wrong alignment on NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther");
static_assert(sizeof(NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther) == 0x000008, "Wrong size on NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther");
static_assert(offsetof(NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther, Other) == 0x000000, "Member 'NicolaSoundAmbientCoastAreaActor_OnBeginOverlapOther::Other' has a wrong offset!");

// Function Nicola.NicolaSoundAmbientCoastAreaActor.OnEndOverlapOther
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther final
{
public:
	const class AActor*                           Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther) == 0x000008, "Wrong alignment on NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther");
static_assert(sizeof(NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther) == 0x000008, "Wrong size on NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther");
static_assert(offsetof(NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther, Other) == 0x000000, "Member 'NicolaSoundAmbientCoastAreaActor_OnEndOverlapOther::Other' has a wrong offset!");

// Function Nicola.NicolaSoundAmbientCoastAreaActor.GetAreaCollisionCentralAxis
// 0x000C (0x000C - 0x0000)
struct NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis) == 0x000004, "Wrong alignment on NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis");
static_assert(sizeof(NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis) == 0x00000C, "Wrong size on NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis");
static_assert(offsetof(NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis, ReturnValue) == 0x000000, "Member 'NicolaSoundAmbientCoastAreaActor_GetAreaCollisionCentralAxis::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundAmbientCoastAreaActor.GetAreaCollisionComponent
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent) == 0x000008, "Wrong alignment on NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent");
static_assert(sizeof(NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent) == 0x000008, "Wrong size on NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent");
static_assert(offsetof(NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent, ReturnValue) == 0x000000, "Member 'NicolaSoundAmbientCoastAreaActor_GetAreaCollisionComponent::ReturnValue' has a wrong offset!");

// Function Nicola.BattleSpeedInterface.OnChangeBattleSpeed
// 0x0004 (0x0004 - 0x0000)
struct BattleSpeedInterface_OnChangeBattleSpeed final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleSpeedInterface_OnChangeBattleSpeed) == 0x000004, "Wrong alignment on BattleSpeedInterface_OnChangeBattleSpeed");
static_assert(sizeof(BattleSpeedInterface_OnChangeBattleSpeed) == 0x000004, "Wrong size on BattleSpeedInterface_OnChangeBattleSpeed");
static_assert(offsetof(BattleSpeedInterface_OnChangeBattleSpeed, Rate) == 0x000000, "Member 'BattleSpeedInterface_OnChangeBattleSpeed::Rate' has a wrong offset!");

// Function Nicola.BattleTestCharaActor.SetAnimation
// 0x0002 (0x0002 - 0x0000)
struct BattleTestCharaActor_SetAnimation final
{
public:
	EAnimationType                                animationType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleTestCharaActor_SetAnimation) == 0x000001, "Wrong alignment on BattleTestCharaActor_SetAnimation");
static_assert(sizeof(BattleTestCharaActor_SetAnimation) == 0x000002, "Wrong size on BattleTestCharaActor_SetAnimation");
static_assert(offsetof(BattleTestCharaActor_SetAnimation, animationType) == 0x000000, "Member 'BattleTestCharaActor_SetAnimation::animationType' has a wrong offset!");
static_assert(offsetof(BattleTestCharaActor_SetAnimation, IsLoop) == 0x000001, "Member 'BattleTestCharaActor_SetAnimation::IsLoop' has a wrong offset!");

// Function Nicola.BattleTestCharaActor.SpawnCharacter
// 0x0010 (0x0010 - 0x0000)
struct BattleTestCharaActor_SpawnCharacter final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleTestCharaActor_SpawnCharacter) == 0x000004, "Wrong alignment on BattleTestCharaActor_SpawnCharacter");
static_assert(sizeof(BattleTestCharaActor_SpawnCharacter) == 0x000010, "Wrong size on BattleTestCharaActor_SpawnCharacter");
static_assert(offsetof(BattleTestCharaActor_SpawnCharacter, GopId) == 0x000000, "Member 'BattleTestCharaActor_SpawnCharacter::GopId' has a wrong offset!");
static_assert(offsetof(BattleTestCharaActor_SpawnCharacter, Tag) == 0x000008, "Member 'BattleTestCharaActor_SpawnCharacter::Tag' has a wrong offset!");

// Function Nicola.BattleTestCharaActor.SpawnCharacterFromBP
// 0x0030 (0x0030 - 0x0000)
struct BattleTestCharaActor_SpawnCharacterFromBP final
{
public:
	TSoftClassPtr<class UClass>                   loadAssetPtr;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleTestCharaActor_SpawnCharacterFromBP) == 0x000008, "Wrong alignment on BattleTestCharaActor_SpawnCharacterFromBP");
static_assert(sizeof(BattleTestCharaActor_SpawnCharacterFromBP) == 0x000030, "Wrong size on BattleTestCharaActor_SpawnCharacterFromBP");
static_assert(offsetof(BattleTestCharaActor_SpawnCharacterFromBP, loadAssetPtr) == 0x000000, "Member 'BattleTestCharaActor_SpawnCharacterFromBP::loadAssetPtr' has a wrong offset!");
static_assert(offsetof(BattleTestCharaActor_SpawnCharacterFromBP, Tag) == 0x000028, "Member 'BattleTestCharaActor_SpawnCharacterFromBP::Tag' has a wrong offset!");

// Function Nicola.BattleTestCharaActor.UpdateScaleFromGopUnitLooks
// 0x0002 (0x0002 - 0x0000)
struct BattleTestCharaActor_UpdateScaleFromGopUnitLooks final
{
public:
	bool                                          isEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleTestCharaActor_UpdateScaleFromGopUnitLooks) == 0x000001, "Wrong alignment on BattleTestCharaActor_UpdateScaleFromGopUnitLooks");
static_assert(sizeof(BattleTestCharaActor_UpdateScaleFromGopUnitLooks) == 0x000002, "Wrong size on BattleTestCharaActor_UpdateScaleFromGopUnitLooks");
static_assert(offsetof(BattleTestCharaActor_UpdateScaleFromGopUnitLooks, isEnable) == 0x000000, "Member 'BattleTestCharaActor_UpdateScaleFromGopUnitLooks::isEnable' has a wrong offset!");
static_assert(offsetof(BattleTestCharaActor_UpdateScaleFromGopUnitLooks, ReturnValue) == 0x000001, "Member 'BattleTestCharaActor_UpdateScaleFromGopUnitLooks::ReturnValue' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectHowToUse
// 0x0020 (0x0020 - 0x0000)
struct BattleUIDrawer_OpenSelectHowToUse final
{
public:
	TArray<class FText>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectHowToUse) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectHowToUse");
static_assert(sizeof(BattleUIDrawer_OpenSelectHowToUse) == 0x000020, "Wrong size on BattleUIDrawer_OpenSelectHowToUse");
static_assert(offsetof(BattleUIDrawer_OpenSelectHowToUse, Items) == 0x000000, "Member 'BattleUIDrawer_OpenSelectHowToUse::Items' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_OpenSelectHowToUse, receiver) == 0x000010, "Member 'BattleUIDrawer_OpenSelectHowToUse::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectItem
// 0x0020 (0x0020 - 0x0000)
struct BattleUIDrawer_OpenSelectItem final
{
public:
	TArray<class FText>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectItem) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectItem");
static_assert(sizeof(BattleUIDrawer_OpenSelectItem) == 0x000020, "Wrong size on BattleUIDrawer_OpenSelectItem");
static_assert(offsetof(BattleUIDrawer_OpenSelectItem, Items) == 0x000000, "Member 'BattleUIDrawer_OpenSelectItem::Items' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_OpenSelectItem, receiver) == 0x000010, "Member 'BattleUIDrawer_OpenSelectItem::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectPartyCommand
// 0x0010 (0x0010 - 0x0000)
struct BattleUIDrawer_OpenSelectPartyCommand final
{
public:
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectPartyCommand) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectPartyCommand");
static_assert(sizeof(BattleUIDrawer_OpenSelectPartyCommand) == 0x000010, "Wrong size on BattleUIDrawer_OpenSelectPartyCommand");
static_assert(offsetof(BattleUIDrawer_OpenSelectPartyCommand, receiver) == 0x000000, "Member 'BattleUIDrawer_OpenSelectPartyCommand::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectSkill
// 0x0020 (0x0020 - 0x0000)
struct BattleUIDrawer_OpenSelectSkill final
{
public:
	TArray<class FText>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectSkill) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectSkill");
static_assert(sizeof(BattleUIDrawer_OpenSelectSkill) == 0x000020, "Wrong size on BattleUIDrawer_OpenSelectSkill");
static_assert(offsetof(BattleUIDrawer_OpenSelectSkill, Items) == 0x000000, "Member 'BattleUIDrawer_OpenSelectSkill::Items' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_OpenSelectSkill, receiver) == 0x000010, "Member 'BattleUIDrawer_OpenSelectSkill::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectTactics
// 0x0010 (0x0010 - 0x0000)
struct BattleUIDrawer_OpenSelectTactics final
{
public:
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectTactics) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectTactics");
static_assert(sizeof(BattleUIDrawer_OpenSelectTactics) == 0x000010, "Wrong size on BattleUIDrawer_OpenSelectTactics");
static_assert(offsetof(BattleUIDrawer_OpenSelectTactics, receiver) == 0x000000, "Member 'BattleUIDrawer_OpenSelectTactics::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectTarget
// 0x0020 (0x0020 - 0x0000)
struct BattleUIDrawer_OpenSelectTarget final
{
public:
	TArray<class FText>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectTarget) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectTarget");
static_assert(sizeof(BattleUIDrawer_OpenSelectTarget) == 0x000020, "Wrong size on BattleUIDrawer_OpenSelectTarget");
static_assert(offsetof(BattleUIDrawer_OpenSelectTarget, Items) == 0x000000, "Member 'BattleUIDrawer_OpenSelectTarget::Items' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_OpenSelectTarget, receiver) == 0x000010, "Member 'BattleUIDrawer_OpenSelectTarget::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectText
// 0x0020 (0x0020 - 0x0000)
struct BattleUIDrawer_OpenSelectText final
{
public:
	TArray<class FText>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectText) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectText");
static_assert(sizeof(BattleUIDrawer_OpenSelectText) == 0x000020, "Wrong size on BattleUIDrawer_OpenSelectText");
static_assert(offsetof(BattleUIDrawer_OpenSelectText, Items) == 0x000000, "Member 'BattleUIDrawer_OpenSelectText::Items' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_OpenSelectText, receiver) == 0x000010, "Member 'BattleUIDrawer_OpenSelectText::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.OpenSelectUnitCommand
// 0x0018 (0x0018 - 0x0000)
struct BattleUIDrawer_OpenSelectUnitCommand final
{
public:
	int32                                         charaIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_OpenSelectUnitCommand) == 0x000008, "Wrong alignment on BattleUIDrawer_OpenSelectUnitCommand");
static_assert(sizeof(BattleUIDrawer_OpenSelectUnitCommand) == 0x000018, "Wrong size on BattleUIDrawer_OpenSelectUnitCommand");
static_assert(offsetof(BattleUIDrawer_OpenSelectUnitCommand, charaIndex) == 0x000000, "Member 'BattleUIDrawer_OpenSelectUnitCommand::charaIndex' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_OpenSelectUnitCommand, receiver) == 0x000008, "Member 'BattleUIDrawer_OpenSelectUnitCommand::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.SetVisibleWidget
// 0x0001 (0x0001 - 0x0000)
struct BattleUIDrawer_SetVisibleWidget final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_SetVisibleWidget) == 0x000001, "Wrong alignment on BattleUIDrawer_SetVisibleWidget");
static_assert(sizeof(BattleUIDrawer_SetVisibleWidget) == 0x000001, "Wrong size on BattleUIDrawer_SetVisibleWidget");
static_assert(offsetof(BattleUIDrawer_SetVisibleWidget, flag) == 0x000000, "Member 'BattleUIDrawer_SetVisibleWidget::flag' has a wrong offset!");

// Function Nicola.BattleUIDrawer.ShowMessage
// 0x0020 (0x0020 - 0x0000)
struct BattleUIDrawer_ShowMessage final
{
public:
	TArray<class FString>                         messages;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IBattleUIReceiver>     receiver;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_ShowMessage) == 0x000008, "Wrong alignment on BattleUIDrawer_ShowMessage");
static_assert(sizeof(BattleUIDrawer_ShowMessage) == 0x000020, "Wrong size on BattleUIDrawer_ShowMessage");
static_assert(offsetof(BattleUIDrawer_ShowMessage, messages) == 0x000000, "Member 'BattleUIDrawer_ShowMessage::messages' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_ShowMessage, receiver) == 0x000010, "Member 'BattleUIDrawer_ShowMessage::receiver' has a wrong offset!");

// Function Nicola.BattleUIDrawer.UpdateCharaInfo
// 0x0030 (0x0030 - 0x0000)
struct BattleUIDrawer_UpdateCharaInfo final
{
public:
	int32                                         charaIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattleCharaInfoViewData               viewData;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIDrawer_UpdateCharaInfo) == 0x000008, "Wrong alignment on BattleUIDrawer_UpdateCharaInfo");
static_assert(sizeof(BattleUIDrawer_UpdateCharaInfo) == 0x000030, "Wrong size on BattleUIDrawer_UpdateCharaInfo");
static_assert(offsetof(BattleUIDrawer_UpdateCharaInfo, charaIndex) == 0x000000, "Member 'BattleUIDrawer_UpdateCharaInfo::charaIndex' has a wrong offset!");
static_assert(offsetof(BattleUIDrawer_UpdateCharaInfo, viewData) == 0x000008, "Member 'BattleUIDrawer_UpdateCharaInfo::viewData' has a wrong offset!");

// Function Nicola.BattleUIReceiver.OnSelectId
// 0x0008 (0x0008 - 0x0000)
struct BattleUIReceiver_OnSelectId final
{
public:
	class FName                                   selectId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIReceiver_OnSelectId) == 0x000004, "Wrong alignment on BattleUIReceiver_OnSelectId");
static_assert(sizeof(BattleUIReceiver_OnSelectId) == 0x000008, "Wrong size on BattleUIReceiver_OnSelectId");
static_assert(offsetof(BattleUIReceiver_OnSelectId, selectId) == 0x000000, "Member 'BattleUIReceiver_OnSelectId::selectId' has a wrong offset!");

// Function Nicola.BattleUIReceiver.OnSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct BattleUIReceiver_OnSelectIndex final
{
public:
	int32                                         selectIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIReceiver_OnSelectIndex) == 0x000004, "Wrong alignment on BattleUIReceiver_OnSelectIndex");
static_assert(sizeof(BattleUIReceiver_OnSelectIndex) == 0x000004, "Wrong size on BattleUIReceiver_OnSelectIndex");
static_assert(offsetof(BattleUIReceiver_OnSelectIndex, selectIndex) == 0x000000, "Member 'BattleUIReceiver_OnSelectIndex::selectIndex' has a wrong offset!");

// Function Nicola.BattleUIReceiver.OnSelectPartyCommand
// 0x0001 (0x0001 - 0x0000)
struct BattleUIReceiver_OnSelectPartyCommand final
{
public:
	EBattlePartyCommand                           Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIReceiver_OnSelectPartyCommand) == 0x000001, "Wrong alignment on BattleUIReceiver_OnSelectPartyCommand");
static_assert(sizeof(BattleUIReceiver_OnSelectPartyCommand) == 0x000001, "Wrong size on BattleUIReceiver_OnSelectPartyCommand");
static_assert(offsetof(BattleUIReceiver_OnSelectPartyCommand, Command) == 0x000000, "Member 'BattleUIReceiver_OnSelectPartyCommand::Command' has a wrong offset!");

// Function Nicola.BattleUIReceiver.OnSelectTactics
// 0x0001 (0x0001 - 0x0000)
struct BattleUIReceiver_OnSelectTactics final
{
public:
	EBattleTactics                                tactics;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIReceiver_OnSelectTactics) == 0x000001, "Wrong alignment on BattleUIReceiver_OnSelectTactics");
static_assert(sizeof(BattleUIReceiver_OnSelectTactics) == 0x000001, "Wrong size on BattleUIReceiver_OnSelectTactics");
static_assert(offsetof(BattleUIReceiver_OnSelectTactics, tactics) == 0x000000, "Member 'BattleUIReceiver_OnSelectTactics::tactics' has a wrong offset!");

// Function Nicola.BattleUIReceiver.OnSelectUnitCommand
// 0x0001 (0x0001 - 0x0000)
struct BattleUIReceiver_OnSelectUnitCommand final
{
public:
	EBattleUnitCommand                            Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleUIReceiver_OnSelectUnitCommand) == 0x000001, "Wrong alignment on BattleUIReceiver_OnSelectUnitCommand");
static_assert(sizeof(BattleUIReceiver_OnSelectUnitCommand) == 0x000001, "Wrong size on BattleUIReceiver_OnSelectUnitCommand");
static_assert(offsetof(BattleUIReceiver_OnSelectUnitCommand, Command) == 0x000000, "Member 'BattleUIReceiver_OnSelectUnitCommand::Command' has a wrong offset!");

// Function Nicola.PlayerBase.onChangedMovementMode
// 0x0010 (0x0010 - 0x0000)
struct PlayerBase_onChangedMovementMode final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 prevMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevCustomMode;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerBase_onChangedMovementMode) == 0x000008, "Wrong alignment on PlayerBase_onChangedMovementMode");
static_assert(sizeof(PlayerBase_onChangedMovementMode) == 0x000010, "Wrong size on PlayerBase_onChangedMovementMode");
static_assert(offsetof(PlayerBase_onChangedMovementMode, Character) == 0x000000, "Member 'PlayerBase_onChangedMovementMode::Character' has a wrong offset!");
static_assert(offsetof(PlayerBase_onChangedMovementMode, prevMode) == 0x000008, "Member 'PlayerBase_onChangedMovementMode::prevMode' has a wrong offset!");
static_assert(offsetof(PlayerBase_onChangedMovementMode, PrevCustomMode) == 0x000009, "Member 'PlayerBase_onChangedMovementMode::PrevCustomMode' has a wrong offset!");

// Function Nicola.PlayerBase.onUpdateMovement
// 0x001C (0x001C - 0x0000)
struct PlayerBase_onUpdateMovement final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerBase_onUpdateMovement) == 0x000004, "Wrong alignment on PlayerBase_onUpdateMovement");
static_assert(sizeof(PlayerBase_onUpdateMovement) == 0x00001C, "Wrong size on PlayerBase_onUpdateMovement");
static_assert(offsetof(PlayerBase_onUpdateMovement, Delta) == 0x000000, "Member 'PlayerBase_onUpdateMovement::Delta' has a wrong offset!");
static_assert(offsetof(PlayerBase_onUpdateMovement, OldLocation) == 0x000004, "Member 'PlayerBase_onUpdateMovement::OldLocation' has a wrong offset!");
static_assert(offsetof(PlayerBase_onUpdateMovement, OldVelocity) == 0x000010, "Member 'PlayerBase_onUpdateMovement::OldVelocity' has a wrong offset!");

// Function Nicola.PlayerBase.GetDashPerSec
// 0x0004 (0x0004 - 0x0000)
struct PlayerBase_GetDashPerSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerBase_GetDashPerSec) == 0x000004, "Wrong alignment on PlayerBase_GetDashPerSec");
static_assert(sizeof(PlayerBase_GetDashPerSec) == 0x000004, "Wrong size on PlayerBase_GetDashPerSec");
static_assert(offsetof(PlayerBase_GetDashPerSec, ReturnValue) == 0x000000, "Member 'PlayerBase_GetDashPerSec::ReturnValue' has a wrong offset!");

// Function Nicola.PlayerBase.GetMovePerSec
// 0x0004 (0x0004 - 0x0000)
struct PlayerBase_GetMovePerSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerBase_GetMovePerSec) == 0x000004, "Wrong alignment on PlayerBase_GetMovePerSec");
static_assert(sizeof(PlayerBase_GetMovePerSec) == 0x000004, "Wrong size on PlayerBase_GetMovePerSec");
static_assert(offsetof(PlayerBase_GetMovePerSec, ReturnValue) == 0x000000, "Member 'PlayerBase_GetMovePerSec::ReturnValue' has a wrong offset!");

// Function Nicola.PlayerBase.GetPartyMemberLog_Debug
// 0x0018 (0x0018 - 0x0000)
struct PlayerBase_GetPartyMemberLog_Debug final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerBase_GetPartyMemberLog_Debug) == 0x000008, "Wrong alignment on PlayerBase_GetPartyMemberLog_Debug");
static_assert(sizeof(PlayerBase_GetPartyMemberLog_Debug) == 0x000018, "Wrong size on PlayerBase_GetPartyMemberLog_Debug");
static_assert(offsetof(PlayerBase_GetPartyMemberLog_Debug, Index_0) == 0x000000, "Member 'PlayerBase_GetPartyMemberLog_Debug::Index_0' has a wrong offset!");
static_assert(offsetof(PlayerBase_GetPartyMemberLog_Debug, ReturnValue) == 0x000008, "Member 'PlayerBase_GetPartyMemberLog_Debug::ReturnValue' has a wrong offset!");

// Function Nicola.Breadcrumbman.SetPosAndAlignment
// 0x0010 (0x0010 - 0x0000)
struct Breadcrumbman_SetPosAndAlignment final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionOnMap                               dirAlignment;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionOnMap                               dirLeader;                                         // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Breadcrumbman_SetPosAndAlignment) == 0x000004, "Wrong alignment on Breadcrumbman_SetPosAndAlignment");
static_assert(sizeof(Breadcrumbman_SetPosAndAlignment) == 0x000010, "Wrong size on Breadcrumbman_SetPosAndAlignment");
static_assert(offsetof(Breadcrumbman_SetPosAndAlignment, Pos) == 0x000000, "Member 'Breadcrumbman_SetPosAndAlignment::Pos' has a wrong offset!");
static_assert(offsetof(Breadcrumbman_SetPosAndAlignment, dirAlignment) == 0x00000C, "Member 'Breadcrumbman_SetPosAndAlignment::dirAlignment' has a wrong offset!");
static_assert(offsetof(Breadcrumbman_SetPosAndAlignment, dirLeader) == 0x00000D, "Member 'Breadcrumbman_SetPosAndAlignment::dirLeader' has a wrong offset!");

// Function Nicola.Breadcrumbman.Together
// 0x000C (0x000C - 0x0000)
struct Breadcrumbman_Together final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breadcrumbman_Together) == 0x000004, "Wrong alignment on Breadcrumbman_Together");
static_assert(sizeof(Breadcrumbman_Together) == 0x00000C, "Wrong size on Breadcrumbman_Together");
static_assert(offsetof(Breadcrumbman_Together, Pos) == 0x000000, "Member 'Breadcrumbman_Together::Pos' has a wrong offset!");

// Function Nicola.NicolaManaMovieActor.onManaComponentStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct NicolaManaMovieActor_onManaComponentStatusChanged final
{
public:
	EManaComponentStatus                          InManaComponentStatus;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaManaMovieActor_onManaComponentStatusChanged) == 0x000008, "Wrong alignment on NicolaManaMovieActor_onManaComponentStatusChanged");
static_assert(sizeof(NicolaManaMovieActor_onManaComponentStatusChanged) == 0x000010, "Wrong size on NicolaManaMovieActor_onManaComponentStatusChanged");
static_assert(offsetof(NicolaManaMovieActor_onManaComponentStatusChanged, InManaComponentStatus) == 0x000000, "Member 'NicolaManaMovieActor_onManaComponentStatusChanged::InManaComponentStatus' has a wrong offset!");
static_assert(offsetof(NicolaManaMovieActor_onManaComponentStatusChanged, InManaComponent) == 0x000008, "Member 'NicolaManaMovieActor_onManaComponentStatusChanged::InManaComponent' has a wrong offset!");

// Function Nicola.BuildingWithJumpPoint.SetJumpMapLevelAndStart
// 0x0018 (0x0018 - 0x0000)
struct BuildingWithJumpPoint_SetJumpMapLevelAndStart final
{
public:
	class FName                                   jumpPointKey;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mapLevelId;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   playerStartId;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingWithJumpPoint_SetJumpMapLevelAndStart) == 0x000004, "Wrong alignment on BuildingWithJumpPoint_SetJumpMapLevelAndStart");
static_assert(sizeof(BuildingWithJumpPoint_SetJumpMapLevelAndStart) == 0x000018, "Wrong size on BuildingWithJumpPoint_SetJumpMapLevelAndStart");
static_assert(offsetof(BuildingWithJumpPoint_SetJumpMapLevelAndStart, jumpPointKey) == 0x000000, "Member 'BuildingWithJumpPoint_SetJumpMapLevelAndStart::jumpPointKey' has a wrong offset!");
static_assert(offsetof(BuildingWithJumpPoint_SetJumpMapLevelAndStart, mapLevelId) == 0x000008, "Member 'BuildingWithJumpPoint_SetJumpMapLevelAndStart::mapLevelId' has a wrong offset!");
static_assert(offsetof(BuildingWithJumpPoint_SetJumpMapLevelAndStart, playerStartId) == 0x000010, "Member 'BuildingWithJumpPoint_SetJumpMapLevelAndStart::playerStartId' has a wrong offset!");

// Function Nicola.NicolaLocalizeFL.ChangeNicolaLanguage
// 0x0002 (0x0002 - 0x0000)
struct NicolaLocalizeFL_ChangeNicolaLanguage final
{
public:
	ENicolaLanguage                               NicolaLanguage;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaLanguageChangeFlag                     NicolaLanguageChangeFlags;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLocalizeFL_ChangeNicolaLanguage) == 0x000001, "Wrong alignment on NicolaLocalizeFL_ChangeNicolaLanguage");
static_assert(sizeof(NicolaLocalizeFL_ChangeNicolaLanguage) == 0x000002, "Wrong size on NicolaLocalizeFL_ChangeNicolaLanguage");
static_assert(offsetof(NicolaLocalizeFL_ChangeNicolaLanguage, NicolaLanguage) == 0x000000, "Member 'NicolaLocalizeFL_ChangeNicolaLanguage::NicolaLanguage' has a wrong offset!");
static_assert(offsetof(NicolaLocalizeFL_ChangeNicolaLanguage, NicolaLanguageChangeFlags) == 0x000001, "Member 'NicolaLocalizeFL_ChangeNicolaLanguage::NicolaLanguageChangeFlags' has a wrong offset!");

// Function Nicola.NicolaLocalizeFL.GetCurrentLanguageText
// 0x0001 (0x0001 - 0x0000)
struct NicolaLocalizeFL_GetCurrentLanguageText final
{
public:
	ENicolaLanguage                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLocalizeFL_GetCurrentLanguageText) == 0x000001, "Wrong alignment on NicolaLocalizeFL_GetCurrentLanguageText");
static_assert(sizeof(NicolaLocalizeFL_GetCurrentLanguageText) == 0x000001, "Wrong size on NicolaLocalizeFL_GetCurrentLanguageText");
static_assert(offsetof(NicolaLocalizeFL_GetCurrentLanguageText, ReturnValue) == 0x000000, "Member 'NicolaLocalizeFL_GetCurrentLanguageText::ReturnValue' has a wrong offset!");

// Function Nicola.CommonBaseWidget.PauseAnim
// 0x000C (0x000C - 0x0000)
struct CommonBaseWidget_PauseAnim final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonBaseWidget_PauseAnim) == 0x000004, "Wrong alignment on CommonBaseWidget_PauseAnim");
static_assert(sizeof(CommonBaseWidget_PauseAnim) == 0x00000C, "Wrong size on CommonBaseWidget_PauseAnim");
static_assert(offsetof(CommonBaseWidget_PauseAnim, InAnimationName) == 0x000000, "Member 'CommonBaseWidget_PauseAnim::InAnimationName' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PauseAnim, ReturnValue) == 0x000008, "Member 'CommonBaseWidget_PauseAnim::ReturnValue' has a wrong offset!");

// Function Nicola.CommonBaseWidget.PlayAnim
// 0x0020 (0x0020 - 0x0000)
struct CommonBaseWidget_PlayAnim final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSamePrefixExclusion;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAtTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNoWarn;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonBaseWidget_PlayAnim) == 0x000004, "Wrong alignment on CommonBaseWidget_PlayAnim");
static_assert(sizeof(CommonBaseWidget_PlayAnim) == 0x000020, "Wrong size on CommonBaseWidget_PlayAnim");
static_assert(offsetof(CommonBaseWidget_PlayAnim, InAnimationName) == 0x000000, "Member 'CommonBaseWidget_PlayAnim::InAnimationName' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, bSamePrefixExclusion) == 0x000008, "Member 'CommonBaseWidget_PlayAnim::bSamePrefixExclusion' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, StartAtTime) == 0x00000C, "Member 'CommonBaseWidget_PlayAnim::StartAtTime' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, NumLoopsToPlay) == 0x000010, "Member 'CommonBaseWidget_PlayAnim::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, PlayMode) == 0x000014, "Member 'CommonBaseWidget_PlayAnim::PlayMode' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, PlaybackSpeed) == 0x000018, "Member 'CommonBaseWidget_PlayAnim::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, InNoWarn) == 0x00001C, "Member 'CommonBaseWidget_PlayAnim::InNoWarn' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnim, ReturnValue) == 0x00001D, "Member 'CommonBaseWidget_PlayAnim::ReturnValue' has a wrong offset!");

// Function Nicola.CommonBaseWidget.PlayAnimR
// 0x0020 (0x0020 - 0x0000)
struct CommonBaseWidget_PlayAnimR final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSamePrefixExclusion;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAtTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonBaseWidget_PlayAnimR) == 0x000004, "Wrong alignment on CommonBaseWidget_PlayAnimR");
static_assert(sizeof(CommonBaseWidget_PlayAnimR) == 0x000020, "Wrong size on CommonBaseWidget_PlayAnimR");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, InAnimationName) == 0x000000, "Member 'CommonBaseWidget_PlayAnimR::InAnimationName' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, bSamePrefixExclusion) == 0x000008, "Member 'CommonBaseWidget_PlayAnimR::bSamePrefixExclusion' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, StartAtTime) == 0x00000C, "Member 'CommonBaseWidget_PlayAnimR::StartAtTime' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, NumLoopsToPlay) == 0x000010, "Member 'CommonBaseWidget_PlayAnimR::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, PlayMode) == 0x000014, "Member 'CommonBaseWidget_PlayAnimR::PlayMode' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, PlaybackSpeed) == 0x000018, "Member 'CommonBaseWidget_PlayAnimR::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimR, ReturnValue) == 0x00001C, "Member 'CommonBaseWidget_PlayAnimR::ReturnValue' has a wrong offset!");

// Function Nicola.CommonBaseWidget.PlayAnimTo
// 0x0024 (0x0024 - 0x0000)
struct CommonBaseWidget_PlayAnimTo final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSamePrefixExclusion;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAtTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAtTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonBaseWidget_PlayAnimTo) == 0x000004, "Wrong alignment on CommonBaseWidget_PlayAnimTo");
static_assert(sizeof(CommonBaseWidget_PlayAnimTo) == 0x000024, "Wrong size on CommonBaseWidget_PlayAnimTo");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, InAnimationName) == 0x000000, "Member 'CommonBaseWidget_PlayAnimTo::InAnimationName' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, bSamePrefixExclusion) == 0x000008, "Member 'CommonBaseWidget_PlayAnimTo::bSamePrefixExclusion' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, StartAtTime) == 0x00000C, "Member 'CommonBaseWidget_PlayAnimTo::StartAtTime' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, EndAtTime) == 0x000010, "Member 'CommonBaseWidget_PlayAnimTo::EndAtTime' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, NumLoopsToPlay) == 0x000014, "Member 'CommonBaseWidget_PlayAnimTo::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, PlayMode) == 0x000018, "Member 'CommonBaseWidget_PlayAnimTo::PlayMode' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, PlaybackSpeed) == 0x00001C, "Member 'CommonBaseWidget_PlayAnimTo::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_PlayAnimTo, ReturnValue) == 0x000020, "Member 'CommonBaseWidget_PlayAnimTo::ReturnValue' has a wrong offset!");

// Function Nicola.CommonBaseWidget.StopAnim
// 0x000C (0x000C - 0x0000)
struct CommonBaseWidget_StopAnim final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonBaseWidget_StopAnim) == 0x000004, "Wrong alignment on CommonBaseWidget_StopAnim");
static_assert(sizeof(CommonBaseWidget_StopAnim) == 0x00000C, "Wrong size on CommonBaseWidget_StopAnim");
static_assert(offsetof(CommonBaseWidget_StopAnim, InAnimationName) == 0x000000, "Member 'CommonBaseWidget_StopAnim::InAnimationName' has a wrong offset!");
static_assert(offsetof(CommonBaseWidget_StopAnim, ReturnValue) == 0x000008, "Member 'CommonBaseWidget_StopAnim::ReturnValue' has a wrong offset!");

// Function Nicola.LuaBlueprints.RunLua
// 0x0008 (0x0008 - 0x0000)
struct LuaBlueprints_RunLua final
{
public:
	const class ULuaAsset*                        LuaAsset;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaBlueprints_RunLua) == 0x000008, "Wrong alignment on LuaBlueprints_RunLua");
static_assert(sizeof(LuaBlueprints_RunLua) == 0x000008, "Wrong size on LuaBlueprints_RunLua");
static_assert(offsetof(LuaBlueprints_RunLua, LuaAsset) == 0x000000, "Member 'LuaBlueprints_RunLua::LuaAsset' has a wrong offset!");

// Function Nicola.CaptureSubsystem.GetCaptureTexture
// 0x0008 (0x0008 - 0x0000)
struct CaptureSubsystem_GetCaptureTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureSubsystem_GetCaptureTexture) == 0x000008, "Wrong alignment on CaptureSubsystem_GetCaptureTexture");
static_assert(sizeof(CaptureSubsystem_GetCaptureTexture) == 0x000008, "Wrong size on CaptureSubsystem_GetCaptureTexture");
static_assert(offsetof(CaptureSubsystem_GetCaptureTexture, ReturnValue) == 0x000000, "Member 'CaptureSubsystem_GetCaptureTexture::ReturnValue' has a wrong offset!");

// Function Nicola.CaptureSubsystem.LoadTextureByteData
// 0x0010 (0x0010 - 0x0000)
struct CaptureSubsystem_LoadTextureByteData final
{
public:
	int32                                         captureNo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureSubsystem_LoadTextureByteData) == 0x000008, "Wrong alignment on CaptureSubsystem_LoadTextureByteData");
static_assert(sizeof(CaptureSubsystem_LoadTextureByteData) == 0x000010, "Wrong size on CaptureSubsystem_LoadTextureByteData");
static_assert(offsetof(CaptureSubsystem_LoadTextureByteData, captureNo) == 0x000000, "Member 'CaptureSubsystem_LoadTextureByteData::captureNo' has a wrong offset!");
static_assert(offsetof(CaptureSubsystem_LoadTextureByteData, ReturnValue) == 0x000008, "Member 'CaptureSubsystem_LoadTextureByteData::ReturnValue' has a wrong offset!");

// Function Nicola.CaptureSubsystem.OnComplateSaveTexture
// 0x0001 (0x0001 - 0x0000)
struct CaptureSubsystem_OnComplateSaveTexture final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureSubsystem_OnComplateSaveTexture) == 0x000001, "Wrong alignment on CaptureSubsystem_OnComplateSaveTexture");
static_assert(sizeof(CaptureSubsystem_OnComplateSaveTexture) == 0x000001, "Wrong size on CaptureSubsystem_OnComplateSaveTexture");
static_assert(offsetof(CaptureSubsystem_OnComplateSaveTexture, bSuccess) == 0x000000, "Member 'CaptureSubsystem_OnComplateSaveTexture::bSuccess' has a wrong offset!");

// Function Nicola.LuaScriptMgr.BP_ReloadRequestExecuteEvent
// 0x0001 (0x0001 - 0x0000)
struct LuaScriptMgr_BP_ReloadRequestExecuteEvent final
{
public:
	bool                                          bBaseScriptReload;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaScriptMgr_BP_ReloadRequestExecuteEvent) == 0x000001, "Wrong alignment on LuaScriptMgr_BP_ReloadRequestExecuteEvent");
static_assert(sizeof(LuaScriptMgr_BP_ReloadRequestExecuteEvent) == 0x000001, "Wrong size on LuaScriptMgr_BP_ReloadRequestExecuteEvent");
static_assert(offsetof(LuaScriptMgr_BP_ReloadRequestExecuteEvent, bBaseScriptReload) == 0x000000, "Member 'LuaScriptMgr_BP_ReloadRequestExecuteEvent::bBaseScriptReload' has a wrong offset!");

// Function Nicola.LuaScriptMgr.BP_RequestExecuteEvent
// 0x0018 (0x0018 - 0x0000)
struct LuaScriptMgr_BP_RequestExecuteEvent final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   luaFileName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   luaEventName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaScriptMgr_BP_RequestExecuteEvent) == 0x000004, "Wrong alignment on LuaScriptMgr_BP_RequestExecuteEvent");
static_assert(sizeof(LuaScriptMgr_BP_RequestExecuteEvent) == 0x000018, "Wrong size on LuaScriptMgr_BP_RequestExecuteEvent");
static_assert(offsetof(LuaScriptMgr_BP_RequestExecuteEvent, MapName) == 0x000000, "Member 'LuaScriptMgr_BP_RequestExecuteEvent::MapName' has a wrong offset!");
static_assert(offsetof(LuaScriptMgr_BP_RequestExecuteEvent, luaFileName) == 0x000008, "Member 'LuaScriptMgr_BP_RequestExecuteEvent::luaFileName' has a wrong offset!");
static_assert(offsetof(LuaScriptMgr_BP_RequestExecuteEvent, luaEventName) == 0x000010, "Member 'LuaScriptMgr_BP_RequestExecuteEvent::luaEventName' has a wrong offset!");

// Function Nicola.LuaScriptMgr.GetFlagList
// 0x0010 (0x0010 - 0x0000)
struct LuaScriptMgr_GetFlagList final
{
public:
	TArray<class UDebugMenuFlag*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaScriptMgr_GetFlagList) == 0x000008, "Wrong alignment on LuaScriptMgr_GetFlagList");
static_assert(sizeof(LuaScriptMgr_GetFlagList) == 0x000010, "Wrong size on LuaScriptMgr_GetFlagList");
static_assert(offsetof(LuaScriptMgr_GetFlagList, ReturnValue) == 0x000000, "Member 'LuaScriptMgr_GetFlagList::ReturnValue' has a wrong offset!");

// Function Nicola.LuaScriptMgr.GetTriggerList
// 0x0010 (0x0010 - 0x0000)
struct LuaScriptMgr_GetTriggerList final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaScriptMgr_GetTriggerList) == 0x000008, "Wrong alignment on LuaScriptMgr_GetTriggerList");
static_assert(sizeof(LuaScriptMgr_GetTriggerList) == 0x000010, "Wrong size on LuaScriptMgr_GetTriggerList");
static_assert(offsetof(LuaScriptMgr_GetTriggerList, ReturnValue) == 0x000000, "Member 'LuaScriptMgr_GetTriggerList::ReturnValue' has a wrong offset!");

// Function Nicola.LuaScriptMgr.BP_ReloadBaseScript
// 0x000C (0x000C - 0x0000)
struct LuaScriptMgr_BP_ReloadBaseScript final
{
public:
	class FName                                   BaseScriptName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LuaScriptMgr_BP_ReloadBaseScript) == 0x000004, "Wrong alignment on LuaScriptMgr_BP_ReloadBaseScript");
static_assert(sizeof(LuaScriptMgr_BP_ReloadBaseScript) == 0x00000C, "Wrong size on LuaScriptMgr_BP_ReloadBaseScript");
static_assert(offsetof(LuaScriptMgr_BP_ReloadBaseScript, BaseScriptName) == 0x000000, "Member 'LuaScriptMgr_BP_ReloadBaseScript::BaseScriptName' has a wrong offset!");
static_assert(offsetof(LuaScriptMgr_BP_ReloadBaseScript, ReturnValue) == 0x000008, "Member 'LuaScriptMgr_BP_ReloadBaseScript::ReturnValue' has a wrong offset!");

// Function Nicola.LuaScriptMgr.BP_RequestExecuteTrigger
// 0x0008 (0x0008 - 0x0000)
struct LuaScriptMgr_BP_RequestExecuteTrigger final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaScriptMgr_BP_RequestExecuteTrigger) == 0x000004, "Wrong alignment on LuaScriptMgr_BP_RequestExecuteTrigger");
static_assert(sizeof(LuaScriptMgr_BP_RequestExecuteTrigger) == 0x000008, "Wrong size on LuaScriptMgr_BP_RequestExecuteTrigger");
static_assert(offsetof(LuaScriptMgr_BP_RequestExecuteTrigger, TriggerName) == 0x000000, "Member 'LuaScriptMgr_BP_RequestExecuteTrigger::TriggerName' has a wrong offset!");

// Function Nicola.LuaScriptMgr.BP_RequestReoadLevelScript
// 0x0008 (0x0008 - 0x0000)
struct LuaScriptMgr_BP_RequestReoadLevelScript final
{
public:
	class FName                                   szLuaFileName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaScriptMgr_BP_RequestReoadLevelScript) == 0x000004, "Wrong alignment on LuaScriptMgr_BP_RequestReoadLevelScript");
static_assert(sizeof(LuaScriptMgr_BP_RequestReoadLevelScript) == 0x000008, "Wrong size on LuaScriptMgr_BP_RequestReoadLevelScript");
static_assert(offsetof(LuaScriptMgr_BP_RequestReoadLevelScript, szLuaFileName) == 0x000000, "Member 'LuaScriptMgr_BP_RequestReoadLevelScript::szLuaFileName' has a wrong offset!");

// Function Nicola.DebugBattleLocationWidget.UpdateLocationText
// 0x0008 (0x0008 - 0x0000)
struct DebugBattleLocationWidget_UpdateLocationText final
{
public:
	class ABattleCameraControl*                   battleCameraControll;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugBattleLocationWidget_UpdateLocationText) == 0x000008, "Wrong alignment on DebugBattleLocationWidget_UpdateLocationText");
static_assert(sizeof(DebugBattleLocationWidget_UpdateLocationText) == 0x000008, "Wrong size on DebugBattleLocationWidget_UpdateLocationText");
static_assert(offsetof(DebugBattleLocationWidget_UpdateLocationText, battleCameraControll) == 0x000000, "Member 'DebugBattleLocationWidget_UpdateLocationText::battleCameraControll' has a wrong offset!");

// Function Nicola.DebugMenuCategoryData.GetItems
// 0x0010 (0x0010 - 0x0000)
struct DebugMenuCategoryData_GetItems final
{
public:
	TArray<struct FDebugMenuCustomItem>           outItems;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuCategoryData_GetItems) == 0x000008, "Wrong alignment on DebugMenuCategoryData_GetItems");
static_assert(sizeof(DebugMenuCategoryData_GetItems) == 0x000010, "Wrong size on DebugMenuCategoryData_GetItems");
static_assert(offsetof(DebugMenuCategoryData_GetItems, outItems) == 0x000000, "Member 'DebugMenuCategoryData_GetItems::outItems' has a wrong offset!");

// Function Nicola.DebugMenuFL.ExecCommandByName
// 0x0020 (0x0020 - 0x0000)
struct DebugMenuFL_ExecCommandByName final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_ExecCommandByName) == 0x000008, "Wrong alignment on DebugMenuFL_ExecCommandByName");
static_assert(sizeof(DebugMenuFL_ExecCommandByName) == 0x000020, "Wrong size on DebugMenuFL_ExecCommandByName");
static_assert(offsetof(DebugMenuFL_ExecCommandByName, Category) == 0x000000, "Member 'DebugMenuFL_ExecCommandByName::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandByName, Name_0) == 0x000010, "Member 'DebugMenuFL_ExecCommandByName::Name_0' has a wrong offset!");

// Function Nicola.DebugMenuFL.ExecCommandChangeSelectItemByName
// 0x0028 (0x0028 - 0x0000)
struct DebugMenuFL_ExecCommandChangeSelectItemByName final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuFL_ExecCommandChangeSelectItemByName) == 0x000008, "Wrong alignment on DebugMenuFL_ExecCommandChangeSelectItemByName");
static_assert(sizeof(DebugMenuFL_ExecCommandChangeSelectItemByName) == 0x000028, "Wrong size on DebugMenuFL_ExecCommandChangeSelectItemByName");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeSelectItemByName, Category) == 0x000000, "Member 'DebugMenuFL_ExecCommandChangeSelectItemByName::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeSelectItemByName, Name_0) == 0x000010, "Member 'DebugMenuFL_ExecCommandChangeSelectItemByName::Name_0' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeSelectItemByName, Index_0) == 0x000020, "Member 'DebugMenuFL_ExecCommandChangeSelectItemByName::Index_0' has a wrong offset!");

// Function Nicola.DebugMenuFL.ExecCommandChangeToggleByName
// 0x0028 (0x0028 - 0x0000)
struct DebugMenuFL_ExecCommandChangeToggleByName final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flag;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuFL_ExecCommandChangeToggleByName) == 0x000008, "Wrong alignment on DebugMenuFL_ExecCommandChangeToggleByName");
static_assert(sizeof(DebugMenuFL_ExecCommandChangeToggleByName) == 0x000028, "Wrong size on DebugMenuFL_ExecCommandChangeToggleByName");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeToggleByName, Category) == 0x000000, "Member 'DebugMenuFL_ExecCommandChangeToggleByName::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeToggleByName, Name_0) == 0x000010, "Member 'DebugMenuFL_ExecCommandChangeToggleByName::Name_0' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeToggleByName, flag) == 0x000020, "Member 'DebugMenuFL_ExecCommandChangeToggleByName::flag' has a wrong offset!");

// Function Nicola.DebugMenuFL.ExecCommandChangeValueByName
// 0x0028 (0x0028 - 0x0000)
struct DebugMenuFL_ExecCommandChangeValueByName final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuFL_ExecCommandChangeValueByName) == 0x000008, "Wrong alignment on DebugMenuFL_ExecCommandChangeValueByName");
static_assert(sizeof(DebugMenuFL_ExecCommandChangeValueByName) == 0x000028, "Wrong size on DebugMenuFL_ExecCommandChangeValueByName");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeValueByName, Category) == 0x000000, "Member 'DebugMenuFL_ExecCommandChangeValueByName::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeValueByName, Name_0) == 0x000010, "Member 'DebugMenuFL_ExecCommandChangeValueByName::Name_0' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_ExecCommandChangeValueByName, Value) == 0x000020, "Member 'DebugMenuFL_ExecCommandChangeValueByName::Value' has a wrong offset!");

// Function Nicola.DebugMenuFL.OnCloseDebugMenu
// 0x0010 (0x0010 - 0x0000)
struct DebugMenuFL_OnCloseDebugMenu final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_OnCloseDebugMenu) == 0x000008, "Wrong alignment on DebugMenuFL_OnCloseDebugMenu");
static_assert(sizeof(DebugMenuFL_OnCloseDebugMenu) == 0x000010, "Wrong size on DebugMenuFL_OnCloseDebugMenu");
static_assert(offsetof(DebugMenuFL_OnCloseDebugMenu, Category) == 0x000000, "Member 'DebugMenuFL_OnCloseDebugMenu::Category' has a wrong offset!");

// Function Nicola.DebugMenuFL.OnGetCheckBoxState
// 0x0028 (0x0028 - 0x0000)
struct DebugMenuFL_OnGetCheckBoxState final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutValue;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuFL_OnGetCheckBoxState) == 0x000008, "Wrong alignment on DebugMenuFL_OnGetCheckBoxState");
static_assert(sizeof(DebugMenuFL_OnGetCheckBoxState) == 0x000028, "Wrong size on DebugMenuFL_OnGetCheckBoxState");
static_assert(offsetof(DebugMenuFL_OnGetCheckBoxState, Category) == 0x000000, "Member 'DebugMenuFL_OnGetCheckBoxState::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnGetCheckBoxState, Name_0) == 0x000010, "Member 'DebugMenuFL_OnGetCheckBoxState::Name_0' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnGetCheckBoxState, OutValue) == 0x000020, "Member 'DebugMenuFL_OnGetCheckBoxState::OutValue' has a wrong offset!");

// Function Nicola.DebugMenuFL.OnGetSelectItem
// 0x0038 (0x0038 - 0x0000)
struct DebugMenuFL_OnGetSelectItem final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           outItems;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuFL_OnGetSelectItem) == 0x000008, "Wrong alignment on DebugMenuFL_OnGetSelectItem");
static_assert(sizeof(DebugMenuFL_OnGetSelectItem) == 0x000038, "Wrong size on DebugMenuFL_OnGetSelectItem");
static_assert(offsetof(DebugMenuFL_OnGetSelectItem, Category) == 0x000000, "Member 'DebugMenuFL_OnGetSelectItem::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnGetSelectItem, Name_0) == 0x000010, "Member 'DebugMenuFL_OnGetSelectItem::Name_0' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnGetSelectItem, outItems) == 0x000020, "Member 'DebugMenuFL_OnGetSelectItem::outItems' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnGetSelectItem, OutIndex) == 0x000030, "Member 'DebugMenuFL_OnGetSelectItem::OutIndex' has a wrong offset!");

// Function Nicola.DebugMenuFL.OnInitSpinValue
// 0x0038 (0x0038 - 0x0000)
struct DebugMenuFL_OnInitSpinValue final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         outMin;                                            // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         outMax;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         outFixedPointColumn;                               // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          outLoop;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuFL_OnInitSpinValue) == 0x000008, "Wrong alignment on DebugMenuFL_OnInitSpinValue");
static_assert(sizeof(DebugMenuFL_OnInitSpinValue) == 0x000038, "Wrong size on DebugMenuFL_OnInitSpinValue");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, Category) == 0x000000, "Member 'DebugMenuFL_OnInitSpinValue::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, Name_0) == 0x000010, "Member 'DebugMenuFL_OnInitSpinValue::Name_0' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, OutValue) == 0x000020, "Member 'DebugMenuFL_OnInitSpinValue::OutValue' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, outMin) == 0x000024, "Member 'DebugMenuFL_OnInitSpinValue::outMin' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, outMax) == 0x000028, "Member 'DebugMenuFL_OnInitSpinValue::outMax' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, outFixedPointColumn) == 0x00002C, "Member 'DebugMenuFL_OnInitSpinValue::outFixedPointColumn' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnInitSpinValue, outLoop) == 0x000030, "Member 'DebugMenuFL_OnInitSpinValue::outLoop' has a wrong offset!");

// Function Nicola.DebugMenuFL.OnOpenDebugMenu
// 0x0018 (0x0018 - 0x0000)
struct DebugMenuFL_OnOpenDebugMenu final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDebugMenuCategoryData*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_OnOpenDebugMenu) == 0x000008, "Wrong alignment on DebugMenuFL_OnOpenDebugMenu");
static_assert(sizeof(DebugMenuFL_OnOpenDebugMenu) == 0x000018, "Wrong size on DebugMenuFL_OnOpenDebugMenu");
static_assert(offsetof(DebugMenuFL_OnOpenDebugMenu, Category) == 0x000000, "Member 'DebugMenuFL_OnOpenDebugMenu::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_OnOpenDebugMenu, ReturnValue) == 0x000010, "Member 'DebugMenuFL_OnOpenDebugMenu::ReturnValue' has a wrong offset!");

// Function Nicola.DebugMenuFL.RegisterDebugMenuCloseAllMenu
// 0x0020 (0x0020 - 0x0000)
struct DebugMenuFL_RegisterDebugMenuCloseAllMenu final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             closeAllMenuDelegate;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_RegisterDebugMenuCloseAllMenu) == 0x000008, "Wrong alignment on DebugMenuFL_RegisterDebugMenuCloseAllMenu");
static_assert(sizeof(DebugMenuFL_RegisterDebugMenuCloseAllMenu) == 0x000020, "Wrong size on DebugMenuFL_RegisterDebugMenuCloseAllMenu");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuCloseAllMenu, Category) == 0x000000, "Member 'DebugMenuFL_RegisterDebugMenuCloseAllMenu::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuCloseAllMenu, closeAllMenuDelegate) == 0x000010, "Member 'DebugMenuFL_RegisterDebugMenuCloseAllMenu::closeAllMenuDelegate' has a wrong offset!");

// Function Nicola.DebugMenuFL.RegisterDebugMenuCloseMenu
// 0x0020 (0x0020 - 0x0000)
struct DebugMenuFL_RegisterDebugMenuCloseMenu final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             closeThisMenuDelegate;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_RegisterDebugMenuCloseMenu) == 0x000008, "Wrong alignment on DebugMenuFL_RegisterDebugMenuCloseMenu");
static_assert(sizeof(DebugMenuFL_RegisterDebugMenuCloseMenu) == 0x000020, "Wrong size on DebugMenuFL_RegisterDebugMenuCloseMenu");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuCloseMenu, Category) == 0x000000, "Member 'DebugMenuFL_RegisterDebugMenuCloseMenu::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuCloseMenu, closeThisMenuDelegate) == 0x000010, "Member 'DebugMenuFL_RegisterDebugMenuCloseMenu::closeThisMenuDelegate' has a wrong offset!");

// Function Nicola.DebugMenuFL.RegisterDebugMenuGetSelectIndex
// 0x0020 (0x0020 - 0x0000)
struct DebugMenuFL_RegisterDebugMenuGetSelectIndex final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             menuDelegate;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_RegisterDebugMenuGetSelectIndex) == 0x000008, "Wrong alignment on DebugMenuFL_RegisterDebugMenuGetSelectIndex");
static_assert(sizeof(DebugMenuFL_RegisterDebugMenuGetSelectIndex) == 0x000020, "Wrong size on DebugMenuFL_RegisterDebugMenuGetSelectIndex");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuGetSelectIndex, Category) == 0x000000, "Member 'DebugMenuFL_RegisterDebugMenuGetSelectIndex::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuGetSelectIndex, menuDelegate) == 0x000010, "Member 'DebugMenuFL_RegisterDebugMenuGetSelectIndex::menuDelegate' has a wrong offset!");

// Function Nicola.DebugMenuFL.RegisterDebugMenuOpenSubMenu
// 0x0020 (0x0020 - 0x0000)
struct DebugMenuFL_RegisterDebugMenuOpenSubMenu final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Category)> openSubMenuDelegate;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_RegisterDebugMenuOpenSubMenu) == 0x000008, "Wrong alignment on DebugMenuFL_RegisterDebugMenuOpenSubMenu");
static_assert(sizeof(DebugMenuFL_RegisterDebugMenuOpenSubMenu) == 0x000020, "Wrong size on DebugMenuFL_RegisterDebugMenuOpenSubMenu");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuOpenSubMenu, Category) == 0x000000, "Member 'DebugMenuFL_RegisterDebugMenuOpenSubMenu::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuOpenSubMenu, openSubMenuDelegate) == 0x000010, "Member 'DebugMenuFL_RegisterDebugMenuOpenSubMenu::openSubMenuDelegate' has a wrong offset!");

// Function Nicola.DebugMenuFL.RegisterDebugMenuSetSelectIndex
// 0x0020 (0x0020 - 0x0000)
struct DebugMenuFL_RegisterDebugMenuSetSelectIndex final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Index)>                  menuDelegate;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuFL_RegisterDebugMenuSetSelectIndex) == 0x000008, "Wrong alignment on DebugMenuFL_RegisterDebugMenuSetSelectIndex");
static_assert(sizeof(DebugMenuFL_RegisterDebugMenuSetSelectIndex) == 0x000020, "Wrong size on DebugMenuFL_RegisterDebugMenuSetSelectIndex");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuSetSelectIndex, Category) == 0x000000, "Member 'DebugMenuFL_RegisterDebugMenuSetSelectIndex::Category' has a wrong offset!");
static_assert(offsetof(DebugMenuFL_RegisterDebugMenuSetSelectIndex, menuDelegate) == 0x000010, "Member 'DebugMenuFL_RegisterDebugMenuSetSelectIndex::menuDelegate' has a wrong offset!");

// Function Nicola.MapTimeManager.DebugSetMapTime
// 0x0004 (0x0004 - 0x0000)
struct MapTimeManager_DebugSetMapTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeManager_DebugSetMapTime) == 0x000004, "Wrong alignment on MapTimeManager_DebugSetMapTime");
static_assert(sizeof(MapTimeManager_DebugSetMapTime) == 0x000004, "Wrong size on MapTimeManager_DebugSetMapTime");
static_assert(offsetof(MapTimeManager_DebugSetMapTime, Time) == 0x000000, "Member 'MapTimeManager_DebugSetMapTime::Time' has a wrong offset!");

// Function Nicola.MapTimeManager.GetMapTimeForBP
// 0x0008 (0x0008 - 0x0000)
struct MapTimeManager_GetMapTimeForBP final
{
public:
	struct FMapTimeForBP                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeManager_GetMapTimeForBP) == 0x000004, "Wrong alignment on MapTimeManager_GetMapTimeForBP");
static_assert(sizeof(MapTimeManager_GetMapTimeForBP) == 0x000008, "Wrong size on MapTimeManager_GetMapTimeForBP");
static_assert(offsetof(MapTimeManager_GetMapTimeForBP, ReturnValue) == 0x000000, "Member 'MapTimeManager_GetMapTimeForBP::ReturnValue' has a wrong offset!");

// Function Nicola.DLCBoxEvent.OnEndDLCBoxEffect
// 0x0001 (0x0001 - 0x0000)
struct DLCBoxEvent_OnEndDLCBoxEffect final
{
public:
	bool                                          IsEndPlay;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLCBoxEvent_OnEndDLCBoxEffect) == 0x000001, "Wrong alignment on DLCBoxEvent_OnEndDLCBoxEffect");
static_assert(sizeof(DLCBoxEvent_OnEndDLCBoxEffect) == 0x000001, "Wrong size on DLCBoxEvent_OnEndDLCBoxEffect");
static_assert(offsetof(DLCBoxEvent_OnEndDLCBoxEffect, IsEndPlay) == 0x000000, "Member 'DLCBoxEvent_OnEndDLCBoxEffect::IsEndPlay' has a wrong offset!");

// Function Nicola.DLCBoxEvent.OnStartDLCBoxEffect
// 0x0001 (0x0001 - 0x0000)
struct DLCBoxEvent_OnStartDLCBoxEffect final
{
public:
	bool                                          IsBeginPlay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLCBoxEvent_OnStartDLCBoxEffect) == 0x000001, "Wrong alignment on DLCBoxEvent_OnStartDLCBoxEffect");
static_assert(sizeof(DLCBoxEvent_OnStartDLCBoxEffect) == 0x000001, "Wrong size on DLCBoxEvent_OnStartDLCBoxEffect");
static_assert(offsetof(DLCBoxEvent_OnStartDLCBoxEffect, IsBeginPlay) == 0x000000, "Member 'DLCBoxEvent_OnStartDLCBoxEffect::IsBeginPlay' has a wrong offset!");

// Function Nicola.MapParameterCollectionManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct MapParameterCollectionManager_GetInstance final
{
public:
	class UMapParameterCollectionManager*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapParameterCollectionManager_GetInstance) == 0x000008, "Wrong alignment on MapParameterCollectionManager_GetInstance");
static_assert(sizeof(MapParameterCollectionManager_GetInstance) == 0x000008, "Wrong size on MapParameterCollectionManager_GetInstance");
static_assert(offsetof(MapParameterCollectionManager_GetInstance, ReturnValue) == 0x000000, "Member 'MapParameterCollectionManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.MangaIconActorBase.ShowMangaIcon
// 0x0008 (0x0008 - 0x0000)
struct MangaIconActorBase_ShowMangaIcon final
{
public:
	class FName                                   IconID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangaIconActorBase_ShowMangaIcon) == 0x000004, "Wrong alignment on MangaIconActorBase_ShowMangaIcon");
static_assert(sizeof(MangaIconActorBase_ShowMangaIcon) == 0x000008, "Wrong size on MangaIconActorBase_ShowMangaIcon");
static_assert(offsetof(MangaIconActorBase_ShowMangaIcon, IconID) == 0x000000, "Member 'MangaIconActorBase_ShowMangaIcon::IconID' has a wrong offset!");

// Function Nicola.EffectFL.SpawnEffectByGopId
// 0x002C (0x002C - 0x0000)
struct EffectFL_SpawnEffectByGopId final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectFL_SpawnEffectByGopId) == 0x000004, "Wrong alignment on EffectFL_SpawnEffectByGopId");
static_assert(sizeof(EffectFL_SpawnEffectByGopId) == 0x00002C, "Wrong size on EffectFL_SpawnEffectByGopId");
static_assert(offsetof(EffectFL_SpawnEffectByGopId, GopId) == 0x000000, "Member 'EffectFL_SpawnEffectByGopId::GopId' has a wrong offset!");
static_assert(offsetof(EffectFL_SpawnEffectByGopId, Location) == 0x000008, "Member 'EffectFL_SpawnEffectByGopId::Location' has a wrong offset!");
static_assert(offsetof(EffectFL_SpawnEffectByGopId, Rotator) == 0x000014, "Member 'EffectFL_SpawnEffectByGopId::Rotator' has a wrong offset!");
static_assert(offsetof(EffectFL_SpawnEffectByGopId, Scale) == 0x000020, "Member 'EffectFL_SpawnEffectByGopId::Scale' has a wrong offset!");

// Function Nicola.EventCommandInterface.GetScriptInfo
// 0x0030 (0x0030 - 0x0000)
struct EventCommandInterface_GetScriptInfo final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TagList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Args;                                              // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCommandInterface_GetScriptInfo) == 0x000008, "Wrong alignment on EventCommandInterface_GetScriptInfo");
static_assert(sizeof(EventCommandInterface_GetScriptInfo) == 0x000030, "Wrong size on EventCommandInterface_GetScriptInfo");
static_assert(offsetof(EventCommandInterface_GetScriptInfo, CommandName) == 0x000000, "Member 'EventCommandInterface_GetScriptInfo::CommandName' has a wrong offset!");
static_assert(offsetof(EventCommandInterface_GetScriptInfo, TagList) == 0x000010, "Member 'EventCommandInterface_GetScriptInfo::TagList' has a wrong offset!");
static_assert(offsetof(EventCommandInterface_GetScriptInfo, Args) == 0x000020, "Member 'EventCommandInterface_GetScriptInfo::Args' has a wrong offset!");

// Function Nicola.EventCommandInterface.ExistScriptCommand
// 0x0001 (0x0001 - 0x0000)
struct EventCommandInterface_ExistScriptCommand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCommandInterface_ExistScriptCommand) == 0x000001, "Wrong alignment on EventCommandInterface_ExistScriptCommand");
static_assert(sizeof(EventCommandInterface_ExistScriptCommand) == 0x000001, "Wrong size on EventCommandInterface_ExistScriptCommand");
static_assert(offsetof(EventCommandInterface_ExistScriptCommand, ReturnValue) == 0x000000, "Member 'EventCommandInterface_ExistScriptCommand::ReturnValue' has a wrong offset!");

// Function Nicola.ProduceSequencerMessage.PlayMessage
// 0x0010 (0x0010 - 0x0000)
struct ProduceSequencerMessage_PlayMessage final
{
public:
	class FString                                 MessageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerMessage_PlayMessage) == 0x000008, "Wrong alignment on ProduceSequencerMessage_PlayMessage");
static_assert(sizeof(ProduceSequencerMessage_PlayMessage) == 0x000010, "Wrong size on ProduceSequencerMessage_PlayMessage");
static_assert(offsetof(ProduceSequencerMessage_PlayMessage, MessageId) == 0x000000, "Member 'ProduceSequencerMessage_PlayMessage::MessageId' has a wrong offset!");

// Function Nicola.NicolaDebugFL.GetMemoryInfoString
// 0x0020 (0x0020 - 0x0000)
struct NicolaDebugFL_GetMemoryInfoString final
{
public:
	class FString                                 outUsed;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 outAvailable;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugFL_GetMemoryInfoString) == 0x000008, "Wrong alignment on NicolaDebugFL_GetMemoryInfoString");
static_assert(sizeof(NicolaDebugFL_GetMemoryInfoString) == 0x000020, "Wrong size on NicolaDebugFL_GetMemoryInfoString");
static_assert(offsetof(NicolaDebugFL_GetMemoryInfoString, outUsed) == 0x000000, "Member 'NicolaDebugFL_GetMemoryInfoString::outUsed' has a wrong offset!");
static_assert(offsetof(NicolaDebugFL_GetMemoryInfoString, outAvailable) == 0x000010, "Member 'NicolaDebugFL_GetMemoryInfoString::outAvailable' has a wrong offset!");

// Function Nicola.NicolaDebugFL.OnChangeDebugActionFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugFL_OnChangeDebugActionFlag final
{
public:
	EDebugActionFlags                             DebugActionFlag;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugFL_OnChangeDebugActionFlag) == 0x000001, "Wrong alignment on NicolaDebugFL_OnChangeDebugActionFlag");
static_assert(sizeof(NicolaDebugFL_OnChangeDebugActionFlag) == 0x000001, "Wrong size on NicolaDebugFL_OnChangeDebugActionFlag");
static_assert(offsetof(NicolaDebugFL_OnChangeDebugActionFlag, DebugActionFlag) == 0x000000, "Member 'NicolaDebugFL_OnChangeDebugActionFlag::DebugActionFlag' has a wrong offset!");

// Function Nicola.NicolaDebugFL.OnChangeDebugEtcFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugFL_OnChangeDebugEtcFlag final
{
public:
	EDebugEtcFlags                                DebugEtcFlag;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugFL_OnChangeDebugEtcFlag) == 0x000001, "Wrong alignment on NicolaDebugFL_OnChangeDebugEtcFlag");
static_assert(sizeof(NicolaDebugFL_OnChangeDebugEtcFlag) == 0x000001, "Wrong size on NicolaDebugFL_OnChangeDebugEtcFlag");
static_assert(offsetof(NicolaDebugFL_OnChangeDebugEtcFlag, DebugEtcFlag) == 0x000000, "Member 'NicolaDebugFL_OnChangeDebugEtcFlag::DebugEtcFlag' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.GetDebugMangaIconOffsetHeight
// 0x0004 (0x0004 - 0x0000)
struct EventMangaIconComponent_GetDebugMangaIconOffsetHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_GetDebugMangaIconOffsetHeight) == 0x000004, "Wrong alignment on EventMangaIconComponent_GetDebugMangaIconOffsetHeight");
static_assert(sizeof(EventMangaIconComponent_GetDebugMangaIconOffsetHeight) == 0x000004, "Wrong size on EventMangaIconComponent_GetDebugMangaIconOffsetHeight");
static_assert(offsetof(EventMangaIconComponent_GetDebugMangaIconOffsetHeight, ReturnValue) == 0x000000, "Member 'EventMangaIconComponent_GetDebugMangaIconOffsetHeight::ReturnValue' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.GetDebugManpuBaseScale
// 0x0004 (0x0004 - 0x0000)
struct EventMangaIconComponent_GetDebugManpuBaseScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_GetDebugManpuBaseScale) == 0x000004, "Wrong alignment on EventMangaIconComponent_GetDebugManpuBaseScale");
static_assert(sizeof(EventMangaIconComponent_GetDebugManpuBaseScale) == 0x000004, "Wrong size on EventMangaIconComponent_GetDebugManpuBaseScale");
static_assert(offsetof(EventMangaIconComponent_GetDebugManpuBaseScale, ReturnValue) == 0x000000, "Member 'EventMangaIconComponent_GetDebugManpuBaseScale::ReturnValue' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.GetDebugMenuManpuId
// 0x000C (0x000C - 0x0000)
struct EventMangaIconComponent_GetDebugMenuManpuId final
{
public:
	class FName                                   OutId;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventMangaIconComponent_GetDebugMenuManpuId) == 0x000004, "Wrong alignment on EventMangaIconComponent_GetDebugMenuManpuId");
static_assert(sizeof(EventMangaIconComponent_GetDebugMenuManpuId) == 0x00000C, "Wrong size on EventMangaIconComponent_GetDebugMenuManpuId");
static_assert(offsetof(EventMangaIconComponent_GetDebugMenuManpuId, OutId) == 0x000000, "Member 'EventMangaIconComponent_GetDebugMenuManpuId::OutId' has a wrong offset!");
static_assert(offsetof(EventMangaIconComponent_GetDebugMenuManpuId, ReturnValue) == 0x000008, "Member 'EventMangaIconComponent_GetDebugMenuManpuId::ReturnValue' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.IsEnableDebugIconBaseScale
// 0x0001 (0x0001 - 0x0000)
struct EventMangaIconComponent_IsEnableDebugIconBaseScale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_IsEnableDebugIconBaseScale) == 0x000001, "Wrong alignment on EventMangaIconComponent_IsEnableDebugIconBaseScale");
static_assert(sizeof(EventMangaIconComponent_IsEnableDebugIconBaseScale) == 0x000001, "Wrong size on EventMangaIconComponent_IsEnableDebugIconBaseScale");
static_assert(offsetof(EventMangaIconComponent_IsEnableDebugIconBaseScale, ReturnValue) == 0x000000, "Member 'EventMangaIconComponent_IsEnableDebugIconBaseScale::ReturnValue' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.IsEnableDebugMangaIconOffset
// 0x0001 (0x0001 - 0x0000)
struct EventMangaIconComponent_IsEnableDebugMangaIconOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_IsEnableDebugMangaIconOffset) == 0x000001, "Wrong alignment on EventMangaIconComponent_IsEnableDebugMangaIconOffset");
static_assert(sizeof(EventMangaIconComponent_IsEnableDebugMangaIconOffset) == 0x000001, "Wrong size on EventMangaIconComponent_IsEnableDebugMangaIconOffset");
static_assert(offsetof(EventMangaIconComponent_IsEnableDebugMangaIconOffset, ReturnValue) == 0x000000, "Member 'EventMangaIconComponent_IsEnableDebugMangaIconOffset::ReturnValue' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.SetDebugMangaIconOffsetHeight
// 0x0004 (0x0004 - 0x0000)
struct EventMangaIconComponent_SetDebugMangaIconOffsetHeight final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_SetDebugMangaIconOffsetHeight) == 0x000004, "Wrong alignment on EventMangaIconComponent_SetDebugMangaIconOffsetHeight");
static_assert(sizeof(EventMangaIconComponent_SetDebugMangaIconOffsetHeight) == 0x000004, "Wrong size on EventMangaIconComponent_SetDebugMangaIconOffsetHeight");
static_assert(offsetof(EventMangaIconComponent_SetDebugMangaIconOffsetHeight, Offset) == 0x000000, "Member 'EventMangaIconComponent_SetDebugMangaIconOffsetHeight::Offset' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.SetDebugManpuBaseScale
// 0x0004 (0x0004 - 0x0000)
struct EventMangaIconComponent_SetDebugManpuBaseScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_SetDebugManpuBaseScale) == 0x000004, "Wrong alignment on EventMangaIconComponent_SetDebugManpuBaseScale");
static_assert(sizeof(EventMangaIconComponent_SetDebugManpuBaseScale) == 0x000004, "Wrong size on EventMangaIconComponent_SetDebugManpuBaseScale");
static_assert(offsetof(EventMangaIconComponent_SetDebugManpuBaseScale, Scale) == 0x000000, "Member 'EventMangaIconComponent_SetDebugManpuBaseScale::Scale' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.SetDebugMenuManpuId
// 0x0008 (0x0008 - 0x0000)
struct EventMangaIconComponent_SetDebugMenuManpuId final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_SetDebugMenuManpuId) == 0x000004, "Wrong alignment on EventMangaIconComponent_SetDebugMenuManpuId");
static_assert(sizeof(EventMangaIconComponent_SetDebugMenuManpuId) == 0x000008, "Wrong size on EventMangaIconComponent_SetDebugMenuManpuId");
static_assert(offsetof(EventMangaIconComponent_SetDebugMenuManpuId, ID) == 0x000000, "Member 'EventMangaIconComponent_SetDebugMenuManpuId::ID' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.SetEnableDebugIconBaseScale
// 0x0001 (0x0001 - 0x0000)
struct EventMangaIconComponent_SetEnableDebugIconBaseScale final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_SetEnableDebugIconBaseScale) == 0x000001, "Wrong alignment on EventMangaIconComponent_SetEnableDebugIconBaseScale");
static_assert(sizeof(EventMangaIconComponent_SetEnableDebugIconBaseScale) == 0x000001, "Wrong size on EventMangaIconComponent_SetEnableDebugIconBaseScale");
static_assert(offsetof(EventMangaIconComponent_SetEnableDebugIconBaseScale, flag) == 0x000000, "Member 'EventMangaIconComponent_SetEnableDebugIconBaseScale::flag' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.SetEnableDebugMangaIconOffset
// 0x0001 (0x0001 - 0x0000)
struct EventMangaIconComponent_SetEnableDebugMangaIconOffset final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_SetEnableDebugMangaIconOffset) == 0x000001, "Wrong alignment on EventMangaIconComponent_SetEnableDebugMangaIconOffset");
static_assert(sizeof(EventMangaIconComponent_SetEnableDebugMangaIconOffset) == 0x000001, "Wrong size on EventMangaIconComponent_SetEnableDebugMangaIconOffset");
static_assert(offsetof(EventMangaIconComponent_SetEnableDebugMangaIconOffset, IsEnabled) == 0x000000, "Member 'EventMangaIconComponent_SetEnableDebugMangaIconOffset::IsEnabled' has a wrong offset!");

// Function Nicola.EventMangaIconComponent.BP_ShowMangaIcon
// 0x0008 (0x0008 - 0x0000)
struct EventMangaIconComponent_BP_ShowMangaIcon final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMangaIconComponent_BP_ShowMangaIcon) == 0x000004, "Wrong alignment on EventMangaIconComponent_BP_ShowMangaIcon");
static_assert(sizeof(EventMangaIconComponent_BP_ShowMangaIcon) == 0x000008, "Wrong size on EventMangaIconComponent_BP_ShowMangaIcon");
static_assert(offsetof(EventMangaIconComponent_BP_ShowMangaIcon, ID) == 0x000000, "Member 'EventMangaIconComponent_BP_ShowMangaIcon::ID' has a wrong offset!");

// Function Nicola.ProduceSequencerME.PlayME
// 0x0008 (0x0008 - 0x0000)
struct ProduceSequencerME_PlayME final
{
public:
	class FName                                   MEGopId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerME_PlayME) == 0x000004, "Wrong alignment on ProduceSequencerME_PlayME");
static_assert(sizeof(ProduceSequencerME_PlayME) == 0x000008, "Wrong size on ProduceSequencerME_PlayME");
static_assert(offsetof(ProduceSequencerME_PlayME, MEGopId) == 0x000000, "Member 'ProduceSequencerME_PlayME::MEGopId' has a wrong offset!");

// Function Nicola.FadeSubsystem.FadeIn
// 0x000C (0x000C - 0x0000)
struct FadeSubsystem_FadeIn final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForce;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FadeSubsystem_FadeIn) == 0x000004, "Wrong alignment on FadeSubsystem_FadeIn");
static_assert(sizeof(FadeSubsystem_FadeIn) == 0x00000C, "Wrong size on FadeSubsystem_FadeIn");
static_assert(offsetof(FadeSubsystem_FadeIn, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_FadeIn::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_FadeIn, Timer) == 0x000004, "Member 'FadeSubsystem_FadeIn::Timer' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_FadeIn, InForce) == 0x000008, "Member 'FadeSubsystem_FadeIn::InForce' has a wrong offset!");

// Function Nicola.FadeSubsystem.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct FadeSubsystem_FadeOut final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_FadeOut) == 0x000004, "Wrong alignment on FadeSubsystem_FadeOut");
static_assert(sizeof(FadeSubsystem_FadeOut) == 0x000008, "Wrong size on FadeSubsystem_FadeOut");
static_assert(offsetof(FadeSubsystem_FadeOut, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_FadeOut::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_FadeOut, Timer) == 0x000004, "Member 'FadeSubsystem_FadeOut::Timer' has a wrong offset!");

// Function Nicola.FadeSubsystem.Fading
// 0x0020 (0x0020 - 0x0000)
struct FadeSubsystem_Fading final
{
public:
	bool                                          bFadeIn;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAfterFadeOut                                 InAfterFadeOut;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FadeColor;                                         // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InForce;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FadeSubsystem_Fading) == 0x000004, "Wrong alignment on FadeSubsystem_Fading");
static_assert(sizeof(FadeSubsystem_Fading) == 0x000020, "Wrong size on FadeSubsystem_Fading");
static_assert(offsetof(FadeSubsystem_Fading, bFadeIn) == 0x000000, "Member 'FadeSubsystem_Fading::bFadeIn' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_Fading, Timer) == 0x000004, "Member 'FadeSubsystem_Fading::Timer' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_Fading, InAfterFadeOut) == 0x000008, "Member 'FadeSubsystem_Fading::InAfterFadeOut' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_Fading, FadeColor) == 0x00000C, "Member 'FadeSubsystem_Fading::FadeColor' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_Fading, InForce) == 0x00001C, "Member 'FadeSubsystem_Fading::InForce' has a wrong offset!");

// Function Nicola.FadeSubsystem.IsFadeInEnd
// 0x0002 (0x0002 - 0x0000)
struct FadeSubsystem_IsFadeInEnd final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_IsFadeInEnd) == 0x000001, "Wrong alignment on FadeSubsystem_IsFadeInEnd");
static_assert(sizeof(FadeSubsystem_IsFadeInEnd) == 0x000002, "Wrong size on FadeSubsystem_IsFadeInEnd");
static_assert(offsetof(FadeSubsystem_IsFadeInEnd, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_IsFadeInEnd::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_IsFadeInEnd, ReturnValue) == 0x000001, "Member 'FadeSubsystem_IsFadeInEnd::ReturnValue' has a wrong offset!");

// Function Nicola.FadeSubsystem.IsFadeOutEnd
// 0x0002 (0x0002 - 0x0000)
struct FadeSubsystem_IsFadeOutEnd final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_IsFadeOutEnd) == 0x000001, "Wrong alignment on FadeSubsystem_IsFadeOutEnd");
static_assert(sizeof(FadeSubsystem_IsFadeOutEnd) == 0x000002, "Wrong size on FadeSubsystem_IsFadeOutEnd");
static_assert(offsetof(FadeSubsystem_IsFadeOutEnd, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_IsFadeOutEnd::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_IsFadeOutEnd, ReturnValue) == 0x000001, "Member 'FadeSubsystem_IsFadeOutEnd::ReturnValue' has a wrong offset!");

// Function Nicola.FadeSubsystem.IsInFading
// 0x0002 (0x0002 - 0x0000)
struct FadeSubsystem_IsInFading final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_IsInFading) == 0x000001, "Wrong alignment on FadeSubsystem_IsInFading");
static_assert(sizeof(FadeSubsystem_IsInFading) == 0x000002, "Wrong size on FadeSubsystem_IsInFading");
static_assert(offsetof(FadeSubsystem_IsInFading, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_IsInFading::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_IsInFading, ReturnValue) == 0x000001, "Member 'FadeSubsystem_IsInFading::ReturnValue' has a wrong offset!");

// Function Nicola.FadeSubsystem.NowloadEnd
// 0x0004 (0x0004 - 0x0000)
struct FadeSubsystem_NowloadEnd final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_NowloadEnd) == 0x000004, "Wrong alignment on FadeSubsystem_NowloadEnd");
static_assert(sizeof(FadeSubsystem_NowloadEnd) == 0x000004, "Wrong size on FadeSubsystem_NowloadEnd");
static_assert(offsetof(FadeSubsystem_NowloadEnd, Timer) == 0x000000, "Member 'FadeSubsystem_NowloadEnd::Timer' has a wrong offset!");

// Function Nicola.FadeSubsystem.NowloadStart
// 0x0008 (0x0008 - 0x0000)
struct FadeSubsystem_NowloadStart final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          tips;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FadeSubsystem_NowloadStart) == 0x000004, "Wrong alignment on FadeSubsystem_NowloadStart");
static_assert(sizeof(FadeSubsystem_NowloadStart) == 0x000008, "Wrong size on FadeSubsystem_NowloadStart");
static_assert(offsetof(FadeSubsystem_NowloadStart, Timer) == 0x000000, "Member 'FadeSubsystem_NowloadStart::Timer' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_NowloadStart, tips) == 0x000004, "Member 'FadeSubsystem_NowloadStart::tips' has a wrong offset!");

// Function Nicola.FadeSubsystem.SetFadeColor
// 0x0024 (0x0024 - 0x0000)
struct FadeSubsystem_SetFadeColor final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FadeColor;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0014(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_SetFadeColor) == 0x000004, "Wrong alignment on FadeSubsystem_SetFadeColor");
static_assert(sizeof(FadeSubsystem_SetFadeColor) == 0x000024, "Wrong size on FadeSubsystem_SetFadeColor");
static_assert(offsetof(FadeSubsystem_SetFadeColor, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_SetFadeColor::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_SetFadeColor, FadeColor) == 0x000004, "Member 'FadeSubsystem_SetFadeColor::FadeColor' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_SetFadeColor, ReturnValue) == 0x000014, "Member 'FadeSubsystem_SetFadeColor::ReturnValue' has a wrong offset!");

// Function Nicola.FadeSubsystem.GetFadeColor
// 0x0014 (0x0014 - 0x0000)
struct FadeSubsystem_GetFadeColor final
{
public:
	EFadingPriority                               EFadingPriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeSubsystem_GetFadeColor) == 0x000004, "Wrong alignment on FadeSubsystem_GetFadeColor");
static_assert(sizeof(FadeSubsystem_GetFadeColor) == 0x000014, "Wrong size on FadeSubsystem_GetFadeColor");
static_assert(offsetof(FadeSubsystem_GetFadeColor, EFadingPriority) == 0x000000, "Member 'FadeSubsystem_GetFadeColor::EFadingPriority' has a wrong offset!");
static_assert(offsetof(FadeSubsystem_GetFadeColor, ReturnValue) == 0x000004, "Member 'FadeSubsystem_GetFadeColor::ReturnValue' has a wrong offset!");

// Function Nicola.RockGimmick.OnMoveCollisionBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RockGimmick_OnMoveCollisionBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RockGimmick_OnMoveCollisionBeginOverlap) == 0x000008, "Wrong alignment on RockGimmick_OnMoveCollisionBeginOverlap");
static_assert(sizeof(RockGimmick_OnMoveCollisionBeginOverlap) == 0x0000A8, "Wrong size on RockGimmick_OnMoveCollisionBeginOverlap");
static_assert(offsetof(RockGimmick_OnMoveCollisionBeginOverlap, OverlappedComp) == 0x000000, "Member 'RockGimmick_OnMoveCollisionBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RockGimmick_OnMoveCollisionBeginOverlap, OtherActor) == 0x000008, "Member 'RockGimmick_OnMoveCollisionBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RockGimmick_OnMoveCollisionBeginOverlap, OtherComp) == 0x000010, "Member 'RockGimmick_OnMoveCollisionBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RockGimmick_OnMoveCollisionBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RockGimmick_OnMoveCollisionBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RockGimmick_OnMoveCollisionBeginOverlap, bFromSweep) == 0x00001C, "Member 'RockGimmick_OnMoveCollisionBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RockGimmick_OnMoveCollisionBeginOverlap, SweepResult) == 0x000020, "Member 'RockGimmick_OnMoveCollisionBeginOverlap::SweepResult' has a wrong offset!");

// Function Nicola.NicolaPlayerCameraManager.PlayEventSequence
// 0x0008 (0x0008 - 0x0000)
struct NicolaPlayerCameraManager_PlayEventSequence final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInvisibleNpc;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isJumpToEnd;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaPlayerCameraManager_PlayEventSequence) == 0x000004, "Wrong alignment on NicolaPlayerCameraManager_PlayEventSequence");
static_assert(sizeof(NicolaPlayerCameraManager_PlayEventSequence) == 0x000008, "Wrong size on NicolaPlayerCameraManager_PlayEventSequence");
static_assert(offsetof(NicolaPlayerCameraManager_PlayEventSequence, Index_0) == 0x000000, "Member 'NicolaPlayerCameraManager_PlayEventSequence::Index_0' has a wrong offset!");
static_assert(offsetof(NicolaPlayerCameraManager_PlayEventSequence, isInvisibleNpc) == 0x000004, "Member 'NicolaPlayerCameraManager_PlayEventSequence::isInvisibleNpc' has a wrong offset!");
static_assert(offsetof(NicolaPlayerCameraManager_PlayEventSequence, isJumpToEnd) == 0x000005, "Member 'NicolaPlayerCameraManager_PlayEventSequence::isJumpToEnd' has a wrong offset!");

// Function Nicola.NicolaPlayerCameraManager.GetBattleCamera
// 0x0008 (0x0008 - 0x0000)
struct NicolaPlayerCameraManager_GetBattleCamera final
{
public:
	class ANicolaCameraActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerCameraManager_GetBattleCamera) == 0x000008, "Wrong alignment on NicolaPlayerCameraManager_GetBattleCamera");
static_assert(sizeof(NicolaPlayerCameraManager_GetBattleCamera) == 0x000008, "Wrong size on NicolaPlayerCameraManager_GetBattleCamera");
static_assert(offsetof(NicolaPlayerCameraManager_GetBattleCamera, ReturnValue) == 0x000000, "Member 'NicolaPlayerCameraManager_GetBattleCamera::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerCameraManager.GetCurrentTraceCamera
// 0x0008 (0x0008 - 0x0000)
struct NicolaPlayerCameraManager_GetCurrentTraceCamera final
{
public:
	class ANicolaCameraActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerCameraManager_GetCurrentTraceCamera) == 0x000008, "Wrong alignment on NicolaPlayerCameraManager_GetCurrentTraceCamera");
static_assert(sizeof(NicolaPlayerCameraManager_GetCurrentTraceCamera) == 0x000008, "Wrong size on NicolaPlayerCameraManager_GetCurrentTraceCamera");
static_assert(offsetof(NicolaPlayerCameraManager_GetCurrentTraceCamera, ReturnValue) == 0x000000, "Member 'NicolaPlayerCameraManager_GetCurrentTraceCamera::ReturnValue' has a wrong offset!");

// Function Nicola.ProduceSequencerItemGetIcon.PlayItemGetIcon
// 0x0008 (0x0008 - 0x0000)
struct ProduceSequencerItemGetIcon_PlayItemGetIcon final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerItemGetIcon_PlayItemGetIcon) == 0x000004, "Wrong alignment on ProduceSequencerItemGetIcon_PlayItemGetIcon");
static_assert(sizeof(ProduceSequencerItemGetIcon_PlayItemGetIcon) == 0x000008, "Wrong size on ProduceSequencerItemGetIcon_PlayItemGetIcon");
static_assert(offsetof(ProduceSequencerItemGetIcon_PlayItemGetIcon, ItemId) == 0x000000, "Member 'ProduceSequencerItemGetIcon_PlayItemGetIcon::ItemId' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.SetActionInputMode
// 0x0002 (0x0002 - 0x0000)
struct NicolaPlayerControllerBase_SetActionInputMode final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_SetActionInputMode) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_SetActionInputMode");
static_assert(sizeof(NicolaPlayerControllerBase_SetActionInputMode) == 0x000002, "Wrong size on NicolaPlayerControllerBase_SetActionInputMode");
static_assert(offsetof(NicolaPlayerControllerBase_SetActionInputMode, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_SetActionInputMode::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_SetActionInputMode, flag) == 0x000001, "Member 'NicolaPlayerControllerBase_SetActionInputMode::flag' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.GetActionInputMode
// 0x0001 (0x0001 - 0x0000)
struct NicolaPlayerControllerBase_GetActionInputMode final
{
public:
	ENicolaInputMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_GetActionInputMode) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_GetActionInputMode");
static_assert(sizeof(NicolaPlayerControllerBase_GetActionInputMode) == 0x000001, "Wrong size on NicolaPlayerControllerBase_GetActionInputMode");
static_assert(offsetof(NicolaPlayerControllerBase_GetActionInputMode, ReturnValue) == 0x000000, "Member 'NicolaPlayerControllerBase_GetActionInputMode::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.GetAnalogStickL
// 0x000C (0x000C - 0x0000)
struct NicolaPlayerControllerBase_GetAnalogStickL final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_GetAnalogStickL) == 0x000004, "Wrong alignment on NicolaPlayerControllerBase_GetAnalogStickL");
static_assert(sizeof(NicolaPlayerControllerBase_GetAnalogStickL) == 0x00000C, "Wrong size on NicolaPlayerControllerBase_GetAnalogStickL");
static_assert(offsetof(NicolaPlayerControllerBase_GetAnalogStickL, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_GetAnalogStickL::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_GetAnalogStickL, ReturnValue) == 0x000004, "Member 'NicolaPlayerControllerBase_GetAnalogStickL::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.GetAnalogStickR
// 0x000C (0x000C - 0x0000)
struct NicolaPlayerControllerBase_GetAnalogStickR final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_GetAnalogStickR) == 0x000004, "Wrong alignment on NicolaPlayerControllerBase_GetAnalogStickR");
static_assert(sizeof(NicolaPlayerControllerBase_GetAnalogStickR) == 0x00000C, "Wrong size on NicolaPlayerControllerBase_GetAnalogStickR");
static_assert(offsetof(NicolaPlayerControllerBase_GetAnalogStickR, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_GetAnalogStickR::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_GetAnalogStickR, ReturnValue) == 0x000004, "Member 'NicolaPlayerControllerBase_GetAnalogStickR::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsActionInputModeGamePlayWithoutNoInput
// 0x0001 (0x0001 - 0x0000)
struct NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput");
static_assert(sizeof(NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput) == 0x000001, "Wrong size on NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput, ReturnValue) == 0x000000, "Member 'NicolaPlayerControllerBase_IsActionInputModeGamePlayWithoutNoInput::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsActionOn
// 0x0003 (0x0003 - 0x0000)
struct NicolaPlayerControllerBase_IsActionOn final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaAction                                 action;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsActionOn) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsActionOn");
static_assert(sizeof(NicolaPlayerControllerBase_IsActionOn) == 0x000003, "Wrong size on NicolaPlayerControllerBase_IsActionOn");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionOn, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_IsActionOn::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionOn, action) == 0x000001, "Member 'NicolaPlayerControllerBase_IsActionOn::action' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionOn, ReturnValue) == 0x000002, "Member 'NicolaPlayerControllerBase_IsActionOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsActionRelease
// 0x0003 (0x0003 - 0x0000)
struct NicolaPlayerControllerBase_IsActionRelease final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaAction                                 action;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsActionRelease) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsActionRelease");
static_assert(sizeof(NicolaPlayerControllerBase_IsActionRelease) == 0x000003, "Wrong size on NicolaPlayerControllerBase_IsActionRelease");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionRelease, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_IsActionRelease::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionRelease, action) == 0x000001, "Member 'NicolaPlayerControllerBase_IsActionRelease::action' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionRelease, ReturnValue) == 0x000002, "Member 'NicolaPlayerControllerBase_IsActionRelease::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsActionTrigger
// 0x0003 (0x0003 - 0x0000)
struct NicolaPlayerControllerBase_IsActionTrigger final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaAction                                 action;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsActionTrigger) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsActionTrigger");
static_assert(sizeof(NicolaPlayerControllerBase_IsActionTrigger) == 0x000003, "Wrong size on NicolaPlayerControllerBase_IsActionTrigger");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionTrigger, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_IsActionTrigger::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionTrigger, action) == 0x000001, "Member 'NicolaPlayerControllerBase_IsActionTrigger::action' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionTrigger, ReturnValue) == 0x000002, "Member 'NicolaPlayerControllerBase_IsActionTrigger::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsActionTriggerRepeat
// 0x0003 (0x0003 - 0x0000)
struct NicolaPlayerControllerBase_IsActionTriggerRepeat final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaAction                                 action;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsActionTriggerRepeat) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsActionTriggerRepeat");
static_assert(sizeof(NicolaPlayerControllerBase_IsActionTriggerRepeat) == 0x000003, "Wrong size on NicolaPlayerControllerBase_IsActionTriggerRepeat");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionTriggerRepeat, inputMode) == 0x000000, "Member 'NicolaPlayerControllerBase_IsActionTriggerRepeat::inputMode' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionTriggerRepeat, action) == 0x000001, "Member 'NicolaPlayerControllerBase_IsActionTriggerRepeat::action' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsActionTriggerRepeat, ReturnValue) == 0x000002, "Member 'NicolaPlayerControllerBase_IsActionTriggerRepeat::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsButtonOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaPlayerControllerBase_IsButtonOn final
{
public:
	ENicolaButton                                 Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsButtonOn) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsButtonOn");
static_assert(sizeof(NicolaPlayerControllerBase_IsButtonOn) == 0x000002, "Wrong size on NicolaPlayerControllerBase_IsButtonOn");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonOn, Button) == 0x000000, "Member 'NicolaPlayerControllerBase_IsButtonOn::Button' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonOn, ReturnValue) == 0x000001, "Member 'NicolaPlayerControllerBase_IsButtonOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsButtonRelease
// 0x0002 (0x0002 - 0x0000)
struct NicolaPlayerControllerBase_IsButtonRelease final
{
public:
	ENicolaButton                                 Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsButtonRelease) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsButtonRelease");
static_assert(sizeof(NicolaPlayerControllerBase_IsButtonRelease) == 0x000002, "Wrong size on NicolaPlayerControllerBase_IsButtonRelease");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonRelease, Button) == 0x000000, "Member 'NicolaPlayerControllerBase_IsButtonRelease::Button' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonRelease, ReturnValue) == 0x000001, "Member 'NicolaPlayerControllerBase_IsButtonRelease::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsButtonTrigger
// 0x0002 (0x0002 - 0x0000)
struct NicolaPlayerControllerBase_IsButtonTrigger final
{
public:
	ENicolaButton                                 Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsButtonTrigger) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsButtonTrigger");
static_assert(sizeof(NicolaPlayerControllerBase_IsButtonTrigger) == 0x000002, "Wrong size on NicolaPlayerControllerBase_IsButtonTrigger");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonTrigger, Button) == 0x000000, "Member 'NicolaPlayerControllerBase_IsButtonTrigger::Button' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonTrigger, ReturnValue) == 0x000001, "Member 'NicolaPlayerControllerBase_IsButtonTrigger::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaPlayerControllerBase.IsButtonTriggerRepeat
// 0x0002 (0x0002 - 0x0000)
struct NicolaPlayerControllerBase_IsButtonTriggerRepeat final
{
public:
	ENicolaButton                                 Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaPlayerControllerBase_IsButtonTriggerRepeat) == 0x000001, "Wrong alignment on NicolaPlayerControllerBase_IsButtonTriggerRepeat");
static_assert(sizeof(NicolaPlayerControllerBase_IsButtonTriggerRepeat) == 0x000002, "Wrong size on NicolaPlayerControllerBase_IsButtonTriggerRepeat");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonTriggerRepeat, Button) == 0x000000, "Member 'NicolaPlayerControllerBase_IsButtonTriggerRepeat::Button' has a wrong offset!");
static_assert(offsetof(NicolaPlayerControllerBase_IsButtonTriggerRepeat, ReturnValue) == 0x000001, "Member 'NicolaPlayerControllerBase_IsButtonTriggerRepeat::ReturnValue' has a wrong offset!");

// Function Nicola.SearchEventGimmick.PlayEffectSearchObjectBP
// 0x0008 (0x0008 - 0x0000)
struct SearchEventGimmick_PlayEffectSearchObjectBP final
{
public:
	class FName                                   PlayEffectName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchEventGimmick_PlayEffectSearchObjectBP) == 0x000004, "Wrong alignment on SearchEventGimmick_PlayEffectSearchObjectBP");
static_assert(sizeof(SearchEventGimmick_PlayEffectSearchObjectBP) == 0x000008, "Wrong size on SearchEventGimmick_PlayEffectSearchObjectBP");
static_assert(offsetof(SearchEventGimmick_PlayEffectSearchObjectBP, PlayEffectName) == 0x000000, "Member 'SearchEventGimmick_PlayEffectSearchObjectBP::PlayEffectName' has a wrong offset!");

// Function Nicola.ProduceSequencerEnding.StartFadeOut
// 0x0004 (0x0004 - 0x0000)
struct ProduceSequencerEnding_StartFadeOut final
{
public:
	float                                         FadeSec;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerEnding_StartFadeOut) == 0x000004, "Wrong alignment on ProduceSequencerEnding_StartFadeOut");
static_assert(sizeof(ProduceSequencerEnding_StartFadeOut) == 0x000004, "Wrong size on ProduceSequencerEnding_StartFadeOut");
static_assert(offsetof(ProduceSequencerEnding_StartFadeOut, FadeSec) == 0x000000, "Member 'ProduceSequencerEnding_StartFadeOut::FadeSec' has a wrong offset!");

// Function Nicola.NicolaCameraFL.GetCurrentCamera
// 0x0008 (0x0008 - 0x0000)
struct NicolaCameraFL_GetCurrentCamera final
{
public:
	class ANicolaCameraActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCameraFL_GetCurrentCamera) == 0x000008, "Wrong alignment on NicolaCameraFL_GetCurrentCamera");
static_assert(sizeof(NicolaCameraFL_GetCurrentCamera) == 0x000008, "Wrong size on NicolaCameraFL_GetCurrentCamera");
static_assert(offsetof(NicolaCameraFL_GetCurrentCamera, ReturnValue) == 0x000000, "Member 'NicolaCameraFL_GetCurrentCamera::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugAmbientOcclusion
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugAmbientOcclusion final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugAmbientOcclusion) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugAmbientOcclusion");
static_assert(sizeof(NicolaCharacterFL_DebugAmbientOcclusion) == 0x000004, "Wrong size on NicolaCharacterFL_DebugAmbientOcclusion");
static_assert(offsetof(NicolaCharacterFL_DebugAmbientOcclusion, Val) == 0x000000, "Member 'NicolaCharacterFL_DebugAmbientOcclusion::Val' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugBloom
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugBloom final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugBloom) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugBloom");
static_assert(sizeof(NicolaCharacterFL_DebugBloom) == 0x000004, "Wrong size on NicolaCharacterFL_DebugBloom");
static_assert(offsetof(NicolaCharacterFL_DebugBloom, Val) == 0x000000, "Member 'NicolaCharacterFL_DebugBloom::Val' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugChangeCharaColor
// 0x0018 (0x0018 - 0x0000)
struct NicolaCharacterFL_DebugChangeCharaColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         b;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPower;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         metallicPower;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugChangeCharaColor) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugChangeCharaColor");
static_assert(sizeof(NicolaCharacterFL_DebugChangeCharaColor) == 0x000018, "Wrong size on NicolaCharacterFL_DebugChangeCharaColor");
static_assert(offsetof(NicolaCharacterFL_DebugChangeCharaColor, Index_0) == 0x000000, "Member 'NicolaCharacterFL_DebugChangeCharaColor::Index_0' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugChangeCharaColor, R) == 0x000004, "Member 'NicolaCharacterFL_DebugChangeCharaColor::R' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugChangeCharaColor, G) == 0x000008, "Member 'NicolaCharacterFL_DebugChangeCharaColor::G' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugChangeCharaColor, b) == 0x00000C, "Member 'NicolaCharacterFL_DebugChangeCharaColor::b' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugChangeCharaColor, ColorPower) == 0x000010, "Member 'NicolaCharacterFL_DebugChangeCharaColor::ColorPower' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugChangeCharaColor, metallicPower) == 0x000014, "Member 'NicolaCharacterFL_DebugChangeCharaColor::metallicPower' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugGetAperture
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugGetAperture final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugGetAperture) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugGetAperture");
static_assert(sizeof(NicolaCharacterFL_DebugGetAperture) == 0x000004, "Wrong size on NicolaCharacterFL_DebugGetAperture");
static_assert(offsetof(NicolaCharacterFL_DebugGetAperture, ReturnValue) == 0x000000, "Member 'NicolaCharacterFL_DebugGetAperture::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugGetCharaColor
// 0x001C (0x001C - 0x0000)
struct NicolaCharacterFL_DebugGetCharaColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         R;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         b;                                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPower;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         metallicPower;                                     // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaCharacterFL_DebugGetCharaColor) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugGetCharaColor");
static_assert(sizeof(NicolaCharacterFL_DebugGetCharaColor) == 0x00001C, "Wrong size on NicolaCharacterFL_DebugGetCharaColor");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, Index_0) == 0x000000, "Member 'NicolaCharacterFL_DebugGetCharaColor::Index_0' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, R) == 0x000004, "Member 'NicolaCharacterFL_DebugGetCharaColor::R' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, G) == 0x000008, "Member 'NicolaCharacterFL_DebugGetCharaColor::G' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, b) == 0x00000C, "Member 'NicolaCharacterFL_DebugGetCharaColor::b' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, ColorPower) == 0x000010, "Member 'NicolaCharacterFL_DebugGetCharaColor::ColorPower' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, metallicPower) == 0x000014, "Member 'NicolaCharacterFL_DebugGetCharaColor::metallicPower' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_DebugGetCharaColor, ReturnValue) == 0x000018, "Member 'NicolaCharacterFL_DebugGetCharaColor::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugGetNearDOF
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugGetNearDOF final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugGetNearDOF) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugGetNearDOF");
static_assert(sizeof(NicolaCharacterFL_DebugGetNearDOF) == 0x000004, "Wrong size on NicolaCharacterFL_DebugGetNearDOF");
static_assert(offsetof(NicolaCharacterFL_DebugGetNearDOF, ReturnValue) == 0x000000, "Member 'NicolaCharacterFL_DebugGetNearDOF::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugMotionBlur
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugMotionBlur final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugMotionBlur) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugMotionBlur");
static_assert(sizeof(NicolaCharacterFL_DebugMotionBlur) == 0x000004, "Wrong size on NicolaCharacterFL_DebugMotionBlur");
static_assert(offsetof(NicolaCharacterFL_DebugMotionBlur, Val) == 0x000000, "Member 'NicolaCharacterFL_DebugMotionBlur::Val' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugSceneFringe
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugSceneFringe final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugSceneFringe) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugSceneFringe");
static_assert(sizeof(NicolaCharacterFL_DebugSceneFringe) == 0x000004, "Wrong size on NicolaCharacterFL_DebugSceneFringe");
static_assert(offsetof(NicolaCharacterFL_DebugSceneFringe, Val) == 0x000000, "Member 'NicolaCharacterFL_DebugSceneFringe::Val' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugSetAperture
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugSetAperture final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugSetAperture) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugSetAperture");
static_assert(sizeof(NicolaCharacterFL_DebugSetAperture) == 0x000004, "Wrong size on NicolaCharacterFL_DebugSetAperture");
static_assert(offsetof(NicolaCharacterFL_DebugSetAperture, Val) == 0x000000, "Member 'NicolaCharacterFL_DebugSetAperture::Val' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.DebugSetNearDOF
// 0x0004 (0x0004 - 0x0000)
struct NicolaCharacterFL_DebugSetNearDOF final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_DebugSetNearDOF) == 0x000004, "Wrong alignment on NicolaCharacterFL_DebugSetNearDOF");
static_assert(sizeof(NicolaCharacterFL_DebugSetNearDOF) == 0x000004, "Wrong size on NicolaCharacterFL_DebugSetNearDOF");
static_assert(offsetof(NicolaCharacterFL_DebugSetNearDOF, Val) == 0x000000, "Member 'NicolaCharacterFL_DebugSetNearDOF::Val' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.GetCharactersFromParty
// 0x0010 (0x0010 - 0x0000)
struct NicolaCharacterFL_GetCharactersFromParty final
{
public:
	TArray<class ANicolaCharacterBase*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_GetCharactersFromParty) == 0x000008, "Wrong alignment on NicolaCharacterFL_GetCharactersFromParty");
static_assert(sizeof(NicolaCharacterFL_GetCharactersFromParty) == 0x000010, "Wrong size on NicolaCharacterFL_GetCharactersFromParty");
static_assert(offsetof(NicolaCharacterFL_GetCharactersFromParty, ReturnValue) == 0x000000, "Member 'NicolaCharacterFL_GetCharactersFromParty::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCharacterFL.SpawnUnit
// 0x00B0 (0x00B0 - 0x0000)
struct NicolaCharacterFL_SpawnUnit final
{
public:
	struct FUnitCommonCreateOption                UnitCommonCreateOption;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUnitInstanceCreateOption              UnitInstanceCreateOption;                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnitLooksActorCreateOption            UnitLooksActorCreateOption;                        // 0x0018(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ANicolaCharacterBase*                   ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterFL_SpawnUnit) == 0x000008, "Wrong alignment on NicolaCharacterFL_SpawnUnit");
static_assert(sizeof(NicolaCharacterFL_SpawnUnit) == 0x0000B0, "Wrong size on NicolaCharacterFL_SpawnUnit");
static_assert(offsetof(NicolaCharacterFL_SpawnUnit, UnitCommonCreateOption) == 0x000000, "Member 'NicolaCharacterFL_SpawnUnit::UnitCommonCreateOption' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_SpawnUnit, UnitInstanceCreateOption) == 0x000010, "Member 'NicolaCharacterFL_SpawnUnit::UnitInstanceCreateOption' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_SpawnUnit, UnitLooksActorCreateOption) == 0x000018, "Member 'NicolaCharacterFL_SpawnUnit::UnitLooksActorCreateOption' has a wrong offset!");
static_assert(offsetof(NicolaCharacterFL_SpawnUnit, ReturnValue) == 0x0000A8, "Member 'NicolaCharacterFL_SpawnUnit::ReturnValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.AddGameMoney
// 0x000C (0x000C - 0x0000)
struct GameDataCoreFL_AddGameMoney final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isBank;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_AddGameMoney) == 0x000004, "Wrong alignment on GameDataCoreFL_AddGameMoney");
static_assert(sizeof(GameDataCoreFL_AddGameMoney) == 0x00000C, "Wrong size on GameDataCoreFL_AddGameMoney");
static_assert(offsetof(GameDataCoreFL_AddGameMoney, Value) == 0x000000, "Member 'GameDataCoreFL_AddGameMoney::Value' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_AddGameMoney, isBank) == 0x000004, "Member 'GameDataCoreFL_AddGameMoney::isBank' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_AddGameMoney, ReturnValue) == 0x000008, "Member 'GameDataCoreFL_AddGameMoney::ReturnValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.AddMiniMedal
// 0x0004 (0x0004 - 0x0000)
struct GameDataCoreFL_AddMiniMedal final
{
public:
	int32                                         addCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_AddMiniMedal) == 0x000004, "Wrong alignment on GameDataCoreFL_AddMiniMedal");
static_assert(sizeof(GameDataCoreFL_AddMiniMedal) == 0x000004, "Wrong size on GameDataCoreFL_AddMiniMedal");
static_assert(offsetof(GameDataCoreFL_AddMiniMedal, addCount) == 0x000000, "Member 'GameDataCoreFL_AddMiniMedal::addCount' has a wrong offset!");

// Function Nicola.GameDataCoreFL.AddMonsterKillCount
// 0x000C (0x000C - 0x0000)
struct GameDataCoreFL_AddMonsterKillCount final
{
public:
	class FName                                   InMonsterId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_AddMonsterKillCount) == 0x000004, "Wrong alignment on GameDataCoreFL_AddMonsterKillCount");
static_assert(sizeof(GameDataCoreFL_AddMonsterKillCount) == 0x00000C, "Wrong size on GameDataCoreFL_AddMonsterKillCount");
static_assert(offsetof(GameDataCoreFL_AddMonsterKillCount, InMonsterId) == 0x000000, "Member 'GameDataCoreFL_AddMonsterKillCount::InMonsterId' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_AddMonsterKillCount, InAddCount) == 0x000008, "Member 'GameDataCoreFL_AddMonsterKillCount::InAddCount' has a wrong offset!");

// Function Nicola.GameDataCoreFL.BP_DebugGetGOPEnumFlag
// 0x000C (0x000C - 0x0000)
struct GameDataCoreFL_BP_DebugGetGOPEnumFlag final
{
public:
	EDebugGOPFlagType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         flagIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataCoreFL_BP_DebugGetGOPEnumFlag) == 0x000004, "Wrong alignment on GameDataCoreFL_BP_DebugGetGOPEnumFlag");
static_assert(sizeof(GameDataCoreFL_BP_DebugGetGOPEnumFlag) == 0x00000C, "Wrong size on GameDataCoreFL_BP_DebugGetGOPEnumFlag");
static_assert(offsetof(GameDataCoreFL_BP_DebugGetGOPEnumFlag, Type) == 0x000000, "Member 'GameDataCoreFL_BP_DebugGetGOPEnumFlag::Type' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_BP_DebugGetGOPEnumFlag, flagIndex) == 0x000004, "Member 'GameDataCoreFL_BP_DebugGetGOPEnumFlag::flagIndex' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_BP_DebugGetGOPEnumFlag, ReturnValue) == 0x000008, "Member 'GameDataCoreFL_BP_DebugGetGOPEnumFlag::ReturnValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.BP_DebugGetGOPEnumFlagNameList
// 0x0018 (0x0018 - 0x0000)
struct GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList final
{
public:
	EDebugGOPFlagType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList) == 0x000008, "Wrong alignment on GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList");
static_assert(sizeof(GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList) == 0x000018, "Wrong size on GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList");
static_assert(offsetof(GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList, Type) == 0x000000, "Member 'GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList::Type' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList, ReturnValue) == 0x000008, "Member 'GameDataCoreFL_BP_DebugGetGOPEnumFlagNameList::ReturnValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.BP_DebugSetGOPEnumFlag
// 0x000C (0x000C - 0x0000)
struct GameDataCoreFL_BP_DebugSetGOPEnumFlag final
{
public:
	EDebugGOPFlagType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         flagIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataCoreFL_BP_DebugSetGOPEnumFlag) == 0x000004, "Wrong alignment on GameDataCoreFL_BP_DebugSetGOPEnumFlag");
static_assert(sizeof(GameDataCoreFL_BP_DebugSetGOPEnumFlag) == 0x00000C, "Wrong size on GameDataCoreFL_BP_DebugSetGOPEnumFlag");
static_assert(offsetof(GameDataCoreFL_BP_DebugSetGOPEnumFlag, Type) == 0x000000, "Member 'GameDataCoreFL_BP_DebugSetGOPEnumFlag::Type' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_BP_DebugSetGOPEnumFlag, flagIndex) == 0x000004, "Member 'GameDataCoreFL_BP_DebugSetGOPEnumFlag::flagIndex' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_BP_DebugSetGOPEnumFlag, Value) == 0x000008, "Member 'GameDataCoreFL_BP_DebugSetGOPEnumFlag::Value' has a wrong offset!");

// Function Nicola.GameDataCoreFL.DebugAddGamePlayTime
// 0x0004 (0x0004 - 0x0000)
struct GameDataCoreFL_DebugAddGamePlayTime final
{
public:
	int32                                         addValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_DebugAddGamePlayTime) == 0x000004, "Wrong alignment on GameDataCoreFL_DebugAddGamePlayTime");
static_assert(sizeof(GameDataCoreFL_DebugAddGamePlayTime) == 0x000004, "Wrong size on GameDataCoreFL_DebugAddGamePlayTime");
static_assert(offsetof(GameDataCoreFL_DebugAddGamePlayTime, addValue) == 0x000000, "Member 'GameDataCoreFL_DebugAddGamePlayTime::addValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.GetAllMonsterUnitMasterID
// 0x0010 (0x0010 - 0x0000)
struct GameDataCoreFL_GetAllMonsterUnitMasterID final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_GetAllMonsterUnitMasterID) == 0x000008, "Wrong alignment on GameDataCoreFL_GetAllMonsterUnitMasterID");
static_assert(sizeof(GameDataCoreFL_GetAllMonsterUnitMasterID) == 0x000010, "Wrong size on GameDataCoreFL_GetAllMonsterUnitMasterID");
static_assert(offsetof(GameDataCoreFL_GetAllMonsterUnitMasterID, GopIdList) == 0x000000, "Member 'GameDataCoreFL_GetAllMonsterUnitMasterID::GopIdList' has a wrong offset!");

// Function Nicola.GameDataCoreFL.GetGameMoney
// 0x0004 (0x0004 - 0x0000)
struct GameDataCoreFL_GetGameMoney final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_GetGameMoney) == 0x000004, "Wrong alignment on GameDataCoreFL_GetGameMoney");
static_assert(sizeof(GameDataCoreFL_GetGameMoney) == 0x000004, "Wrong size on GameDataCoreFL_GetGameMoney");
static_assert(offsetof(GameDataCoreFL_GetGameMoney, ReturnValue) == 0x000000, "Member 'GameDataCoreFL_GetGameMoney::ReturnValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.ReduceGameMoney
// 0x0008 (0x0008 - 0x0000)
struct GameDataCoreFL_ReduceGameMoney final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_ReduceGameMoney) == 0x000004, "Wrong alignment on GameDataCoreFL_ReduceGameMoney");
static_assert(sizeof(GameDataCoreFL_ReduceGameMoney) == 0x000008, "Wrong size on GameDataCoreFL_ReduceGameMoney");
static_assert(offsetof(GameDataCoreFL_ReduceGameMoney, Value) == 0x000000, "Member 'GameDataCoreFL_ReduceGameMoney::Value' has a wrong offset!");
static_assert(offsetof(GameDataCoreFL_ReduceGameMoney, ReturnValue) == 0x000004, "Member 'GameDataCoreFL_ReduceGameMoney::ReturnValue' has a wrong offset!");

// Function Nicola.GameDataCoreFL.SetCanRuraVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataCoreFL_SetCanRuraVolume final
{
public:
	bool                                          bIsCanRura;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCoreFL_SetCanRuraVolume) == 0x000001, "Wrong alignment on GameDataCoreFL_SetCanRuraVolume");
static_assert(sizeof(GameDataCoreFL_SetCanRuraVolume) == 0x000001, "Wrong size on GameDataCoreFL_SetCanRuraVolume");
static_assert(offsetof(GameDataCoreFL_SetCanRuraVolume, bIsCanRura) == 0x000000, "Member 'GameDataCoreFL_SetCanRuraVolume::bIsCanRura' has a wrong offset!");

// Function Nicola.GameDataFL.GetGameMode
// 0x0001 (0x0001 - 0x0000)
struct GameDataFL_GetGameMode final
{
public:
	EGameMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataFL_GetGameMode) == 0x000001, "Wrong alignment on GameDataFL_GetGameMode");
static_assert(sizeof(GameDataFL_GetGameMode) == 0x000001, "Wrong size on GameDataFL_GetGameMode");
static_assert(offsetof(GameDataFL_GetGameMode, ReturnValue) == 0x000000, "Member 'GameDataFL_GetGameMode::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCheatManager.FindTextGopId
// 0x0008 (0x0008 - 0x0000)
struct NicolaCheatManager_FindTextGopId final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCheatManager_FindTextGopId) == 0x000004, "Wrong alignment on NicolaCheatManager_FindTextGopId");
static_assert(sizeof(NicolaCheatManager_FindTextGopId) == 0x000008, "Wrong size on NicolaCheatManager_FindTextGopId");
static_assert(offsetof(NicolaCheatManager_FindTextGopId, GopId) == 0x000000, "Member 'NicolaCheatManager_FindTextGopId::GopId' has a wrong offset!");

// Function Nicola.NicolaCheatManager.LuaDebugExec
// 0x0010 (0x0010 - 0x0000)
struct NicolaCheatManager_LuaDebugExec final
{
public:
	class FString                                 funcName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCheatManager_LuaDebugExec) == 0x000008, "Wrong alignment on NicolaCheatManager_LuaDebugExec");
static_assert(sizeof(NicolaCheatManager_LuaDebugExec) == 0x000010, "Wrong size on NicolaCheatManager_LuaDebugExec");
static_assert(offsetof(NicolaCheatManager_LuaDebugExec, funcName) == 0x000000, "Member 'NicolaCheatManager_LuaDebugExec::funcName' has a wrong offset!");

// Function Nicola.NicolaCheatManager.SetNearDOF
// 0x0004 (0x0004 - 0x0000)
struct NicolaCheatManager_SetNearDOF final
{
public:
	float                                         DOFPower;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCheatManager_SetNearDOF) == 0x000004, "Wrong alignment on NicolaCheatManager_SetNearDOF");
static_assert(sizeof(NicolaCheatManager_SetNearDOF) == 0x000004, "Wrong size on NicolaCheatManager_SetNearDOF");
static_assert(offsetof(NicolaCheatManager_SetNearDOF, DOFPower) == 0x000000, "Member 'NicolaCheatManager_SetNearDOF::DOFPower' has a wrong offset!");

// Function Nicola.NicolaCheatManager.StartBattle
// 0x0008 (0x0008 - 0x0000)
struct NicolaCheatManager_StartBattle final
{
public:
	class FName                                   BattleMapID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCheatManager_StartBattle) == 0x000004, "Wrong alignment on NicolaCheatManager_StartBattle");
static_assert(sizeof(NicolaCheatManager_StartBattle) == 0x000008, "Wrong size on NicolaCheatManager_StartBattle");
static_assert(offsetof(NicolaCheatManager_StartBattle, BattleMapID) == 0x000000, "Member 'NicolaCheatManager_StartBattle::BattleMapID' has a wrong offset!");

// Function Nicola.GopFL.GetDataTableEvent
// 0x0010 (0x0010 - 0x0000)
struct GopFL_GetDataTableEvent final
{
public:
	EEventTableType                               TableType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGopEventType                                 GopType;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDataTable*                       ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GopFL_GetDataTableEvent) == 0x000008, "Wrong alignment on GopFL_GetDataTableEvent");
static_assert(sizeof(GopFL_GetDataTableEvent) == 0x000010, "Wrong size on GopFL_GetDataTableEvent");
static_assert(offsetof(GopFL_GetDataTableEvent, TableType) == 0x000000, "Member 'GopFL_GetDataTableEvent::TableType' has a wrong offset!");
static_assert(offsetof(GopFL_GetDataTableEvent, GopType) == 0x000001, "Member 'GopFL_GetDataTableEvent::GopType' has a wrong offset!");
static_assert(offsetof(GopFL_GetDataTableEvent, ReturnValue) == 0x000008, "Member 'GopFL_GetDataTableEvent::ReturnValue' has a wrong offset!");

// Function Nicola.GopTextBlock.DebugSetGopID
// 0x0028 (0x0028 - 0x0000)
struct GopTextBlock_DebugSetGopID final
{
public:
	class FText                                   InGop;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InArg00;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GopTextBlock_DebugSetGopID) == 0x000008, "Wrong alignment on GopTextBlock_DebugSetGopID");
static_assert(sizeof(GopTextBlock_DebugSetGopID) == 0x000028, "Wrong size on GopTextBlock_DebugSetGopID");
static_assert(offsetof(GopTextBlock_DebugSetGopID, InGop) == 0x000000, "Member 'GopTextBlock_DebugSetGopID::InGop' has a wrong offset!");
static_assert(offsetof(GopTextBlock_DebugSetGopID, InArg00) == 0x000018, "Member 'GopTextBlock_DebugSetGopID::InArg00' has a wrong offset!");

// Function Nicola.InputFL.GetLeftStickTilt
// 0x0008 (0x0008 - 0x0000)
struct InputFL_GetLeftStickTilt final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputFL_GetLeftStickTilt) == 0x000004, "Wrong alignment on InputFL_GetLeftStickTilt");
static_assert(sizeof(InputFL_GetLeftStickTilt) == 0x000008, "Wrong size on InputFL_GetLeftStickTilt");
static_assert(offsetof(InputFL_GetLeftStickTilt, inputMode) == 0x000000, "Member 'InputFL_GetLeftStickTilt::inputMode' has a wrong offset!");
static_assert(offsetof(InputFL_GetLeftStickTilt, ReturnValue) == 0x000004, "Member 'InputFL_GetLeftStickTilt::ReturnValue' has a wrong offset!");

// Function Nicola.InputFL.IsAnyDirectionalKey
// 0x0002 (0x0002 - 0x0000)
struct InputFL_IsAnyDirectionalKey final
{
public:
	ENicolaInputMode                              inputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputFL_IsAnyDirectionalKey) == 0x000001, "Wrong alignment on InputFL_IsAnyDirectionalKey");
static_assert(sizeof(InputFL_IsAnyDirectionalKey) == 0x000002, "Wrong size on InputFL_IsAnyDirectionalKey");
static_assert(offsetof(InputFL_IsAnyDirectionalKey, inputMode) == 0x000000, "Member 'InputFL_IsAnyDirectionalKey::inputMode' has a wrong offset!");
static_assert(offsetof(InputFL_IsAnyDirectionalKey, ReturnValue) == 0x000001, "Member 'InputFL_IsAnyDirectionalKey::ReturnValue' has a wrong offset!");

// Function Nicola.InterpFloat.CancelTransition
// 0x0001 (0x0001 - 0x0000)
struct InterpFloat_CancelTransition final
{
public:
	bool                                          bCallDelegate;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterpFloat_CancelTransition) == 0x000001, "Wrong alignment on InterpFloat_CancelTransition");
static_assert(sizeof(InterpFloat_CancelTransition) == 0x000001, "Wrong size on InterpFloat_CancelTransition");
static_assert(offsetof(InterpFloat_CancelTransition, bCallDelegate) == 0x000000, "Member 'InterpFloat_CancelTransition::bCallDelegate' has a wrong offset!");

// Function Nicola.InterpFloat.Clamp
// 0x0008 (0x0008 - 0x0000)
struct InterpFloat_Clamp final
{
public:
	float                                         NewClampValueMin;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewClampValueMax;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterpFloat_Clamp) == 0x000004, "Wrong alignment on InterpFloat_Clamp");
static_assert(sizeof(InterpFloat_Clamp) == 0x000008, "Wrong size on InterpFloat_Clamp");
static_assert(offsetof(InterpFloat_Clamp, NewClampValueMin) == 0x000000, "Member 'InterpFloat_Clamp::NewClampValueMin' has a wrong offset!");
static_assert(offsetof(InterpFloat_Clamp, NewClampValueMax) == 0x000004, "Member 'InterpFloat_Clamp::NewClampValueMax' has a wrong offset!");

// Function Nicola.InterpFloat.SetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct InterpFloat_SetCurrentValue final
{
public:
	float                                         NewCurrentValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterpFloat_SetCurrentValue) == 0x000004, "Wrong alignment on InterpFloat_SetCurrentValue");
static_assert(sizeof(InterpFloat_SetCurrentValue) == 0x000004, "Wrong size on InterpFloat_SetCurrentValue");
static_assert(offsetof(InterpFloat_SetCurrentValue, NewCurrentValue) == 0x000000, "Member 'InterpFloat_SetCurrentValue::NewCurrentValue' has a wrong offset!");

// Function Nicola.InterpFloat.StartTransition
// 0x0008 (0x0008 - 0x0000)
struct InterpFloat_StartTransition final
{
public:
	float                                         NewTargetValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDurationSec;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterpFloat_StartTransition) == 0x000004, "Wrong alignment on InterpFloat_StartTransition");
static_assert(sizeof(InterpFloat_StartTransition) == 0x000008, "Wrong size on InterpFloat_StartTransition");
static_assert(offsetof(InterpFloat_StartTransition, NewTargetValue) == 0x000000, "Member 'InterpFloat_StartTransition::NewTargetValue' has a wrong offset!");
static_assert(offsetof(InterpFloat_StartTransition, NewDurationSec) == 0x000004, "Member 'InterpFloat_StartTransition::NewDurationSec' has a wrong offset!");

// Function Nicola.InterpFloat.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct InterpFloat_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterpFloat_GetCurrentValue) == 0x000004, "Wrong alignment on InterpFloat_GetCurrentValue");
static_assert(sizeof(InterpFloat_GetCurrentValue) == 0x000004, "Wrong size on InterpFloat_GetCurrentValue");
static_assert(offsetof(InterpFloat_GetCurrentValue, ReturnValue) == 0x000000, "Member 'InterpFloat_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function Nicola.InterpFloat.IsOnTransition
// 0x0001 (0x0001 - 0x0000)
struct InterpFloat_IsOnTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterpFloat_IsOnTransition) == 0x000001, "Wrong alignment on InterpFloat_IsOnTransition");
static_assert(sizeof(InterpFloat_IsOnTransition) == 0x000001, "Wrong size on InterpFloat_IsOnTransition");
static_assert(offsetof(InterpFloat_IsOnTransition, ReturnValue) == 0x000000, "Member 'InterpFloat_IsOnTransition::ReturnValue' has a wrong offset!");

// Function Nicola.LevelFL.IsEndMakingMapData
// 0x0001 (0x0001 - 0x0000)
struct LevelFL_IsEndMakingMapData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFL_IsEndMakingMapData) == 0x000001, "Wrong alignment on LevelFL_IsEndMakingMapData");
static_assert(sizeof(LevelFL_IsEndMakingMapData) == 0x000001, "Wrong size on LevelFL_IsEndMakingMapData");
static_assert(offsetof(LevelFL_IsEndMakingMapData, ReturnValue) == 0x000000, "Member 'LevelFL_IsEndMakingMapData::ReturnValue' has a wrong offset!");

// Function Nicola.LevelFL.ReturnTitle
// 0x0008 (0x0008 - 0x0000)
struct LevelFL_ReturnTitle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelFL_ReturnTitle) == 0x000008, "Wrong alignment on LevelFL_ReturnTitle");
static_assert(sizeof(LevelFL_ReturnTitle) == 0x000008, "Wrong size on LevelFL_ReturnTitle");
static_assert(offsetof(LevelFL_ReturnTitle, WorldContextObject) == 0x000000, "Member 'LevelFL_ReturnTitle::WorldContextObject' has a wrong offset!");

// Function Nicola.LightingFL.ActivateVariation
// 0x0008 (0x0008 - 0x0000)
struct LightingFL_ActivateVariation final
{
public:
	class FName                                   variationName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_ActivateVariation) == 0x000004, "Wrong alignment on LightingFL_ActivateVariation");
static_assert(sizeof(LightingFL_ActivateVariation) == 0x000008, "Wrong size on LightingFL_ActivateVariation");
static_assert(offsetof(LightingFL_ActivateVariation, variationName) == 0x000000, "Member 'LightingFL_ActivateVariation::variationName' has a wrong offset!");

// Function Nicola.LightingFL.DeactivateVariation
// 0x0008 (0x0008 - 0x0000)
struct LightingFL_DeactivateVariation final
{
public:
	class FName                                   variationName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_DeactivateVariation) == 0x000004, "Wrong alignment on LightingFL_DeactivateVariation");
static_assert(sizeof(LightingFL_DeactivateVariation) == 0x000008, "Wrong size on LightingFL_DeactivateVariation");
static_assert(offsetof(LightingFL_DeactivateVariation, variationName) == 0x000000, "Member 'LightingFL_DeactivateVariation::variationName' has a wrong offset!");

// Function Nicola.LightingFL.GetFieldSymbolLightingRate
// 0x0004 (0x0004 - 0x0000)
struct LightingFL_GetFieldSymbolLightingRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_GetFieldSymbolLightingRate) == 0x000004, "Wrong alignment on LightingFL_GetFieldSymbolLightingRate");
static_assert(sizeof(LightingFL_GetFieldSymbolLightingRate) == 0x000004, "Wrong size on LightingFL_GetFieldSymbolLightingRate");
static_assert(offsetof(LightingFL_GetFieldSymbolLightingRate, ReturnValue) == 0x000000, "Member 'LightingFL_GetFieldSymbolLightingRate::ReturnValue' has a wrong offset!");

// Function Nicola.LightingFL.IsCatchingDirectionalLight
// 0x0001 (0x0001 - 0x0000)
struct LightingFL_IsCatchingDirectionalLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_IsCatchingDirectionalLight) == 0x000001, "Wrong alignment on LightingFL_IsCatchingDirectionalLight");
static_assert(sizeof(LightingFL_IsCatchingDirectionalLight) == 0x000001, "Wrong size on LightingFL_IsCatchingDirectionalLight");
static_assert(offsetof(LightingFL_IsCatchingDirectionalLight, ReturnValue) == 0x000000, "Member 'LightingFL_IsCatchingDirectionalLight::ReturnValue' has a wrong offset!");

// Function Nicola.LightingFL.IsCatchingLightDirRotator
// 0x0001 (0x0001 - 0x0000)
struct LightingFL_IsCatchingLightDirRotator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_IsCatchingLightDirRotator) == 0x000001, "Wrong alignment on LightingFL_IsCatchingLightDirRotator");
static_assert(sizeof(LightingFL_IsCatchingLightDirRotator) == 0x000001, "Wrong size on LightingFL_IsCatchingLightDirRotator");
static_assert(offsetof(LightingFL_IsCatchingLightDirRotator, ReturnValue) == 0x000000, "Member 'LightingFL_IsCatchingLightDirRotator::ReturnValue' has a wrong offset!");

// Function Nicola.LightingFL.SetDirectionalLightInfo
// 0x0014 (0x0014 - 0x0000)
struct LightingFL_SetDirectionalLightInfo final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapTimeFrame                                 MapTime;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   subLevelId;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_SetDirectionalLightInfo) == 0x000004, "Wrong alignment on LightingFL_SetDirectionalLightInfo");
static_assert(sizeof(LightingFL_SetDirectionalLightInfo) == 0x000014, "Wrong size on LightingFL_SetDirectionalLightInfo");
static_assert(offsetof(LightingFL_SetDirectionalLightInfo, MapId) == 0x000000, "Member 'LightingFL_SetDirectionalLightInfo::MapId' has a wrong offset!");
static_assert(offsetof(LightingFL_SetDirectionalLightInfo, MapTime) == 0x000008, "Member 'LightingFL_SetDirectionalLightInfo::MapTime' has a wrong offset!");
static_assert(offsetof(LightingFL_SetDirectionalLightInfo, subLevelId) == 0x00000C, "Member 'LightingFL_SetDirectionalLightInfo::subLevelId' has a wrong offset!");

// Function Nicola.LightingFL.SetLightDirRotatorInfo
// 0x0014 (0x0014 - 0x0000)
struct LightingFL_SetLightDirRotatorInfo final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapTimeFrame                                 MapTime;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   subLevelId;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_SetLightDirRotatorInfo) == 0x000004, "Wrong alignment on LightingFL_SetLightDirRotatorInfo");
static_assert(sizeof(LightingFL_SetLightDirRotatorInfo) == 0x000014, "Wrong size on LightingFL_SetLightDirRotatorInfo");
static_assert(offsetof(LightingFL_SetLightDirRotatorInfo, MapId) == 0x000000, "Member 'LightingFL_SetLightDirRotatorInfo::MapId' has a wrong offset!");
static_assert(offsetof(LightingFL_SetLightDirRotatorInfo, MapTime) == 0x000008, "Member 'LightingFL_SetLightDirRotatorInfo::MapTime' has a wrong offset!");
static_assert(offsetof(LightingFL_SetLightDirRotatorInfo, subLevelId) == 0x00000C, "Member 'LightingFL_SetLightDirRotatorInfo::subLevelId' has a wrong offset!");

// Function Nicola.LightingFL.SetVisibleLightingActors
// 0x0002 (0x0002 - 0x0000)
struct LightingFL_SetVisibleLightingActors final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetByRotator;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_SetVisibleLightingActors) == 0x000001, "Wrong alignment on LightingFL_SetVisibleLightingActors");
static_assert(sizeof(LightingFL_SetVisibleLightingActors) == 0x000002, "Wrong size on LightingFL_SetVisibleLightingActors");
static_assert(offsetof(LightingFL_SetVisibleLightingActors, bVisible) == 0x000000, "Member 'LightingFL_SetVisibleLightingActors::bVisible' has a wrong offset!");
static_assert(offsetof(LightingFL_SetVisibleLightingActors, bSetByRotator) == 0x000001, "Member 'LightingFL_SetVisibleLightingActors::bSetByRotator' has a wrong offset!");

// Function Nicola.LightingFL.UpdateFieldSymbolLighting
// 0x0004 (0x0004 - 0x0000)
struct LightingFL_UpdateFieldSymbolLighting final
{
public:
	float                                         lightingRate;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingFL_UpdateFieldSymbolLighting) == 0x000004, "Wrong alignment on LightingFL_UpdateFieldSymbolLighting");
static_assert(sizeof(LightingFL_UpdateFieldSymbolLighting) == 0x000004, "Wrong size on LightingFL_UpdateFieldSymbolLighting");
static_assert(offsetof(LightingFL_UpdateFieldSymbolLighting, lightingRate) == 0x000000, "Member 'LightingFL_UpdateFieldSymbolLighting::lightingRate' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.BP_GetSystemFlag
// 0x0008 (0x0008 - 0x0000)
struct LuaFunctionLibrary_BP_GetSystemFlag final
{
public:
	int32                                         flagNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LuaFunctionLibrary_BP_GetSystemFlag) == 0x000004, "Wrong alignment on LuaFunctionLibrary_BP_GetSystemFlag");
static_assert(sizeof(LuaFunctionLibrary_BP_GetSystemFlag) == 0x000008, "Wrong size on LuaFunctionLibrary_BP_GetSystemFlag");
static_assert(offsetof(LuaFunctionLibrary_BP_GetSystemFlag, flagNo) == 0x000000, "Member 'LuaFunctionLibrary_BP_GetSystemFlag::flagNo' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_BP_GetSystemFlag, ReturnValue) == 0x000004, "Member 'LuaFunctionLibrary_BP_GetSystemFlag::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.BP_GetSystemFlagByName
// 0x000C (0x000C - 0x0000)
struct LuaFunctionLibrary_BP_GetSystemFlagByName final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LuaFunctionLibrary_BP_GetSystemFlagByName) == 0x000004, "Wrong alignment on LuaFunctionLibrary_BP_GetSystemFlagByName");
static_assert(sizeof(LuaFunctionLibrary_BP_GetSystemFlagByName) == 0x00000C, "Wrong size on LuaFunctionLibrary_BP_GetSystemFlagByName");
static_assert(offsetof(LuaFunctionLibrary_BP_GetSystemFlagByName, FlagName) == 0x000000, "Member 'LuaFunctionLibrary_BP_GetSystemFlagByName::FlagName' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_BP_GetSystemFlagByName, ReturnValue) == 0x000008, "Member 'LuaFunctionLibrary_BP_GetSystemFlagByName::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.BP_SetSystemFlag
// 0x0008 (0x0008 - 0x0000)
struct LuaFunctionLibrary_BP_SetSystemFlag final
{
public:
	int32                                         flagNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flag;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LuaFunctionLibrary_BP_SetSystemFlag) == 0x000004, "Wrong alignment on LuaFunctionLibrary_BP_SetSystemFlag");
static_assert(sizeof(LuaFunctionLibrary_BP_SetSystemFlag) == 0x000008, "Wrong size on LuaFunctionLibrary_BP_SetSystemFlag");
static_assert(offsetof(LuaFunctionLibrary_BP_SetSystemFlag, flagNo) == 0x000000, "Member 'LuaFunctionLibrary_BP_SetSystemFlag::flagNo' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_BP_SetSystemFlag, flag) == 0x000004, "Member 'LuaFunctionLibrary_BP_SetSystemFlag::flag' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.BP_SetSystemFlagByName
// 0x000C (0x000C - 0x0000)
struct LuaFunctionLibrary_BP_SetSystemFlagByName final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LuaFunctionLibrary_BP_SetSystemFlagByName) == 0x000004, "Wrong alignment on LuaFunctionLibrary_BP_SetSystemFlagByName");
static_assert(sizeof(LuaFunctionLibrary_BP_SetSystemFlagByName) == 0x00000C, "Wrong size on LuaFunctionLibrary_BP_SetSystemFlagByName");
static_assert(offsetof(LuaFunctionLibrary_BP_SetSystemFlagByName, FlagName) == 0x000000, "Member 'LuaFunctionLibrary_BP_SetSystemFlagByName::FlagName' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_BP_SetSystemFlagByName, flag) == 0x000008, "Member 'LuaFunctionLibrary_BP_SetSystemFlagByName::flag' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.DebugAllEventPlay
// 0x0010 (0x0010 - 0x0000)
struct LuaFunctionLibrary_DebugAllEventPlay final
{
public:
	class FString                                 StartTitle;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_DebugAllEventPlay) == 0x000008, "Wrong alignment on LuaFunctionLibrary_DebugAllEventPlay");
static_assert(sizeof(LuaFunctionLibrary_DebugAllEventPlay) == 0x000010, "Wrong size on LuaFunctionLibrary_DebugAllEventPlay");
static_assert(offsetof(LuaFunctionLibrary_DebugAllEventPlay, StartTitle) == 0x000000, "Member 'LuaFunctionLibrary_DebugAllEventPlay::StartTitle' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.FindLuaLevelScript
// 0x0028 (0x0028 - 0x0000)
struct LuaFunctionLibrary_FindLuaLevelScript final
{
public:
	class FString                                 levelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExist;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_FindLuaLevelScript) == 0x000008, "Wrong alignment on LuaFunctionLibrary_FindLuaLevelScript");
static_assert(sizeof(LuaFunctionLibrary_FindLuaLevelScript) == 0x000028, "Wrong size on LuaFunctionLibrary_FindLuaLevelScript");
static_assert(offsetof(LuaFunctionLibrary_FindLuaLevelScript, levelName) == 0x000000, "Member 'LuaFunctionLibrary_FindLuaLevelScript::levelName' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_FindLuaLevelScript, bExist) == 0x000010, "Member 'LuaFunctionLibrary_FindLuaLevelScript::bExist' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_FindLuaLevelScript, ReturnValue) == 0x000018, "Member 'LuaFunctionLibrary_FindLuaLevelScript::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.GetActionInputMode
// 0x0001 (0x0001 - 0x0000)
struct LuaFunctionLibrary_GetActionInputMode final
{
public:
	ENicolaInputMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_GetActionInputMode) == 0x000001, "Wrong alignment on LuaFunctionLibrary_GetActionInputMode");
static_assert(sizeof(LuaFunctionLibrary_GetActionInputMode) == 0x000001, "Wrong size on LuaFunctionLibrary_GetActionInputMode");
static_assert(offsetof(LuaFunctionLibrary_GetActionInputMode, ReturnValue) == 0x000000, "Member 'LuaFunctionLibrary_GetActionInputMode::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.GetSystemGlobalVariableByInteger
// 0x0008 (0x0008 - 0x0000)
struct LuaFunctionLibrary_GetSystemGlobalVariableByInteger final
{
public:
	ELuaSysGlobal                                 sysGlobalInfo;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_GetSystemGlobalVariableByInteger) == 0x000004, "Wrong alignment on LuaFunctionLibrary_GetSystemGlobalVariableByInteger");
static_assert(sizeof(LuaFunctionLibrary_GetSystemGlobalVariableByInteger) == 0x000008, "Wrong size on LuaFunctionLibrary_GetSystemGlobalVariableByInteger");
static_assert(offsetof(LuaFunctionLibrary_GetSystemGlobalVariableByInteger, sysGlobalInfo) == 0x000000, "Member 'LuaFunctionLibrary_GetSystemGlobalVariableByInteger::sysGlobalInfo' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_GetSystemGlobalVariableByInteger, ReturnValue) == 0x000004, "Member 'LuaFunctionLibrary_GetSystemGlobalVariableByInteger::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.GetSystemVariableByInteger
// 0x0008 (0x0008 - 0x0000)
struct LuaFunctionLibrary_GetSystemVariableByInteger final
{
public:
	ELuaSysInfo                                   sysInfo;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_GetSystemVariableByInteger) == 0x000004, "Wrong alignment on LuaFunctionLibrary_GetSystemVariableByInteger");
static_assert(sizeof(LuaFunctionLibrary_GetSystemVariableByInteger) == 0x000008, "Wrong size on LuaFunctionLibrary_GetSystemVariableByInteger");
static_assert(offsetof(LuaFunctionLibrary_GetSystemVariableByInteger, sysInfo) == 0x000000, "Member 'LuaFunctionLibrary_GetSystemVariableByInteger::sysInfo' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_GetSystemVariableByInteger, ReturnValue) == 0x000004, "Member 'LuaFunctionLibrary_GetSystemVariableByInteger::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.LoadTextResource
// 0x0038 (0x0038 - 0x0000)
struct LuaFunctionLibrary_LoadTextResource final
{
public:
	class FString                                 dir;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 fname;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 outputText;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDebugMenuResource*                     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_LoadTextResource) == 0x000008, "Wrong alignment on LuaFunctionLibrary_LoadTextResource");
static_assert(sizeof(LuaFunctionLibrary_LoadTextResource) == 0x000038, "Wrong size on LuaFunctionLibrary_LoadTextResource");
static_assert(offsetof(LuaFunctionLibrary_LoadTextResource, dir) == 0x000000, "Member 'LuaFunctionLibrary_LoadTextResource::dir' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_LoadTextResource, fname) == 0x000010, "Member 'LuaFunctionLibrary_LoadTextResource::fname' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_LoadTextResource, outputText) == 0x000020, "Member 'LuaFunctionLibrary_LoadTextResource::outputText' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_LoadTextResource, ReturnValue) == 0x000030, "Member 'LuaFunctionLibrary_LoadTextResource::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.OutputLuaFile
// 0x0040 (0x0040 - 0x0000)
struct LuaFunctionLibrary_OutputLuaFile final
{
public:
	class FString                                 dir;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 fname;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 outputText;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_OutputLuaFile) == 0x000008, "Wrong alignment on LuaFunctionLibrary_OutputLuaFile");
static_assert(sizeof(LuaFunctionLibrary_OutputLuaFile) == 0x000040, "Wrong size on LuaFunctionLibrary_OutputLuaFile");
static_assert(offsetof(LuaFunctionLibrary_OutputLuaFile, dir) == 0x000000, "Member 'LuaFunctionLibrary_OutputLuaFile::dir' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_OutputLuaFile, fname) == 0x000010, "Member 'LuaFunctionLibrary_OutputLuaFile::fname' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_OutputLuaFile, outputText) == 0x000020, "Member 'LuaFunctionLibrary_OutputLuaFile::outputText' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_OutputLuaFile, ReturnValue) == 0x000030, "Member 'LuaFunctionLibrary_OutputLuaFile::ReturnValue' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.SetLuaLevelScript
// 0x0020 (0x0020 - 0x0000)
struct LuaFunctionLibrary_SetLuaLevelScript final
{
public:
	class FString                                 levelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_SetLuaLevelScript) == 0x000008, "Wrong alignment on LuaFunctionLibrary_SetLuaLevelScript");
static_assert(sizeof(LuaFunctionLibrary_SetLuaLevelScript) == 0x000020, "Wrong size on LuaFunctionLibrary_SetLuaLevelScript");
static_assert(offsetof(LuaFunctionLibrary_SetLuaLevelScript, levelName) == 0x000000, "Member 'LuaFunctionLibrary_SetLuaLevelScript::levelName' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_SetLuaLevelScript, ScriptName) == 0x000010, "Member 'LuaFunctionLibrary_SetLuaLevelScript::ScriptName' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.SetMessageActionCommandToLua
// 0x0020 (0x0020 - 0x0000)
struct LuaFunctionLibrary_SetMessageActionCommandToLua final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Argment;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_SetMessageActionCommandToLua) == 0x000008, "Wrong alignment on LuaFunctionLibrary_SetMessageActionCommandToLua");
static_assert(sizeof(LuaFunctionLibrary_SetMessageActionCommandToLua) == 0x000020, "Wrong size on LuaFunctionLibrary_SetMessageActionCommandToLua");
static_assert(offsetof(LuaFunctionLibrary_SetMessageActionCommandToLua, TagName) == 0x000000, "Member 'LuaFunctionLibrary_SetMessageActionCommandToLua::TagName' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_SetMessageActionCommandToLua, Argment) == 0x000010, "Member 'LuaFunctionLibrary_SetMessageActionCommandToLua::Argment' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.SetMessageCommandToLua
// 0x0010 (0x0010 - 0x0000)
struct LuaFunctionLibrary_SetMessageCommandToLua final
{
public:
	class FString                                 MessageCommand;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_SetMessageCommandToLua) == 0x000008, "Wrong alignment on LuaFunctionLibrary_SetMessageCommandToLua");
static_assert(sizeof(LuaFunctionLibrary_SetMessageCommandToLua) == 0x000010, "Wrong size on LuaFunctionLibrary_SetMessageCommandToLua");
static_assert(offsetof(LuaFunctionLibrary_SetMessageCommandToLua, MessageCommand) == 0x000000, "Member 'LuaFunctionLibrary_SetMessageCommandToLua::MessageCommand' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.SetSystemGlobalVariableByInteger
// 0x0008 (0x0008 - 0x0000)
struct LuaFunctionLibrary_SetSystemGlobalVariableByInteger final
{
public:
	ELuaSysGlobal                                 sysGlobalInfo;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_SetSystemGlobalVariableByInteger) == 0x000004, "Wrong alignment on LuaFunctionLibrary_SetSystemGlobalVariableByInteger");
static_assert(sizeof(LuaFunctionLibrary_SetSystemGlobalVariableByInteger) == 0x000008, "Wrong size on LuaFunctionLibrary_SetSystemGlobalVariableByInteger");
static_assert(offsetof(LuaFunctionLibrary_SetSystemGlobalVariableByInteger, sysGlobalInfo) == 0x000000, "Member 'LuaFunctionLibrary_SetSystemGlobalVariableByInteger::sysGlobalInfo' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_SetSystemGlobalVariableByInteger, Value) == 0x000004, "Member 'LuaFunctionLibrary_SetSystemGlobalVariableByInteger::Value' has a wrong offset!");

// Function Nicola.LuaFunctionLibrary.SetSystemVariableByInteger
// 0x0008 (0x0008 - 0x0000)
struct LuaFunctionLibrary_SetSystemVariableByInteger final
{
public:
	ELuaSysInfo                                   sysInfo;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuaFunctionLibrary_SetSystemVariableByInteger) == 0x000004, "Wrong alignment on LuaFunctionLibrary_SetSystemVariableByInteger");
static_assert(sizeof(LuaFunctionLibrary_SetSystemVariableByInteger) == 0x000008, "Wrong size on LuaFunctionLibrary_SetSystemVariableByInteger");
static_assert(offsetof(LuaFunctionLibrary_SetSystemVariableByInteger, sysInfo) == 0x000000, "Member 'LuaFunctionLibrary_SetSystemVariableByInteger::sysInfo' has a wrong offset!");
static_assert(offsetof(LuaFunctionLibrary_SetSystemVariableByInteger, Value) == 0x000004, "Member 'LuaFunctionLibrary_SetSystemVariableByInteger::Value' has a wrong offset!");

// Function Nicola.DebugMenuItem.GetChildMenu
// 0x0008 (0x0008 - 0x0000)
struct DebugMenuItem_GetChildMenu final
{
public:
	class UDebugMenuResource*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuItem_GetChildMenu) == 0x000008, "Wrong alignment on DebugMenuItem_GetChildMenu");
static_assert(sizeof(DebugMenuItem_GetChildMenu) == 0x000008, "Wrong size on DebugMenuItem_GetChildMenu");
static_assert(offsetof(DebugMenuItem_GetChildMenu, ReturnValue) == 0x000000, "Member 'DebugMenuItem_GetChildMenu::ReturnValue' has a wrong offset!");

// Function Nicola.DebugMenuItem.IsChildMenu
// 0x0001 (0x0001 - 0x0000)
struct DebugMenuItem_IsChildMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuItem_IsChildMenu) == 0x000001, "Wrong alignment on DebugMenuItem_IsChildMenu");
static_assert(sizeof(DebugMenuItem_IsChildMenu) == 0x000001, "Wrong size on DebugMenuItem_IsChildMenu");
static_assert(offsetof(DebugMenuItem_IsChildMenu, ReturnValue) == 0x000000, "Member 'DebugMenuItem_IsChildMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldPopup.BPPlayPopup
// 0x0004 (0x0004 - 0x0000)
struct UIFieldPopup_BPPlayPopup final
{
public:
	int32                                         InNum;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldPopup_BPPlayPopup) == 0x000004, "Wrong alignment on UIFieldPopup_BPPlayPopup");
static_assert(sizeof(UIFieldPopup_BPPlayPopup) == 0x000004, "Wrong size on UIFieldPopup_BPPlayPopup");
static_assert(offsetof(UIFieldPopup_BPPlayPopup, InNum) == 0x000000, "Member 'UIFieldPopup_BPPlayPopup::InNum' has a wrong offset!");

// Function Nicola.MapFL.CanLanding
// 0x0002 (0x0002 - 0x0000)
struct MapFL_CanLanding final
{
public:
	EPhysicalSurface                              surfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_CanLanding) == 0x000001, "Wrong alignment on MapFL_CanLanding");
static_assert(sizeof(MapFL_CanLanding) == 0x000002, "Wrong size on MapFL_CanLanding");
static_assert(offsetof(MapFL_CanLanding, surfaceType) == 0x000000, "Member 'MapFL_CanLanding::surfaceType' has a wrong offset!");
static_assert(offsetof(MapFL_CanLanding, ReturnValue) == 0x000001, "Member 'MapFL_CanLanding::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.CanSwim
// 0x0002 (0x0002 - 0x0000)
struct MapFL_CanSwim final
{
public:
	EPhysicalSurface                              surfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_CanSwim) == 0x000001, "Wrong alignment on MapFL_CanSwim");
static_assert(sizeof(MapFL_CanSwim) == 0x000002, "Wrong size on MapFL_CanSwim");
static_assert(offsetof(MapFL_CanSwim, surfaceType) == 0x000000, "Member 'MapFL_CanSwim::surfaceType' has a wrong offset!");
static_assert(offsetof(MapFL_CanSwim, ReturnValue) == 0x000001, "Member 'MapFL_CanSwim::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.CanWalk
// 0x0002 (0x0002 - 0x0000)
struct MapFL_CanWalk final
{
public:
	EPhysicalSurface                              surfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_CanWalk) == 0x000001, "Wrong alignment on MapFL_CanWalk");
static_assert(sizeof(MapFL_CanWalk) == 0x000002, "Wrong size on MapFL_CanWalk");
static_assert(offsetof(MapFL_CanWalk, surfaceType) == 0x000000, "Member 'MapFL_CanWalk::surfaceType' has a wrong offset!");
static_assert(offsetof(MapFL_CanWalk, ReturnValue) == 0x000001, "Member 'MapFL_CanWalk::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.GetActorLevelTransform
// 0x0040 (0x0040 - 0x0000)
struct MapFL_GetActorLevelTransform final
{
public:
	const class AActor*                           TARGET;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetActorLevelTransform) == 0x000010, "Wrong alignment on MapFL_GetActorLevelTransform");
static_assert(sizeof(MapFL_GetActorLevelTransform) == 0x000040, "Wrong size on MapFL_GetActorLevelTransform");
static_assert(offsetof(MapFL_GetActorLevelTransform, TARGET) == 0x000000, "Member 'MapFL_GetActorLevelTransform::TARGET' has a wrong offset!");
static_assert(offsetof(MapFL_GetActorLevelTransform, ReturnValue) == 0x000010, "Member 'MapFL_GetActorLevelTransform::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.GetActorLevelTransformFromActorLocation
// 0x0040 (0x0040 - 0x0000)
struct MapFL_GetActorLevelTransformFromActorLocation final
{
public:
	const class AActor*                           TARGET;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetActorLevelTransformFromActorLocation) == 0x000010, "Wrong alignment on MapFL_GetActorLevelTransformFromActorLocation");
static_assert(sizeof(MapFL_GetActorLevelTransformFromActorLocation) == 0x000040, "Wrong size on MapFL_GetActorLevelTransformFromActorLocation");
static_assert(offsetof(MapFL_GetActorLevelTransformFromActorLocation, TARGET) == 0x000000, "Member 'MapFL_GetActorLevelTransformFromActorLocation::TARGET' has a wrong offset!");
static_assert(offsetof(MapFL_GetActorLevelTransformFromActorLocation, ReturnValue) == 0x000010, "Member 'MapFL_GetActorLevelTransformFromActorLocation::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.GetCurrentMapId
// 0x0008 (0x0008 - 0x0000)
struct MapFL_GetCurrentMapId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetCurrentMapId) == 0x000004, "Wrong alignment on MapFL_GetCurrentMapId");
static_assert(sizeof(MapFL_GetCurrentMapId) == 0x000008, "Wrong size on MapFL_GetCurrentMapId");
static_assert(offsetof(MapFL_GetCurrentMapId, ReturnValue) == 0x000000, "Member 'MapFL_GetCurrentMapId::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.GetFloorMapName
// 0x0020 (0x0020 - 0x0000)
struct MapFL_GetFloorMapName final
{
public:
	class FString                                 PrefixId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetFloorMapName) == 0x000008, "Wrong alignment on MapFL_GetFloorMapName");
static_assert(sizeof(MapFL_GetFloorMapName) == 0x000020, "Wrong size on MapFL_GetFloorMapName");
static_assert(offsetof(MapFL_GetFloorMapName, PrefixId) == 0x000000, "Member 'MapFL_GetFloorMapName::PrefixId' has a wrong offset!");
static_assert(offsetof(MapFL_GetFloorMapName, ReturnValue) == 0x000010, "Member 'MapFL_GetFloorMapName::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.GetFloorMapNameID
// 0x0018 (0x0018 - 0x0000)
struct MapFL_GetFloorMapNameID final
{
public:
	class FString                                 PrefixId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetFloorMapNameID) == 0x000008, "Wrong alignment on MapFL_GetFloorMapNameID");
static_assert(sizeof(MapFL_GetFloorMapNameID) == 0x000018, "Wrong size on MapFL_GetFloorMapNameID");
static_assert(offsetof(MapFL_GetFloorMapNameID, PrefixId) == 0x000000, "Member 'MapFL_GetFloorMapNameID::PrefixId' has a wrong offset!");
static_assert(offsetof(MapFL_GetFloorMapNameID, ReturnValue) == 0x000010, "Member 'MapFL_GetFloorMapNameID::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.GetLanternTable
// 0x0030 (0x0030 - 0x0000)
struct MapFL_GetLanternTable final
{
public:
	bool                                          outValidTable;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGOP_LanternTable                      outTable;                                          // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetLanternTable) == 0x000008, "Wrong alignment on MapFL_GetLanternTable");
static_assert(sizeof(MapFL_GetLanternTable) == 0x000030, "Wrong size on MapFL_GetLanternTable");
static_assert(offsetof(MapFL_GetLanternTable, outValidTable) == 0x000000, "Member 'MapFL_GetLanternTable::outValidTable' has a wrong offset!");
static_assert(offsetof(MapFL_GetLanternTable, outTable) == 0x000008, "Member 'MapFL_GetLanternTable::outTable' has a wrong offset!");

// Function Nicola.MapFL.GetMapIdsByPrefixId
// 0x0018 (0x0018 - 0x0000)
struct MapFL_GetMapIdsByPrefixId final
{
public:
	class FName                                   PrefixId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Result;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetMapIdsByPrefixId) == 0x000008, "Wrong alignment on MapFL_GetMapIdsByPrefixId");
static_assert(sizeof(MapFL_GetMapIdsByPrefixId) == 0x000018, "Wrong size on MapFL_GetMapIdsByPrefixId");
static_assert(offsetof(MapFL_GetMapIdsByPrefixId, PrefixId) == 0x000000, "Member 'MapFL_GetMapIdsByPrefixId::PrefixId' has a wrong offset!");
static_assert(offsetof(MapFL_GetMapIdsByPrefixId, Result) == 0x000008, "Member 'MapFL_GetMapIdsByPrefixId::Result' has a wrong offset!");

// Function Nicola.MapFL.GetMapPrefixIds
// 0x0010 (0x0010 - 0x0000)
struct MapFL_GetMapPrefixIds final
{
public:
	TArray<class FName>                           Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_GetMapPrefixIds) == 0x000008, "Wrong alignment on MapFL_GetMapPrefixIds");
static_assert(sizeof(MapFL_GetMapPrefixIds) == 0x000010, "Wrong size on MapFL_GetMapPrefixIds");
static_assert(offsetof(MapFL_GetMapPrefixIds, Result) == 0x000000, "Member 'MapFL_GetMapPrefixIds::Result' has a wrong offset!");

// Function Nicola.MapFL.SetActorLevelLocation
// 0x00A8 (0x00A8 - 0x0000)
struct MapFL_SetActorLevelLocation final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0018(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFL_SetActorLevelLocation) == 0x000008, "Wrong alignment on MapFL_SetActorLevelLocation");
static_assert(sizeof(MapFL_SetActorLevelLocation) == 0x0000A8, "Wrong size on MapFL_SetActorLevelLocation");
static_assert(offsetof(MapFL_SetActorLevelLocation, TARGET) == 0x000000, "Member 'MapFL_SetActorLevelLocation::TARGET' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocation, NewLocation) == 0x000008, "Member 'MapFL_SetActorLevelLocation::NewLocation' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocation, bSweep) == 0x000014, "Member 'MapFL_SetActorLevelLocation::bSweep' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocation, SweepHitResult) == 0x000018, "Member 'MapFL_SetActorLevelLocation::SweepHitResult' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocation, bTeleport) == 0x0000A0, "Member 'MapFL_SetActorLevelLocation::bTeleport' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocation, ReturnValue) == 0x0000A1, "Member 'MapFL_SetActorLevelLocation::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.SetActorLevelLocationAndRotation
// 0x00B0 (0x00B0 - 0x0000)
struct MapFL_SetActorLevelLocationAndRotation final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0024(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AD(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFL_SetActorLevelLocationAndRotation) == 0x000008, "Wrong alignment on MapFL_SetActorLevelLocationAndRotation");
static_assert(sizeof(MapFL_SetActorLevelLocationAndRotation) == 0x0000B0, "Wrong size on MapFL_SetActorLevelLocationAndRotation");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, TARGET) == 0x000000, "Member 'MapFL_SetActorLevelLocationAndRotation::TARGET' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, NewLocation) == 0x000008, "Member 'MapFL_SetActorLevelLocationAndRotation::NewLocation' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, NewRotation) == 0x000014, "Member 'MapFL_SetActorLevelLocationAndRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, bSweep) == 0x000020, "Member 'MapFL_SetActorLevelLocationAndRotation::bSweep' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, SweepHitResult) == 0x000024, "Member 'MapFL_SetActorLevelLocationAndRotation::SweepHitResult' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, bTeleport) == 0x0000AC, "Member 'MapFL_SetActorLevelLocationAndRotation::bTeleport' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelLocationAndRotation, ReturnValue) == 0x0000AD, "Member 'MapFL_SetActorLevelLocationAndRotation::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.SetActorLevelRotation
// 0x0018 (0x0018 - 0x0000)
struct MapFL_SetActorLevelRotation final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTeleportPhysics;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFL_SetActorLevelRotation) == 0x000008, "Wrong alignment on MapFL_SetActorLevelRotation");
static_assert(sizeof(MapFL_SetActorLevelRotation) == 0x000018, "Wrong size on MapFL_SetActorLevelRotation");
static_assert(offsetof(MapFL_SetActorLevelRotation, TARGET) == 0x000000, "Member 'MapFL_SetActorLevelRotation::TARGET' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelRotation, NewRotation) == 0x000008, "Member 'MapFL_SetActorLevelRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelRotation, bTeleportPhysics) == 0x000014, "Member 'MapFL_SetActorLevelRotation::bTeleportPhysics' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelRotation, ReturnValue) == 0x000015, "Member 'MapFL_SetActorLevelRotation::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.SetActorLevelTransform
// 0x00D0 (0x00D0 - 0x0000)
struct MapFL_SetActorLevelTransform final
{
public:
	class AActor*                                 TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewTransform;                                      // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0044(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x00CC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00CD(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapFL_SetActorLevelTransform) == 0x000010, "Wrong alignment on MapFL_SetActorLevelTransform");
static_assert(sizeof(MapFL_SetActorLevelTransform) == 0x0000D0, "Wrong size on MapFL_SetActorLevelTransform");
static_assert(offsetof(MapFL_SetActorLevelTransform, TARGET) == 0x000000, "Member 'MapFL_SetActorLevelTransform::TARGET' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelTransform, NewTransform) == 0x000010, "Member 'MapFL_SetActorLevelTransform::NewTransform' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelTransform, bSweep) == 0x000040, "Member 'MapFL_SetActorLevelTransform::bSweep' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelTransform, SweepHitResult) == 0x000044, "Member 'MapFL_SetActorLevelTransform::SweepHitResult' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelTransform, bTeleport) == 0x0000CC, "Member 'MapFL_SetActorLevelTransform::bTeleport' has a wrong offset!");
static_assert(offsetof(MapFL_SetActorLevelTransform, ReturnValue) == 0x0000CD, "Member 'MapFL_SetActorLevelTransform::ReturnValue' has a wrong offset!");

// Function Nicola.MapFL.StartMapTransition
// 0x0008 (0x0008 - 0x0000)
struct MapFL_StartMapTransition final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapFL_StartMapTransition) == 0x000004, "Wrong alignment on MapFL_StartMapTransition");
static_assert(sizeof(MapFL_StartMapTransition) == 0x000008, "Wrong size on MapFL_StartMapTransition");
static_assert(offsetof(MapFL_StartMapTransition, MapId) == 0x000000, "Member 'MapFL_StartMapTransition::MapId' has a wrong offset!");

// Function Nicola.MapTimeFL.GetEnableTimePassedFlags
// 0x0005 (0x0005 - 0x0000)
struct MapTimeFL_GetEnableTimePassedFlags final
{
public:
	bool                                          outIsInSystemProcessing;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          outIsInEventProcessing;                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          outIsInBattle;                                     // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          outIsInUIOpening;                                  // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          outIsInUppergroundField;                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_GetEnableTimePassedFlags) == 0x000001, "Wrong alignment on MapTimeFL_GetEnableTimePassedFlags");
static_assert(sizeof(MapTimeFL_GetEnableTimePassedFlags) == 0x000005, "Wrong size on MapTimeFL_GetEnableTimePassedFlags");
static_assert(offsetof(MapTimeFL_GetEnableTimePassedFlags, outIsInSystemProcessing) == 0x000000, "Member 'MapTimeFL_GetEnableTimePassedFlags::outIsInSystemProcessing' has a wrong offset!");
static_assert(offsetof(MapTimeFL_GetEnableTimePassedFlags, outIsInEventProcessing) == 0x000001, "Member 'MapTimeFL_GetEnableTimePassedFlags::outIsInEventProcessing' has a wrong offset!");
static_assert(offsetof(MapTimeFL_GetEnableTimePassedFlags, outIsInBattle) == 0x000002, "Member 'MapTimeFL_GetEnableTimePassedFlags::outIsInBattle' has a wrong offset!");
static_assert(offsetof(MapTimeFL_GetEnableTimePassedFlags, outIsInUIOpening) == 0x000003, "Member 'MapTimeFL_GetEnableTimePassedFlags::outIsInUIOpening' has a wrong offset!");
static_assert(offsetof(MapTimeFL_GetEnableTimePassedFlags, outIsInUppergroundField) == 0x000004, "Member 'MapTimeFL_GetEnableTimePassedFlags::outIsInUppergroundField' has a wrong offset!");

// Function Nicola.MapTimeFL.GetFieldTimeFrame
// 0x0001 (0x0001 - 0x0000)
struct MapTimeFL_GetFieldTimeFrame final
{
public:
	EFieldTimeFrame                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_GetFieldTimeFrame) == 0x000001, "Wrong alignment on MapTimeFL_GetFieldTimeFrame");
static_assert(sizeof(MapTimeFL_GetFieldTimeFrame) == 0x000001, "Wrong size on MapTimeFL_GetFieldTimeFrame");
static_assert(offsetof(MapTimeFL_GetFieldTimeFrame, ReturnValue) == 0x000000, "Member 'MapTimeFL_GetFieldTimeFrame::ReturnValue' has a wrong offset!");

// Function Nicola.MapTimeFL.GetMapMaterialTime
// 0x0004 (0x0004 - 0x0000)
struct MapTimeFL_GetMapMaterialTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_GetMapMaterialTime) == 0x000004, "Wrong alignment on MapTimeFL_GetMapMaterialTime");
static_assert(sizeof(MapTimeFL_GetMapMaterialTime) == 0x000004, "Wrong size on MapTimeFL_GetMapMaterialTime");
static_assert(offsetof(MapTimeFL_GetMapMaterialTime, ReturnValue) == 0x000000, "Member 'MapTimeFL_GetMapMaterialTime::ReturnValue' has a wrong offset!");

// Function Nicola.MapTimeFL.GetMapTimeFrame
// 0x0001 (0x0001 - 0x0000)
struct MapTimeFL_GetMapTimeFrame final
{
public:
	EMapTimeFrame                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_GetMapTimeFrame) == 0x000001, "Wrong alignment on MapTimeFL_GetMapTimeFrame");
static_assert(sizeof(MapTimeFL_GetMapTimeFrame) == 0x000001, "Wrong size on MapTimeFL_GetMapTimeFrame");
static_assert(offsetof(MapTimeFL_GetMapTimeFrame, ReturnValue) == 0x000000, "Member 'MapTimeFL_GetMapTimeFrame::ReturnValue' has a wrong offset!");

// Function Nicola.MapTimeFL.GetMapTimeHour
// 0x0004 (0x0004 - 0x0000)
struct MapTimeFL_GetMapTimeHour final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_GetMapTimeHour) == 0x000004, "Wrong alignment on MapTimeFL_GetMapTimeHour");
static_assert(sizeof(MapTimeFL_GetMapTimeHour) == 0x000004, "Wrong size on MapTimeFL_GetMapTimeHour");
static_assert(offsetof(MapTimeFL_GetMapTimeHour, ReturnValue) == 0x000000, "Member 'MapTimeFL_GetMapTimeHour::ReturnValue' has a wrong offset!");

// Function Nicola.MapTimeFL.IsEnableTimePassed
// 0x0001 (0x0001 - 0x0000)
struct MapTimeFL_IsEnableTimePassed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_IsEnableTimePassed) == 0x000001, "Wrong alignment on MapTimeFL_IsEnableTimePassed");
static_assert(sizeof(MapTimeFL_IsEnableTimePassed) == 0x000001, "Wrong size on MapTimeFL_IsEnableTimePassed");
static_assert(offsetof(MapTimeFL_IsEnableTimePassed, ReturnValue) == 0x000000, "Member 'MapTimeFL_IsEnableTimePassed::ReturnValue' has a wrong offset!");

// Function Nicola.MapTimeFL.SetFieldTimeFrame
// 0x0001 (0x0001 - 0x0000)
struct MapTimeFL_SetFieldTimeFrame final
{
public:
	EFieldTimeFrame                               FieldTimeFrame;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_SetFieldTimeFrame) == 0x000001, "Wrong alignment on MapTimeFL_SetFieldTimeFrame");
static_assert(sizeof(MapTimeFL_SetFieldTimeFrame) == 0x000001, "Wrong size on MapTimeFL_SetFieldTimeFrame");
static_assert(offsetof(MapTimeFL_SetFieldTimeFrame, FieldTimeFrame) == 0x000000, "Member 'MapTimeFL_SetFieldTimeFrame::FieldTimeFrame' has a wrong offset!");

// Function Nicola.MapTimeFL.SetMapTimeFrame
// 0x0001 (0x0001 - 0x0000)
struct MapTimeFL_SetMapTimeFrame final
{
public:
	EMapTimeFrame                                 MapTimeFrame;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_SetMapTimeFrame) == 0x000001, "Wrong alignment on MapTimeFL_SetMapTimeFrame");
static_assert(sizeof(MapTimeFL_SetMapTimeFrame) == 0x000001, "Wrong size on MapTimeFL_SetMapTimeFrame");
static_assert(offsetof(MapTimeFL_SetMapTimeFrame, MapTimeFrame) == 0x000000, "Member 'MapTimeFL_SetMapTimeFrame::MapTimeFrame' has a wrong offset!");

// Function Nicola.MapTimeFL.SetMapTimeHour
// 0x0004 (0x0004 - 0x0000)
struct MapTimeFL_SetMapTimeHour final
{
public:
	int32                                         hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTimeFL_SetMapTimeHour) == 0x000004, "Wrong alignment on MapTimeFL_SetMapTimeHour");
static_assert(sizeof(MapTimeFL_SetMapTimeHour) == 0x000004, "Wrong size on MapTimeFL_SetMapTimeHour");
static_assert(offsetof(MapTimeFL_SetMapTimeHour, hour) == 0x000000, "Member 'MapTimeFL_SetMapTimeHour::hour' has a wrong offset!");

// Function Nicola.UIChurchMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIChurchMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIChurchMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIChurchMenu_IsExecMenu");
static_assert(sizeof(UIChurchMenu_IsExecMenu) == 0x000001, "Wrong size on UIChurchMenu_IsExecMenu");
static_assert(offsetof(UIChurchMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIChurchMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIChurchMenu.OpenMenu
// 0x0010 (0x0010 - 0x0000)
struct UIChurchMenu_OpenMenu final
{
public:
	EChurchMenuMenuMode                           InMenuMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InGopId;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCallMemberIndex;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIChurchMenu_OpenMenu) == 0x000004, "Wrong alignment on UIChurchMenu_OpenMenu");
static_assert(sizeof(UIChurchMenu_OpenMenu) == 0x000010, "Wrong size on UIChurchMenu_OpenMenu");
static_assert(offsetof(UIChurchMenu_OpenMenu, InMenuMode) == 0x000000, "Member 'UIChurchMenu_OpenMenu::InMenuMode' has a wrong offset!");
static_assert(offsetof(UIChurchMenu_OpenMenu, InGopId) == 0x000004, "Member 'UIChurchMenu_OpenMenu::InGopId' has a wrong offset!");
static_assert(offsetof(UIChurchMenu_OpenMenu, InCallMemberIndex) == 0x00000C, "Member 'UIChurchMenu_OpenMenu::InCallMemberIndex' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct NicolaAchievementManager_GetInstance final
{
public:
	class UNicolaAchievementManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_GetInstance) == 0x000008, "Wrong alignment on NicolaAchievementManager_GetInstance");
static_assert(sizeof(NicolaAchievementManager_GetInstance) == 0x000008, "Wrong size on NicolaAchievementManager_GetInstance");
static_assert(offsetof(NicolaAchievementManager_GetInstance, ReturnValue) == 0x000000, "Member 'NicolaAchievementManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.CountupAchievementValue
// 0x0008 (0x0008 - 0x0000)
struct NicolaAchievementManager_CountupAchievementValue final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         addValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_CountupAchievementValue) == 0x000004, "Wrong alignment on NicolaAchievementManager_CountupAchievementValue");
static_assert(sizeof(NicolaAchievementManager_CountupAchievementValue) == 0x000008, "Wrong size on NicolaAchievementManager_CountupAchievementValue");
static_assert(offsetof(NicolaAchievementManager_CountupAchievementValue, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_CountupAchievementValue::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_CountupAchievementValue, addValue) == 0x000004, "Member 'NicolaAchievementManager_CountupAchievementValue::addValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.DebugSetCountValue
// 0x0008 (0x0008 - 0x0000)
struct NicolaAchievementManager_DebugSetCountValue final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_DebugSetCountValue) == 0x000004, "Wrong alignment on NicolaAchievementManager_DebugSetCountValue");
static_assert(sizeof(NicolaAchievementManager_DebugSetCountValue) == 0x000008, "Wrong size on NicolaAchievementManager_DebugSetCountValue");
static_assert(offsetof(NicolaAchievementManager_DebugSetCountValue, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_DebugSetCountValue::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_DebugSetCountValue, InCount) == 0x000004, "Member 'NicolaAchievementManager_DebugSetCountValue::InCount' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.IsUnlockedAchievement
// 0x0002 (0x0002 - 0x0000)
struct NicolaAchievementManager_IsUnlockedAchievement final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_IsUnlockedAchievement) == 0x000001, "Wrong alignment on NicolaAchievementManager_IsUnlockedAchievement");
static_assert(sizeof(NicolaAchievementManager_IsUnlockedAchievement) == 0x000002, "Wrong size on NicolaAchievementManager_IsUnlockedAchievement");
static_assert(offsetof(NicolaAchievementManager_IsUnlockedAchievement, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_IsUnlockedAchievement::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_IsUnlockedAchievement, ReturnValue) == 0x000001, "Member 'NicolaAchievementManager_IsUnlockedAchievement::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.OnFinishCacheAchievements
// 0x0001 (0x0001 - 0x0000)
struct NicolaAchievementManager_OnFinishCacheAchievements final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_OnFinishCacheAchievements) == 0x000001, "Wrong alignment on NicolaAchievementManager_OnFinishCacheAchievements");
static_assert(sizeof(NicolaAchievementManager_OnFinishCacheAchievements) == 0x000001, "Wrong size on NicolaAchievementManager_OnFinishCacheAchievements");
static_assert(offsetof(NicolaAchievementManager_OnFinishCacheAchievements, bSuccess) == 0x000000, "Member 'NicolaAchievementManager_OnFinishCacheAchievements::bSuccess' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.RequestResetAchievements
// 0x0001 (0x0001 - 0x0000)
struct NicolaAchievementManager_RequestResetAchievements final
{
public:
	bool                                          bResetCount;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_RequestResetAchievements) == 0x000001, "Wrong alignment on NicolaAchievementManager_RequestResetAchievements");
static_assert(sizeof(NicolaAchievementManager_RequestResetAchievements) == 0x000001, "Wrong size on NicolaAchievementManager_RequestResetAchievements");
static_assert(offsetof(NicolaAchievementManager_RequestResetAchievements, bResetCount) == 0x000000, "Member 'NicolaAchievementManager_RequestResetAchievements::bResetCount' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.RequestUnlockAchievement
// 0x0001 (0x0001 - 0x0000)
struct NicolaAchievementManager_RequestUnlockAchievement final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_RequestUnlockAchievement) == 0x000001, "Wrong alignment on NicolaAchievementManager_RequestUnlockAchievement");
static_assert(sizeof(NicolaAchievementManager_RequestUnlockAchievement) == 0x000001, "Wrong size on NicolaAchievementManager_RequestUnlockAchievement");
static_assert(offsetof(NicolaAchievementManager_RequestUnlockAchievement, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_RequestUnlockAchievement::AchievementID' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.RequestUnlockAchievementIfAchievedCount
// 0x000C (0x000C - 0x0000)
struct NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount) == 0x000004, "Wrong alignment on NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount");
static_assert(sizeof(NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount) == 0x00000C, "Wrong size on NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount");
static_assert(offsetof(NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount, InCount) == 0x000004, "Member 'NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount::InCount' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount, ReturnValue) == 0x000008, "Member 'NicolaAchievementManager_RequestUnlockAchievementIfAchievedCount::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.DebugGetAchievementNameToEnum
// 0x000C (0x000C - 0x0000)
struct NicolaAchievementManager_DebugGetAchievementNameToEnum final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAchievement                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaAchievementManager_DebugGetAchievementNameToEnum) == 0x000004, "Wrong alignment on NicolaAchievementManager_DebugGetAchievementNameToEnum");
static_assert(sizeof(NicolaAchievementManager_DebugGetAchievementNameToEnum) == 0x00000C, "Wrong size on NicolaAchievementManager_DebugGetAchievementNameToEnum");
static_assert(offsetof(NicolaAchievementManager_DebugGetAchievementNameToEnum, InName) == 0x000000, "Member 'NicolaAchievementManager_DebugGetAchievementNameToEnum::InName' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_DebugGetAchievementNameToEnum, ReturnValue) == 0x000008, "Member 'NicolaAchievementManager_DebugGetAchievementNameToEnum::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.DebugGetCountLimit
// 0x0008 (0x0008 - 0x0000)
struct NicolaAchievementManager_DebugGetCountLimit final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_DebugGetCountLimit) == 0x000004, "Wrong alignment on NicolaAchievementManager_DebugGetCountLimit");
static_assert(sizeof(NicolaAchievementManager_DebugGetCountLimit) == 0x000008, "Wrong size on NicolaAchievementManager_DebugGetCountLimit");
static_assert(offsetof(NicolaAchievementManager_DebugGetCountLimit, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_DebugGetCountLimit::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_DebugGetCountLimit, ReturnValue) == 0x000004, "Member 'NicolaAchievementManager_DebugGetCountLimit::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.DebugGetCountValue
// 0x0008 (0x0008 - 0x0000)
struct NicolaAchievementManager_DebugGetCountValue final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_DebugGetCountValue) == 0x000004, "Wrong alignment on NicolaAchievementManager_DebugGetCountValue");
static_assert(sizeof(NicolaAchievementManager_DebugGetCountValue) == 0x000008, "Wrong size on NicolaAchievementManager_DebugGetCountValue");
static_assert(offsetof(NicolaAchievementManager_DebugGetCountValue, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_DebugGetCountValue::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_DebugGetCountValue, ReturnValue) == 0x000004, "Member 'NicolaAchievementManager_DebugGetCountValue::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.IsInitializedAchievementSystem
// 0x0001 (0x0001 - 0x0000)
struct NicolaAchievementManager_IsInitializedAchievementSystem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_IsInitializedAchievementSystem) == 0x000001, "Wrong alignment on NicolaAchievementManager_IsInitializedAchievementSystem");
static_assert(sizeof(NicolaAchievementManager_IsInitializedAchievementSystem) == 0x000001, "Wrong size on NicolaAchievementManager_IsInitializedAchievementSystem");
static_assert(offsetof(NicolaAchievementManager_IsInitializedAchievementSystem, ReturnValue) == 0x000000, "Member 'NicolaAchievementManager_IsInitializedAchievementSystem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaAchievementManager.IsValidAchievement
// 0x0003 (0x0003 - 0x0000)
struct NicolaAchievementManager_IsValidAchievement final
{
public:
	EAchievement                                  AchievementID;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidPlatinum;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaAchievementManager_IsValidAchievement) == 0x000001, "Wrong alignment on NicolaAchievementManager_IsValidAchievement");
static_assert(sizeof(NicolaAchievementManager_IsValidAchievement) == 0x000003, "Wrong size on NicolaAchievementManager_IsValidAchievement");
static_assert(offsetof(NicolaAchievementManager_IsValidAchievement, AchievementID) == 0x000000, "Member 'NicolaAchievementManager_IsValidAchievement::AchievementID' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_IsValidAchievement, bValidPlatinum) == 0x000001, "Member 'NicolaAchievementManager_IsValidAchievement::bValidPlatinum' has a wrong offset!");
static_assert(offsetof(NicolaAchievementManager_IsValidAchievement, ReturnValue) == 0x000002, "Member 'NicolaAchievementManager_IsValidAchievement::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaActionComponent.PlaySequencerAnimation
// 0x0008 (0x0008 - 0x0000)
struct NicolaActionComponent_PlaySequencerAnimation final
{
public:
	EAnimationType                                animationType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaActionComponent_PlaySequencerAnimation) == 0x000004, "Wrong alignment on NicolaActionComponent_PlaySequencerAnimation");
static_assert(sizeof(NicolaActionComponent_PlaySequencerAnimation) == 0x000008, "Wrong size on NicolaActionComponent_PlaySequencerAnimation");
static_assert(offsetof(NicolaActionComponent_PlaySequencerAnimation, animationType) == 0x000000, "Member 'NicolaActionComponent_PlaySequencerAnimation::animationType' has a wrong offset!");
static_assert(offsetof(NicolaActionComponent_PlaySequencerAnimation, IsLoop) == 0x000001, "Member 'NicolaActionComponent_PlaySequencerAnimation::IsLoop' has a wrong offset!");
static_assert(offsetof(NicolaActionComponent_PlaySequencerAnimation, PlayRate) == 0x000004, "Member 'NicolaActionComponent_PlaySequencerAnimation::PlayRate' has a wrong offset!");

// Function Nicola.NicolaActionInputModeInterface.OnChangeActionInputMode
// 0x0002 (0x0002 - 0x0000)
struct NicolaActionInputModeInterface_OnChangeActionInputMode final
{
public:
	ENicolaInputMode                              prevInputMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicolaInputMode                              newInputMode;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaActionInputModeInterface_OnChangeActionInputMode) == 0x000001, "Wrong alignment on NicolaActionInputModeInterface_OnChangeActionInputMode");
static_assert(sizeof(NicolaActionInputModeInterface_OnChangeActionInputMode) == 0x000002, "Wrong size on NicolaActionInputModeInterface_OnChangeActionInputMode");
static_assert(offsetof(NicolaActionInputModeInterface_OnChangeActionInputMode, prevInputMode) == 0x000000, "Member 'NicolaActionInputModeInterface_OnChangeActionInputMode::prevInputMode' has a wrong offset!");
static_assert(offsetof(NicolaActionInputModeInterface_OnChangeActionInputMode, newInputMode) == 0x000001, "Member 'NicolaActionInputModeInterface_OnChangeActionInputMode::newInputMode' has a wrong offset!");

// Function Nicola.NicolaBattleCameraActor.SetFocusRelativeOffset
// 0x0018 (0x0018 - 0x0000)
struct NicolaBattleCameraActor_SetFocusRelativeOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleCameraActor_SetFocusRelativeOffset) == 0x000004, "Wrong alignment on NicolaBattleCameraActor_SetFocusRelativeOffset");
static_assert(sizeof(NicolaBattleCameraActor_SetFocusRelativeOffset) == 0x000018, "Wrong size on NicolaBattleCameraActor_SetFocusRelativeOffset");
static_assert(offsetof(NicolaBattleCameraActor_SetFocusRelativeOffset, Offset) == 0x000000, "Member 'NicolaBattleCameraActor_SetFocusRelativeOffset::Offset' has a wrong offset!");
static_assert(offsetof(NicolaBattleCameraActor_SetFocusRelativeOffset, ReturnValue) == 0x00000C, "Member 'NicolaBattleCameraActor_SetFocusRelativeOffset::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleCameraActor.GetFocusRelativeOffset
// 0x000C (0x000C - 0x0000)
struct NicolaBattleCameraActor_GetFocusRelativeOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleCameraActor_GetFocusRelativeOffset) == 0x000004, "Wrong alignment on NicolaBattleCameraActor_GetFocusRelativeOffset");
static_assert(sizeof(NicolaBattleCameraActor_GetFocusRelativeOffset) == 0x00000C, "Wrong size on NicolaBattleCameraActor_GetFocusRelativeOffset");
static_assert(offsetof(NicolaBattleCameraActor_GetFocusRelativeOffset, ReturnValue) == 0x000000, "Member 'NicolaBattleCameraActor_GetFocusRelativeOffset::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.AddScoutMonster
// 0x000C (0x000C - 0x0000)
struct NicolaBattleRoadDebugFL_AddScoutMonster final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_AddScoutMonster) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_AddScoutMonster");
static_assert(sizeof(NicolaBattleRoadDebugFL_AddScoutMonster) == 0x00000C, "Wrong size on NicolaBattleRoadDebugFL_AddScoutMonster");
static_assert(offsetof(NicolaBattleRoadDebugFL_AddScoutMonster, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_AddScoutMonster::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_AddScoutMonster, InAddCount) == 0x000008, "Member 'NicolaBattleRoadDebugFL_AddScoutMonster::InAddCount' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.AddScoutMonsterSpecies
// 0x0004 (0x0004 - 0x0000)
struct NicolaBattleRoadDebugFL_AddScoutMonsterSpecies final
{
public:
	int32                                         InAddCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_AddScoutMonsterSpecies) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_AddScoutMonsterSpecies");
static_assert(sizeof(NicolaBattleRoadDebugFL_AddScoutMonsterSpecies) == 0x000004, "Wrong size on NicolaBattleRoadDebugFL_AddScoutMonsterSpecies");
static_assert(offsetof(NicolaBattleRoadDebugFL_AddScoutMonsterSpecies, InAddCount) == 0x000000, "Member 'NicolaBattleRoadDebugFL_AddScoutMonsterSpecies::InAddCount' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetBattleRoadMonsterNameSpeciesIdMap
// 0x0050 (0x0050 - 0x0000)
struct NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap final
{
public:
	TMap<class FString, class FName>              outMap;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap) == 0x000008, "Wrong alignment on NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap) == 0x000050, "Wrong size on NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap, outMap) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetBattleRoadMonsterNameSpeciesIdMap::outMap' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetGopMonsterSpeciesIdList
// 0x0010 (0x0010 - 0x0000)
struct NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList final
{
public:
	TArray<class FName>                           OutGopIdList;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList) == 0x000008, "Wrong alignment on NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList) == 0x000010, "Wrong size on NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList, OutGopIdList) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetGopMonsterSpeciesIdList::OutGopIdList' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetMBRClearRankIdList
// 0x0010 (0x0010 - 0x0000)
struct NicolaBattleRoadDebugFL_GetMBRClearRankIdList final
{
public:
	TArray<class FName>                           OutList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetMBRClearRankIdList) == 0x000008, "Wrong alignment on NicolaBattleRoadDebugFL_GetMBRClearRankIdList");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetMBRClearRankIdList) == 0x000010, "Wrong size on NicolaBattleRoadDebugFL_GetMBRClearRankIdList");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMBRClearRankIdList, OutList) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetMBRClearRankIdList::OutList' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetMBRRankName
// 0x0010 (0x0010 - 0x0000)
struct NicolaBattleRoadDebugFL_GetMBRRankName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetMBRRankName) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_GetMBRRankName");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetMBRRankName) == 0x000010, "Wrong size on NicolaBattleRoadDebugFL_GetMBRRankName");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMBRRankName, InName) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetMBRRankName::InName' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMBRRankName, ReturnValue) == 0x000008, "Member 'NicolaBattleRoadDebugFL_GetMBRRankName::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetMonsterName
// 0x0014 (0x0014 - 0x0000)
struct NicolaBattleRoadDebugFL_GetMonsterName final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleMonster;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetMonsterName) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_GetMonsterName");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetMonsterName) == 0x000014, "Wrong size on NicolaBattleRoadDebugFL_GetMonsterName");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterName, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetMonsterName::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterName, bBattleMonster) == 0x000008, "Member 'NicolaBattleRoadDebugFL_GetMonsterName::bBattleMonster' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterName, ReturnValue) == 0x00000C, "Member 'NicolaBattleRoadDebugFL_GetMonsterName::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetMonsterScoutNum
// 0x000C (0x000C - 0x0000)
struct NicolaBattleRoadDebugFL_GetMonsterScoutNum final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetMonsterScoutNum) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_GetMonsterScoutNum");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetMonsterScoutNum) == 0x00000C, "Wrong size on NicolaBattleRoadDebugFL_GetMonsterScoutNum");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterScoutNum, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetMonsterScoutNum::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterScoutNum, ReturnValue) == 0x000008, "Member 'NicolaBattleRoadDebugFL_GetMonsterScoutNum::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetMonsterScoutNumMax
// 0x000C (0x000C - 0x0000)
struct NicolaBattleRoadDebugFL_GetMonsterScoutNumMax final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetMonsterScoutNumMax) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_GetMonsterScoutNumMax");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetMonsterScoutNumMax) == 0x00000C, "Wrong size on NicolaBattleRoadDebugFL_GetMonsterScoutNumMax");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterScoutNumMax, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetMonsterScoutNumMax::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterScoutNumMax, ReturnValue) == 0x000008, "Member 'NicolaBattleRoadDebugFL_GetMonsterScoutNumMax::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.GetMonsterSpecyName
// 0x0010 (0x0010 - 0x0000)
struct NicolaBattleRoadDebugFL_GetMonsterSpecyName final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_GetMonsterSpecyName) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_GetMonsterSpecyName");
static_assert(sizeof(NicolaBattleRoadDebugFL_GetMonsterSpecyName) == 0x000010, "Wrong size on NicolaBattleRoadDebugFL_GetMonsterSpecyName");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterSpecyName, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_GetMonsterSpecyName::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_GetMonsterSpecyName, ReturnValue) == 0x000008, "Member 'NicolaBattleRoadDebugFL_GetMonsterSpecyName::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.SetMBRRankCleared
// 0x0001 (0x0001 - 0x0000)
struct NicolaBattleRoadDebugFL_SetMBRRankCleared final
{
public:
	bool                                          InAll;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_SetMBRRankCleared) == 0x000001, "Wrong alignment on NicolaBattleRoadDebugFL_SetMBRRankCleared");
static_assert(sizeof(NicolaBattleRoadDebugFL_SetMBRRankCleared) == 0x000001, "Wrong size on NicolaBattleRoadDebugFL_SetMBRRankCleared");
static_assert(offsetof(NicolaBattleRoadDebugFL_SetMBRRankCleared, InAll) == 0x000000, "Member 'NicolaBattleRoadDebugFL_SetMBRRankCleared::InAll' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.SetScoutMonsterNum
// 0x000C (0x000C - 0x0000)
struct NicolaBattleRoadDebugFL_SetScoutMonsterNum final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_SetScoutMonsterNum) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_SetScoutMonsterNum");
static_assert(sizeof(NicolaBattleRoadDebugFL_SetScoutMonsterNum) == 0x00000C, "Wrong size on NicolaBattleRoadDebugFL_SetScoutMonsterNum");
static_assert(offsetof(NicolaBattleRoadDebugFL_SetScoutMonsterNum, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_SetScoutMonsterNum::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_SetScoutMonsterNum, InCount) == 0x000008, "Member 'NicolaBattleRoadDebugFL_SetScoutMonsterNum::InCount' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.SubScoutMonster
// 0x000C (0x000C - 0x0000)
struct NicolaBattleRoadDebugFL_SubScoutMonster final
{
public:
	class FName                                   InSpecyId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSubCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_SubScoutMonster) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_SubScoutMonster");
static_assert(sizeof(NicolaBattleRoadDebugFL_SubScoutMonster) == 0x00000C, "Wrong size on NicolaBattleRoadDebugFL_SubScoutMonster");
static_assert(offsetof(NicolaBattleRoadDebugFL_SubScoutMonster, InSpecyId) == 0x000000, "Member 'NicolaBattleRoadDebugFL_SubScoutMonster::InSpecyId' has a wrong offset!");
static_assert(offsetof(NicolaBattleRoadDebugFL_SubScoutMonster, InSubCount) == 0x000008, "Member 'NicolaBattleRoadDebugFL_SubScoutMonster::InSubCount' has a wrong offset!");

// Function Nicola.NicolaBattleRoadDebugFL.SubScoutMonsterSpecies
// 0x0004 (0x0004 - 0x0000)
struct NicolaBattleRoadDebugFL_SubScoutMonsterSpecies final
{
public:
	int32                                         InSubCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaBattleRoadDebugFL_SubScoutMonsterSpecies) == 0x000004, "Wrong alignment on NicolaBattleRoadDebugFL_SubScoutMonsterSpecies");
static_assert(sizeof(NicolaBattleRoadDebugFL_SubScoutMonsterSpecies) == 0x000004, "Wrong size on NicolaBattleRoadDebugFL_SubScoutMonsterSpecies");
static_assert(offsetof(NicolaBattleRoadDebugFL_SubScoutMonsterSpecies, InSubCount) == 0x000000, "Member 'NicolaBattleRoadDebugFL_SubScoutMonsterSpecies::InSubCount' has a wrong offset!");

// Function Nicola.VisualizeEventObjectActor.SetVisibleActors
// 0x000C (0x000C - 0x0000)
struct VisualizeEventObjectActor_SetVisibleActors final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VisualizeEventObjectActor_SetVisibleActors) == 0x000004, "Wrong alignment on VisualizeEventObjectActor_SetVisibleActors");
static_assert(sizeof(VisualizeEventObjectActor_SetVisibleActors) == 0x00000C, "Wrong size on VisualizeEventObjectActor_SetVisibleActors");
static_assert(offsetof(VisualizeEventObjectActor_SetVisibleActors, Tag) == 0x000000, "Member 'VisualizeEventObjectActor_SetVisibleActors::Tag' has a wrong offset!");
static_assert(offsetof(VisualizeEventObjectActor_SetVisibleActors, IsVisible) == 0x000008, "Member 'VisualizeEventObjectActor_SetVisibleActors::IsVisible' has a wrong offset!");

// Function Nicola.NicolaCharacterBase.ChangeVisibility
// 0x0001 (0x0001 - 0x0000)
struct NicolaCharacterBase_ChangeVisibility final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterBase_ChangeVisibility) == 0x000001, "Wrong alignment on NicolaCharacterBase_ChangeVisibility");
static_assert(sizeof(NicolaCharacterBase_ChangeVisibility) == 0x000001, "Wrong size on NicolaCharacterBase_ChangeVisibility");
static_assert(offsetof(NicolaCharacterBase_ChangeVisibility, Enable) == 0x000000, "Member 'NicolaCharacterBase_ChangeVisibility::Enable' has a wrong offset!");

// Function Nicola.NicolaCharacterBase.StartRotationYawBP
// 0x0010 (0x0010 - 0x0000)
struct NicolaCharacterBase_StartRotationYawBP final
{
public:
	struct FRotator                               TargetRotator;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterBase_StartRotationYawBP) == 0x000004, "Wrong alignment on NicolaCharacterBase_StartRotationYawBP");
static_assert(sizeof(NicolaCharacterBase_StartRotationYawBP) == 0x000010, "Wrong size on NicolaCharacterBase_StartRotationYawBP");
static_assert(offsetof(NicolaCharacterBase_StartRotationYawBP, TargetRotator) == 0x000000, "Member 'NicolaCharacterBase_StartRotationYawBP::TargetRotator' has a wrong offset!");
static_assert(offsetof(NicolaCharacterBase_StartRotationYawBP, DurationSec) == 0x00000C, "Member 'NicolaCharacterBase_StartRotationYawBP::DurationSec' has a wrong offset!");

// Function Nicola.NicolaCharacterBase.GetActionComponent
// 0x0008 (0x0008 - 0x0000)
struct NicolaCharacterBase_GetActionComponent final
{
public:
	class UNicolaActionComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaCharacterBase_GetActionComponent) == 0x000008, "Wrong alignment on NicolaCharacterBase_GetActionComponent");
static_assert(sizeof(NicolaCharacterBase_GetActionComponent) == 0x000008, "Wrong size on NicolaCharacterBase_GetActionComponent");
static_assert(offsetof(NicolaCharacterBase_GetActionComponent, ReturnValue) == 0x000000, "Member 'NicolaCharacterBase_GetActionComponent::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaCharacterDebugFL.DebugSpawnAndAlignCharacter
// 0x0014 (0x0014 - 0x0000)
struct NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter final
{
public:
	EUnitClassType                                ClassType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         looksNo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         spaceWidth;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         spaceDepth;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattle;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter) == 0x000004, "Wrong alignment on NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter");
static_assert(sizeof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter) == 0x000014, "Wrong size on NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter, ClassType) == 0x000000, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter::ClassType' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter, looksNo) == 0x000004, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter::looksNo' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter, spaceWidth) == 0x000008, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter::spaceWidth' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter, spaceDepth) == 0x00000C, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter::spaceDepth' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter, bBattle) == 0x000010, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCharacter::bBattle' has a wrong offset!");

// Function Nicola.NicolaCharacterDebugFL.DebugSpawnAndAlignCoffin
// 0x0014 (0x0014 - 0x0000)
struct NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin final
{
public:
	EUnitClassType                                ClassType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         looksNo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         spaceWidth;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         spaceDepth;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattle;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin) == 0x000004, "Wrong alignment on NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin");
static_assert(sizeof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin) == 0x000014, "Wrong size on NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin, ClassType) == 0x000000, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin::ClassType' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin, looksNo) == 0x000004, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin::looksNo' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin, spaceWidth) == 0x000008, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin::spaceWidth' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin, spaceDepth) == 0x00000C, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin::spaceDepth' has a wrong offset!");
static_assert(offsetof(NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin, bBattle) == 0x000010, "Member 'NicolaCharacterDebugFL_DebugSpawnAndAlignCoffin::bBattle' has a wrong offset!");

// Function Nicola.UIBattleRetryMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIBattleRetryMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBattleRetryMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIBattleRetryMenu_IsExecMenu");
static_assert(sizeof(UIBattleRetryMenu_IsExecMenu) == 0x000001, "Wrong size on UIBattleRetryMenu_IsExecMenu");
static_assert(offsetof(UIBattleRetryMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIBattleRetryMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIBattleRetryMenu.OpenMenu
// 0x0008 (0x0008 - 0x0000)
struct UIBattleRetryMenu_OpenMenu final
{
public:
	class FName                                   InDummyEventId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBattleRetryMenu_OpenMenu) == 0x000004, "Wrong alignment on UIBattleRetryMenu_OpenMenu");
static_assert(sizeof(UIBattleRetryMenu_OpenMenu) == 0x000008, "Wrong size on UIBattleRetryMenu_OpenMenu");
static_assert(offsetof(UIBattleRetryMenu_OpenMenu, InDummyEventId) == 0x000000, "Member 'UIBattleRetryMenu_OpenMenu::InDummyEventId' has a wrong offset!");

// Function Nicola.NicolaControllInterface.OnControllerUpdate
// 0x0010 (0x0010 - 0x0000)
struct NicolaControllInterface_OnControllerUpdate final
{
public:
	const class ANicolaPlayerControllerBase*      PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaControllInterface_OnControllerUpdate) == 0x000008, "Wrong alignment on NicolaControllInterface_OnControllerUpdate");
static_assert(sizeof(NicolaControllInterface_OnControllerUpdate) == 0x000010, "Wrong size on NicolaControllInterface_OnControllerUpdate");
static_assert(offsetof(NicolaControllInterface_OnControllerUpdate, PlayerController) == 0x000000, "Member 'NicolaControllInterface_OnControllerUpdate::PlayerController' has a wrong offset!");
static_assert(offsetof(NicolaControllInterface_OnControllerUpdate, DeltaSeconds) == 0x000008, "Member 'NicolaControllInterface_OnControllerUpdate::DeltaSeconds' has a wrong offset!");

// Function Nicola.UIDLCMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIDLCMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDLCMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIDLCMenu_IsExecMenu");
static_assert(sizeof(UIDLCMenu_IsExecMenu) == 0x000001, "Wrong size on UIDLCMenu_IsExecMenu");
static_assert(offsetof(UIDLCMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIDLCMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDataAssetEvent.GetDebugEnableEventFastForwardTimeRate
// 0x0001 (0x0001 - 0x0000)
struct NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate) == 0x000001, "Wrong alignment on NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate");
static_assert(sizeof(NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate) == 0x000001, "Wrong size on NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate");
static_assert(offsetof(NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate, ReturnValue) == 0x000000, "Member 'NicolaDataAssetEvent_GetDebugEnableEventFastForwardTimeRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDataAssetEvent.GetDebugEventFastForwardTimeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate) == 0x000004, "Wrong alignment on NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate");
static_assert(sizeof(NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate) == 0x000004, "Wrong size on NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate");
static_assert(offsetof(NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate, ReturnValue) == 0x000000, "Member 'NicolaDataAssetEvent_GetDebugEventFastForwardTimeRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDataAssetEvent.SetDebugEnableEventFastForwardTimeRate
// 0x0001 (0x0001 - 0x0000)
struct NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate) == 0x000001, "Wrong alignment on NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate");
static_assert(sizeof(NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate) == 0x000001, "Wrong size on NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate");
static_assert(offsetof(NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate, InEnable) == 0x000000, "Member 'NicolaDataAssetEvent_SetDebugEnableEventFastForwardTimeRate::InEnable' has a wrong offset!");

// Function Nicola.NicolaDataAssetEvent.SetDebugEventFastForwardTimeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate final
{
public:
	float                                         InRate;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate) == 0x000004, "Wrong alignment on NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate");
static_assert(sizeof(NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate) == 0x000004, "Wrong size on NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate");
static_assert(offsetof(NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate, InRate) == 0x000000, "Member 'NicolaDataAssetEvent_SetDebugEventFastForwardTimeRate::InRate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetBattleAttackAlwaysDeadType
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetBattleAttackAlwaysDeadType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetBattleAttackAlwaysDeadType) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetBattleAttackAlwaysDeadType");
static_assert(sizeof(NicolaDebugSetting_GetBattleAttackAlwaysDeadType) == 0x000004, "Wrong size on NicolaDebugSetting_GetBattleAttackAlwaysDeadType");
static_assert(offsetof(NicolaDebugSetting_GetBattleAttackAlwaysDeadType, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetBattleAttackAlwaysDeadType::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetBattleAttackDamageZeroType
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetBattleAttackDamageZeroType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetBattleAttackDamageZeroType) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetBattleAttackDamageZeroType");
static_assert(sizeof(NicolaDebugSetting_GetBattleAttackDamageZeroType) == 0x000004, "Wrong size on NicolaDebugSetting_GetBattleAttackDamageZeroType");
static_assert(offsetof(NicolaDebugSetting_GetBattleAttackDamageZeroType, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetBattleAttackDamageZeroType::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetBattleDropItemRarity
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetBattleDropItemRarity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetBattleDropItemRarity) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetBattleDropItemRarity");
static_assert(sizeof(NicolaDebugSetting_GetBattleDropItemRarity) == 0x000004, "Wrong size on NicolaDebugSetting_GetBattleDropItemRarity");
static_assert(offsetof(NicolaDebugSetting_GetBattleDropItemRarity, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetBattleDropItemRarity::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetBgmVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetBgmVolumeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetBgmVolumeRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetBgmVolumeRate");
static_assert(sizeof(NicolaDebugSetting_GetBgmVolumeRate) == 0x000004, "Wrong size on NicolaDebugSetting_GetBgmVolumeRate");
static_assert(offsetof(NicolaDebugSetting_GetBgmVolumeRate, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetBgmVolumeRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetCameraSpeedRateH
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetCameraSpeedRateH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetCameraSpeedRateH) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetCameraSpeedRateH");
static_assert(sizeof(NicolaDebugSetting_GetCameraSpeedRateH) == 0x000004, "Wrong size on NicolaDebugSetting_GetCameraSpeedRateH");
static_assert(offsetof(NicolaDebugSetting_GetCameraSpeedRateH, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetCameraSpeedRateH::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetCameraSpeedRateV
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetCameraSpeedRateV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetCameraSpeedRateV) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetCameraSpeedRateV");
static_assert(sizeof(NicolaDebugSetting_GetCameraSpeedRateV) == 0x000004, "Wrong size on NicolaDebugSetting_GetCameraSpeedRateV");
static_assert(offsetof(NicolaDebugSetting_GetCameraSpeedRateV, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetCameraSpeedRateV::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetCursorBaseRotateByStickAxisDotMin
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin");
static_assert(sizeof(NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin) == 0x000004, "Wrong size on NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin");
static_assert(offsetof(NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetCursorBaseRotateByStickAxisDotMin::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetCursorBaseRotateByStickAxisSizeMin
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin");
static_assert(sizeof(NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin) == 0x000004, "Wrong size on NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin");
static_assert(offsetof(NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetCursorBaseRotateByStickAxisSizeMin::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugBattleActionId
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_GetDebugBattleActionId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugBattleActionId) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugBattleActionId");
static_assert(sizeof(NicolaDebugSetting_GetDebugBattleActionId) == 0x000008, "Wrong size on NicolaDebugSetting_GetDebugBattleActionId");
static_assert(offsetof(NicolaDebugSetting_GetDebugBattleActionId, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugBattleActionId::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugBattleActionPattern
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetDebugBattleActionPattern final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugBattleActionPattern) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugBattleActionPattern");
static_assert(sizeof(NicolaDebugSetting_GetDebugBattleActionPattern) == 0x000004, "Wrong size on NicolaDebugSetting_GetDebugBattleActionPattern");
static_assert(offsetof(NicolaDebugSetting_GetDebugBattleActionPattern, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugBattleActionPattern::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugBattlePlayAction
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_GetDebugBattlePlayAction final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugBattlePlayAction) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugBattlePlayAction");
static_assert(sizeof(NicolaDebugSetting_GetDebugBattlePlayAction) == 0x000008, "Wrong size on NicolaDebugSetting_GetDebugBattlePlayAction");
static_assert(offsetof(NicolaDebugSetting_GetDebugBattlePlayAction, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugBattlePlayAction::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugBattleRandomAction
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetDebugBattleRandomAction final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugBattleRandomAction) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugBattleRandomAction");
static_assert(sizeof(NicolaDebugSetting_GetDebugBattleRandomAction) == 0x000004, "Wrong size on NicolaDebugSetting_GetDebugBattleRandomAction");
static_assert(offsetof(NicolaDebugSetting_GetDebugBattleRandomAction, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugBattleRandomAction::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugForcePersuade
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetDebugForcePersuade final
{
public:
	EDebugForcePersuade                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugForcePersuade) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetDebugForcePersuade");
static_assert(sizeof(NicolaDebugSetting_GetDebugForcePersuade) == 0x000001, "Wrong size on NicolaDebugSetting_GetDebugForcePersuade");
static_assert(offsetof(NicolaDebugSetting_GetDebugForcePersuade, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugForcePersuade::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugLogLevel
// 0x000C (0x000C - 0x0000)
struct NicolaDebugSetting_GetDebugLogLevel final
{
public:
	class FName                                   logCategory;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaDebugSetting_GetDebugLogLevel) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugLogLevel");
static_assert(sizeof(NicolaDebugSetting_GetDebugLogLevel) == 0x00000C, "Wrong size on NicolaDebugSetting_GetDebugLogLevel");
static_assert(offsetof(NicolaDebugSetting_GetDebugLogLevel, logCategory) == 0x000000, "Member 'NicolaDebugSetting_GetDebugLogLevel::logCategory' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_GetDebugLogLevel, ReturnValue) == 0x000008, "Member 'NicolaDebugSetting_GetDebugLogLevel::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugMapTimeProgressRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetDebugMapTimeProgressRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugMapTimeProgressRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugMapTimeProgressRate");
static_assert(sizeof(NicolaDebugSetting_GetDebugMapTimeProgressRate) == 0x000004, "Wrong size on NicolaDebugSetting_GetDebugMapTimeProgressRate");
static_assert(offsetof(NicolaDebugSetting_GetDebugMapTimeProgressRate, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugMapTimeProgressRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugMapTimeProgressSecondsPerHour
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour");
static_assert(sizeof(NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour) == 0x000004, "Wrong size on NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour");
static_assert(offsetof(NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugMapTimeProgressSecondsPerHour::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugMapTimeStart
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetDebugMapTimeStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugMapTimeStart) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugMapTimeStart");
static_assert(sizeof(NicolaDebugSetting_GetDebugMapTimeStart) == 0x000004, "Wrong size on NicolaDebugSetting_GetDebugMapTimeStart");
static_assert(offsetof(NicolaDebugSetting_GetDebugMapTimeStart, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugMapTimeStart::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugSkillTransformTarget
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetDebugSkillTransformTarget final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugSkillTransformTarget) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugSkillTransformTarget");
static_assert(sizeof(NicolaDebugSetting_GetDebugSkillTransformTarget) == 0x000004, "Wrong size on NicolaDebugSetting_GetDebugSkillTransformTarget");
static_assert(offsetof(NicolaDebugSetting_GetDebugSkillTransformTarget, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugSkillTransformTarget::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugUnitPersonality
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_GetDebugUnitPersonality final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugUnitPersonality) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetDebugUnitPersonality");
static_assert(sizeof(NicolaDebugSetting_GetDebugUnitPersonality) == 0x000008, "Wrong size on NicolaDebugSetting_GetDebugUnitPersonality");
static_assert(offsetof(NicolaDebugSetting_GetDebugUnitPersonality, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugUnitPersonality::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetDebugVoteResult
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetDebugVoteResult final
{
public:
	EDebugVoteResult                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetDebugVoteResult) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetDebugVoteResult");
static_assert(sizeof(NicolaDebugSetting_GetDebugVoteResult) == 0x000001, "Wrong size on NicolaDebugSetting_GetDebugVoteResult");
static_assert(offsetof(NicolaDebugSetting_GetDebugVoteResult, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetDebugVoteResult::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetElapsedTimeBattle
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetElapsedTimeBattle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetElapsedTimeBattle) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetElapsedTimeBattle");
static_assert(sizeof(NicolaDebugSetting_GetElapsedTimeBattle) == 0x000004, "Wrong size on NicolaDebugSetting_GetElapsedTimeBattle");
static_assert(offsetof(NicolaDebugSetting_GetElapsedTimeBattle, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetElapsedTimeBattle::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetElapsedTimeBattleType
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetElapsedTimeBattleType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetElapsedTimeBattleType) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetElapsedTimeBattleType");
static_assert(sizeof(NicolaDebugSetting_GetElapsedTimeBattleType) == 0x000004, "Wrong size on NicolaDebugSetting_GetElapsedTimeBattleType");
static_assert(offsetof(NicolaDebugSetting_GetElapsedTimeBattleType, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetElapsedTimeBattleType::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetEnableCursorBaseRotateByStickCheck
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck");
static_assert(sizeof(NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck) == 0x000001, "Wrong size on NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck");
static_assert(offsetof(NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetEnableCursorBaseRotateByStickCheck::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetEnableForceFeedback
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetEnableForceFeedback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetEnableForceFeedback) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetEnableForceFeedback");
static_assert(sizeof(NicolaDebugSetting_GetEnableForceFeedback) == 0x000001, "Wrong size on NicolaDebugSetting_GetEnableForceFeedback");
static_assert(offsetof(NicolaDebugSetting_GetEnableForceFeedback, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetEnableForceFeedback::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetGameClearCount
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetGameClearCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetGameClearCount) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetGameClearCount");
static_assert(sizeof(NicolaDebugSetting_GetGameClearCount) == 0x000004, "Wrong size on NicolaDebugSetting_GetGameClearCount");
static_assert(offsetof(NicolaDebugSetting_GetGameClearCount, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetGameClearCount::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetGameTypeVersion
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetGameTypeVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetGameTypeVersion) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetGameTypeVersion");
static_assert(sizeof(NicolaDebugSetting_GetGameTypeVersion) == 0x000004, "Wrong size on NicolaDebugSetting_GetGameTypeVersion");
static_assert(offsetof(NicolaDebugSetting_GetGameTypeVersion, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetGameTypeVersion::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetPostProcessGainRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetPostProcessGainRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetPostProcessGainRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetPostProcessGainRate");
static_assert(sizeof(NicolaDebugSetting_GetPostProcessGainRate) == 0x000004, "Wrong size on NicolaDebugSetting_GetPostProcessGainRate");
static_assert(offsetof(NicolaDebugSetting_GetPostProcessGainRate, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetPostProcessGainRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetQuickCameraRotation
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetQuickCameraRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetQuickCameraRotation) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetQuickCameraRotation");
static_assert(sizeof(NicolaDebugSetting_GetQuickCameraRotation) == 0x000001, "Wrong size on NicolaDebugSetting_GetQuickCameraRotation");
static_assert(offsetof(NicolaDebugSetting_GetQuickCameraRotation, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetQuickCameraRotation::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetReverseCameraH
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetReverseCameraH final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetReverseCameraH) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetReverseCameraH");
static_assert(sizeof(NicolaDebugSetting_GetReverseCameraH) == 0x000001, "Wrong size on NicolaDebugSetting_GetReverseCameraH");
static_assert(offsetof(NicolaDebugSetting_GetReverseCameraH, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetReverseCameraH::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetReverseCameraV
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_GetReverseCameraV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetReverseCameraV) == 0x000001, "Wrong alignment on NicolaDebugSetting_GetReverseCameraV");
static_assert(sizeof(NicolaDebugSetting_GetReverseCameraV) == 0x000001, "Wrong size on NicolaDebugSetting_GetReverseCameraV");
static_assert(offsetof(NicolaDebugSetting_GetReverseCameraV, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetReverseCameraV::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetSaveLoadErrorCode
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetSaveLoadErrorCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetSaveLoadErrorCode) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetSaveLoadErrorCode");
static_assert(sizeof(NicolaDebugSetting_GetSaveLoadErrorCode) == 0x000004, "Wrong size on NicolaDebugSetting_GetSaveLoadErrorCode");
static_assert(offsetof(NicolaDebugSetting_GetSaveLoadErrorCode, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetSaveLoadErrorCode::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetSeVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetSeVolumeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetSeVolumeRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetSeVolumeRate");
static_assert(sizeof(NicolaDebugSetting_GetSeVolumeRate) == 0x000004, "Wrong size on NicolaDebugSetting_GetSeVolumeRate");
static_assert(offsetof(NicolaDebugSetting_GetSeVolumeRate, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetSeVolumeRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.GetVoiceVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_GetVoiceVolumeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_GetVoiceVolumeRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_GetVoiceVolumeRate");
static_assert(sizeof(NicolaDebugSetting_GetVoiceVolumeRate) == 0x000004, "Wrong size on NicolaDebugSetting_GetVoiceVolumeRate");
static_assert(offsetof(NicolaDebugSetting_GetVoiceVolumeRate, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_GetVoiceVolumeRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugActionFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugActionFlagOn final
{
public:
	EDebugActionFlags                             flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugActionFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugActionFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugActionFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugActionFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugActionFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugActionFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugActionFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugActionFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugBattleFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugBattleFlagOn final
{
public:
	EDebugBattleFlags                             flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugBattleFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugBattleFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugBattleFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugBattleFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugBattleFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugBattleFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugBattleFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugBattleFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugDrawFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugDrawFlagOn final
{
public:
	EDebugDrawFlags                               flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugDrawFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugDrawFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugDrawFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugDrawFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugDrawFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugDrawFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugDrawFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugDrawFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugEtcFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugEtcFlagOn final
{
public:
	EDebugEtcFlags                                flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugEtcFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugEtcFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugEtcFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugEtcFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugEtcFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugEtcFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugEtcFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugEtcFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugSkillFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugSkillFlagOn final
{
public:
	EDebugSkillFlags                              flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugSkillFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugSkillFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugSkillFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugSkillFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugSkillFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugSkillFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugSkillFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugSkillFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugSoundFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugSoundFlagOn final
{
public:
	EDebugSoundFlags                              flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugSoundFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugSoundFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugSoundFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugSoundFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugSoundFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugSoundFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugSoundFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugSoundFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.IsDebugWorldMapFlagOn
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_IsDebugWorldMapFlagOn final
{
public:
	EDebugWorldMapFlags                           flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_IsDebugWorldMapFlagOn) == 0x000001, "Wrong alignment on NicolaDebugSetting_IsDebugWorldMapFlagOn");
static_assert(sizeof(NicolaDebugSetting_IsDebugWorldMapFlagOn) == 0x000002, "Wrong size on NicolaDebugSetting_IsDebugWorldMapFlagOn");
static_assert(offsetof(NicolaDebugSetting_IsDebugWorldMapFlagOn, flag) == 0x000000, "Member 'NicolaDebugSetting_IsDebugWorldMapFlagOn::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_IsDebugWorldMapFlagOn, ReturnValue) == 0x000001, "Member 'NicolaDebugSetting_IsDebugWorldMapFlagOn::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.Reset
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_Reset final
{
public:
	class UNicolaDebugSetting*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_Reset) == 0x000008, "Wrong alignment on NicolaDebugSetting_Reset");
static_assert(sizeof(NicolaDebugSetting_Reset) == 0x000008, "Wrong size on NicolaDebugSetting_Reset");
static_assert(offsetof(NicolaDebugSetting_Reset, ReturnValue) == 0x000000, "Member 'NicolaDebugSetting_Reset::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetBattleAttackAlwaysDeadType
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetBattleAttackAlwaysDeadType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetBattleAttackAlwaysDeadType) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetBattleAttackAlwaysDeadType");
static_assert(sizeof(NicolaDebugSetting_SetBattleAttackAlwaysDeadType) == 0x000004, "Wrong size on NicolaDebugSetting_SetBattleAttackAlwaysDeadType");
static_assert(offsetof(NicolaDebugSetting_SetBattleAttackAlwaysDeadType, Type) == 0x000000, "Member 'NicolaDebugSetting_SetBattleAttackAlwaysDeadType::Type' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetBattleAttackDamageZeroType
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetBattleAttackDamageZeroType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetBattleAttackDamageZeroType) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetBattleAttackDamageZeroType");
static_assert(sizeof(NicolaDebugSetting_SetBattleAttackDamageZeroType) == 0x000004, "Wrong size on NicolaDebugSetting_SetBattleAttackDamageZeroType");
static_assert(offsetof(NicolaDebugSetting_SetBattleAttackDamageZeroType, Type) == 0x000000, "Member 'NicolaDebugSetting_SetBattleAttackDamageZeroType::Type' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetBattleDropItemRarity
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetBattleDropItemRarity final
{
public:
	int32                                         rarity;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetBattleDropItemRarity) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetBattleDropItemRarity");
static_assert(sizeof(NicolaDebugSetting_SetBattleDropItemRarity) == 0x000004, "Wrong size on NicolaDebugSetting_SetBattleDropItemRarity");
static_assert(offsetof(NicolaDebugSetting_SetBattleDropItemRarity, rarity) == 0x000000, "Member 'NicolaDebugSetting_SetBattleDropItemRarity::rarity' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetBgmVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetBgmVolumeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetBgmVolumeRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetBgmVolumeRate");
static_assert(sizeof(NicolaDebugSetting_SetBgmVolumeRate) == 0x000004, "Wrong size on NicolaDebugSetting_SetBgmVolumeRate");
static_assert(offsetof(NicolaDebugSetting_SetBgmVolumeRate, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetBgmVolumeRate::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetCameraSpeedRateH
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetCameraSpeedRateH final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetCameraSpeedRateH) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetCameraSpeedRateH");
static_assert(sizeof(NicolaDebugSetting_SetCameraSpeedRateH) == 0x000004, "Wrong size on NicolaDebugSetting_SetCameraSpeedRateH");
static_assert(offsetof(NicolaDebugSetting_SetCameraSpeedRateH, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetCameraSpeedRateH::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetCameraSpeedRateV
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetCameraSpeedRateV final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetCameraSpeedRateV) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetCameraSpeedRateV");
static_assert(sizeof(NicolaDebugSetting_SetCameraSpeedRateV) == 0x000004, "Wrong size on NicolaDebugSetting_SetCameraSpeedRateV");
static_assert(offsetof(NicolaDebugSetting_SetCameraSpeedRateV, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetCameraSpeedRateV::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetCursorBaseRotateByStickAxisDotMin
// 0x0010 (0x0010 - 0x0000)
struct NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin) == 0x000008, "Wrong alignment on NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin");
static_assert(sizeof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin) == 0x000010, "Wrong size on NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin");
static_assert(offsetof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin, WorldContextObject) == 0x000000, "Member 'NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin, Val) == 0x000008, "Member 'NicolaDebugSetting_SetCursorBaseRotateByStickAxisDotMin::Val' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetCursorBaseRotateByStickAxisSizeMin
// 0x0010 (0x0010 - 0x0000)
struct NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin) == 0x000008, "Wrong alignment on NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin");
static_assert(sizeof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin) == 0x000010, "Wrong size on NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin");
static_assert(offsetof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin, WorldContextObject) == 0x000000, "Member 'NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin, Val) == 0x000008, "Member 'NicolaDebugSetting_SetCursorBaseRotateByStickAxisSizeMin::Val' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugActionFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugActionFlag final
{
public:
	EDebugActionFlags                             flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugActionFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugActionFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugActionFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugActionFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugActionFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugActionFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugActionFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugActionFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugBattleActionId
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_SetDebugBattleActionId final
{
public:
	class FName                                   actionId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugBattleActionId) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugBattleActionId");
static_assert(sizeof(NicolaDebugSetting_SetDebugBattleActionId) == 0x000008, "Wrong size on NicolaDebugSetting_SetDebugBattleActionId");
static_assert(offsetof(NicolaDebugSetting_SetDebugBattleActionId, actionId) == 0x000000, "Member 'NicolaDebugSetting_SetDebugBattleActionId::actionId' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugBattleActionPattern
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetDebugBattleActionPattern final
{
public:
	int32                                         pattern;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugBattleActionPattern) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugBattleActionPattern");
static_assert(sizeof(NicolaDebugSetting_SetDebugBattleActionPattern) == 0x000004, "Wrong size on NicolaDebugSetting_SetDebugBattleActionPattern");
static_assert(offsetof(NicolaDebugSetting_SetDebugBattleActionPattern, pattern) == 0x000000, "Member 'NicolaDebugSetting_SetDebugBattleActionPattern::pattern' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugBattleFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugBattleFlag final
{
public:
	EDebugBattleFlags                             flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugBattleFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugBattleFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugBattleFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugBattleFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugBattleFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugBattleFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugBattleFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugBattleFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugBattlePlayAction
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_SetDebugBattlePlayAction final
{
public:
	class FName                                   actionId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugBattlePlayAction) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugBattlePlayAction");
static_assert(sizeof(NicolaDebugSetting_SetDebugBattlePlayAction) == 0x000008, "Wrong size on NicolaDebugSetting_SetDebugBattlePlayAction");
static_assert(offsetof(NicolaDebugSetting_SetDebugBattlePlayAction, actionId) == 0x000000, "Member 'NicolaDebugSetting_SetDebugBattlePlayAction::actionId' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugBattleRandomAction
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetDebugBattleRandomAction final
{
public:
	int32                                         action;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugBattleRandomAction) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugBattleRandomAction");
static_assert(sizeof(NicolaDebugSetting_SetDebugBattleRandomAction) == 0x000004, "Wrong size on NicolaDebugSetting_SetDebugBattleRandomAction");
static_assert(offsetof(NicolaDebugSetting_SetDebugBattleRandomAction, action) == 0x000000, "Member 'NicolaDebugSetting_SetDebugBattleRandomAction::action' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugDrawFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugDrawFlag final
{
public:
	EDebugDrawFlags                               flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugDrawFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugDrawFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugDrawFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugDrawFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugDrawFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugDrawFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugDrawFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugDrawFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugEtcFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugEtcFlag final
{
public:
	EDebugEtcFlags                                flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugEtcFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugEtcFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugEtcFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugEtcFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugEtcFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugEtcFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugEtcFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugEtcFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugForcePersuade
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_SetDebugForcePersuade final
{
public:
	EDebugForcePersuade                           Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugForcePersuade) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugForcePersuade");
static_assert(sizeof(NicolaDebugSetting_SetDebugForcePersuade) == 0x000001, "Wrong size on NicolaDebugSetting_SetDebugForcePersuade");
static_assert(offsetof(NicolaDebugSetting_SetDebugForcePersuade, Value) == 0x000000, "Member 'NicolaDebugSetting_SetDebugForcePersuade::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugLogLevel
// 0x000C (0x000C - 0x0000)
struct NicolaDebugSetting_SetDebugLogLevel final
{
public:
	class FName                                   logCategory;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         logVerbosity;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaDebugSetting_SetDebugLogLevel) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugLogLevel");
static_assert(sizeof(NicolaDebugSetting_SetDebugLogLevel) == 0x00000C, "Wrong size on NicolaDebugSetting_SetDebugLogLevel");
static_assert(offsetof(NicolaDebugSetting_SetDebugLogLevel, logCategory) == 0x000000, "Member 'NicolaDebugSetting_SetDebugLogLevel::logCategory' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugLogLevel, logVerbosity) == 0x000008, "Member 'NicolaDebugSetting_SetDebugLogLevel::logVerbosity' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugMapTimeProgressRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetDebugMapTimeProgressRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugMapTimeProgressRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugMapTimeProgressRate");
static_assert(sizeof(NicolaDebugSetting_SetDebugMapTimeProgressRate) == 0x000004, "Wrong size on NicolaDebugSetting_SetDebugMapTimeProgressRate");
static_assert(offsetof(NicolaDebugSetting_SetDebugMapTimeProgressRate, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetDebugMapTimeProgressRate::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugMapTimeProgressSecondsPerHour
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour final
{
public:
	float                                         secondsPerHour;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour");
static_assert(sizeof(NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour) == 0x000004, "Wrong size on NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour");
static_assert(offsetof(NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour, secondsPerHour) == 0x000000, "Member 'NicolaDebugSetting_SetDebugMapTimeProgressSecondsPerHour::secondsPerHour' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugMapTimeStart
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetDebugMapTimeStart final
{
public:
	float                                         MapTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugMapTimeStart) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugMapTimeStart");
static_assert(sizeof(NicolaDebugSetting_SetDebugMapTimeStart) == 0x000004, "Wrong size on NicolaDebugSetting_SetDebugMapTimeStart");
static_assert(offsetof(NicolaDebugSetting_SetDebugMapTimeStart, MapTime) == 0x000000, "Member 'NicolaDebugSetting_SetDebugMapTimeStart::MapTime' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugSkillFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugSkillFlag final
{
public:
	EDebugSkillFlags                              flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugSkillFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugSkillFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugSkillFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugSkillFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugSkillFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugSkillFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugSkillFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugSkillFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugSkillTransformTarget
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetDebugSkillTransformTarget final
{
public:
	int32                                         TARGET;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugSkillTransformTarget) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugSkillTransformTarget");
static_assert(sizeof(NicolaDebugSetting_SetDebugSkillTransformTarget) == 0x000004, "Wrong size on NicolaDebugSetting_SetDebugSkillTransformTarget");
static_assert(offsetof(NicolaDebugSetting_SetDebugSkillTransformTarget, TARGET) == 0x000000, "Member 'NicolaDebugSetting_SetDebugSkillTransformTarget::TARGET' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugSoundFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugSoundFlag final
{
public:
	EDebugSoundFlags                              flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugSoundFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugSoundFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugSoundFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugSoundFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugSoundFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugSoundFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugSoundFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugSoundFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugUnitPersonality
// 0x0008 (0x0008 - 0x0000)
struct NicolaDebugSetting_SetDebugUnitPersonality final
{
public:
	class FName                                   TARGET;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugUnitPersonality) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetDebugUnitPersonality");
static_assert(sizeof(NicolaDebugSetting_SetDebugUnitPersonality) == 0x000008, "Wrong size on NicolaDebugSetting_SetDebugUnitPersonality");
static_assert(offsetof(NicolaDebugSetting_SetDebugUnitPersonality, TARGET) == 0x000000, "Member 'NicolaDebugSetting_SetDebugUnitPersonality::TARGET' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugVoteResult
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_SetDebugVoteResult final
{
public:
	EDebugVoteResult                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugVoteResult) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugVoteResult");
static_assert(sizeof(NicolaDebugSetting_SetDebugVoteResult) == 0x000001, "Wrong size on NicolaDebugSetting_SetDebugVoteResult");
static_assert(offsetof(NicolaDebugSetting_SetDebugVoteResult, Value) == 0x000000, "Member 'NicolaDebugSetting_SetDebugVoteResult::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetDebugWorldMapFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaDebugSetting_SetDebugWorldMapFlag final
{
public:
	EDebugWorldMapFlags                           flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetDebugWorldMapFlag) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetDebugWorldMapFlag");
static_assert(sizeof(NicolaDebugSetting_SetDebugWorldMapFlag) == 0x000002, "Wrong size on NicolaDebugSetting_SetDebugWorldMapFlag");
static_assert(offsetof(NicolaDebugSetting_SetDebugWorldMapFlag, flag) == 0x000000, "Member 'NicolaDebugSetting_SetDebugWorldMapFlag::flag' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetDebugWorldMapFlag, Value) == 0x000001, "Member 'NicolaDebugSetting_SetDebugWorldMapFlag::Value' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetElapsedTimeBattle
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetElapsedTimeBattle final
{
public:
	float                                         elapsedTimeBattle_0;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetElapsedTimeBattle) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetElapsedTimeBattle");
static_assert(sizeof(NicolaDebugSetting_SetElapsedTimeBattle) == 0x000004, "Wrong size on NicolaDebugSetting_SetElapsedTimeBattle");
static_assert(offsetof(NicolaDebugSetting_SetElapsedTimeBattle, elapsedTimeBattle_0) == 0x000000, "Member 'NicolaDebugSetting_SetElapsedTimeBattle::elapsedTimeBattle_0' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetElapsedTimeBattleType
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetElapsedTimeBattleType final
{
public:
	int32                                         elapsedTimeBattleType_0;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetElapsedTimeBattleType) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetElapsedTimeBattleType");
static_assert(sizeof(NicolaDebugSetting_SetElapsedTimeBattleType) == 0x000004, "Wrong size on NicolaDebugSetting_SetElapsedTimeBattleType");
static_assert(offsetof(NicolaDebugSetting_SetElapsedTimeBattleType, elapsedTimeBattleType_0) == 0x000000, "Member 'NicolaDebugSetting_SetElapsedTimeBattleType::elapsedTimeBattleType_0' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetEnableCursorBaseRotateByStickCheck
// 0x0010 (0x0010 - 0x0000)
struct NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck) == 0x000008, "Wrong alignment on NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck");
static_assert(sizeof(NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck) == 0x000010, "Wrong size on NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck");
static_assert(offsetof(NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck, WorldContextObject) == 0x000000, "Member 'NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck, bEnable) == 0x000008, "Member 'NicolaDebugSetting_SetEnableCursorBaseRotateByStickCheck::bEnable' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetEnableForceFeedback
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_SetEnableForceFeedback final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetEnableForceFeedback) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetEnableForceFeedback");
static_assert(sizeof(NicolaDebugSetting_SetEnableForceFeedback) == 0x000001, "Wrong size on NicolaDebugSetting_SetEnableForceFeedback");
static_assert(offsetof(NicolaDebugSetting_SetEnableForceFeedback, Enable) == 0x000000, "Member 'NicolaDebugSetting_SetEnableForceFeedback::Enable' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetGameClearCount
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetGameClearCount final
{
public:
	int32                                         gameClearCount_0;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetGameClearCount) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetGameClearCount");
static_assert(sizeof(NicolaDebugSetting_SetGameClearCount) == 0x000004, "Wrong size on NicolaDebugSetting_SetGameClearCount");
static_assert(offsetof(NicolaDebugSetting_SetGameClearCount, gameClearCount_0) == 0x000000, "Member 'NicolaDebugSetting_SetGameClearCount::gameClearCount_0' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetGameTypeVersion
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetGameTypeVersion final
{
public:
	int32                                         GameTypeVersion_0;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetGameTypeVersion) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetGameTypeVersion");
static_assert(sizeof(NicolaDebugSetting_SetGameTypeVersion) == 0x000004, "Wrong size on NicolaDebugSetting_SetGameTypeVersion");
static_assert(offsetof(NicolaDebugSetting_SetGameTypeVersion, GameTypeVersion_0) == 0x000000, "Member 'NicolaDebugSetting_SetGameTypeVersion::GameTypeVersion_0' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetPostProcessGainRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetPostProcessGainRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetPostProcessGainRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetPostProcessGainRate");
static_assert(sizeof(NicolaDebugSetting_SetPostProcessGainRate) == 0x000004, "Wrong size on NicolaDebugSetting_SetPostProcessGainRate");
static_assert(offsetof(NicolaDebugSetting_SetPostProcessGainRate, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetPostProcessGainRate::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetPostProcessGammaRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetPostProcessGammaRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetPostProcessGammaRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetPostProcessGammaRate");
static_assert(sizeof(NicolaDebugSetting_SetPostProcessGammaRate) == 0x000004, "Wrong size on NicolaDebugSetting_SetPostProcessGammaRate");
static_assert(offsetof(NicolaDebugSetting_SetPostProcessGammaRate, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetPostProcessGammaRate::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetQuickCameraRotation
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_SetQuickCameraRotation final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetQuickCameraRotation) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetQuickCameraRotation");
static_assert(sizeof(NicolaDebugSetting_SetQuickCameraRotation) == 0x000001, "Wrong size on NicolaDebugSetting_SetQuickCameraRotation");
static_assert(offsetof(NicolaDebugSetting_SetQuickCameraRotation, Enable) == 0x000000, "Member 'NicolaDebugSetting_SetQuickCameraRotation::Enable' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetReverseCameraH
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_SetReverseCameraH final
{
public:
	bool                                          Reverse;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetReverseCameraH) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetReverseCameraH");
static_assert(sizeof(NicolaDebugSetting_SetReverseCameraH) == 0x000001, "Wrong size on NicolaDebugSetting_SetReverseCameraH");
static_assert(offsetof(NicolaDebugSetting_SetReverseCameraH, Reverse) == 0x000000, "Member 'NicolaDebugSetting_SetReverseCameraH::Reverse' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetReverseCameraV
// 0x0001 (0x0001 - 0x0000)
struct NicolaDebugSetting_SetReverseCameraV final
{
public:
	bool                                          Reverse;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetReverseCameraV) == 0x000001, "Wrong alignment on NicolaDebugSetting_SetReverseCameraV");
static_assert(sizeof(NicolaDebugSetting_SetReverseCameraV) == 0x000001, "Wrong size on NicolaDebugSetting_SetReverseCameraV");
static_assert(offsetof(NicolaDebugSetting_SetReverseCameraV, Reverse) == 0x000000, "Member 'NicolaDebugSetting_SetReverseCameraV::Reverse' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetSaveLoadErrorCode
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetSaveLoadErrorCode final
{
public:
	int32                                         saveLoadErrorCode_0;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetSaveLoadErrorCode) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetSaveLoadErrorCode");
static_assert(sizeof(NicolaDebugSetting_SetSaveLoadErrorCode) == 0x000004, "Wrong size on NicolaDebugSetting_SetSaveLoadErrorCode");
static_assert(offsetof(NicolaDebugSetting_SetSaveLoadErrorCode, saveLoadErrorCode_0) == 0x000000, "Member 'NicolaDebugSetting_SetSaveLoadErrorCode::saveLoadErrorCode_0' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetSeVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetSeVolumeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetSeVolumeRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetSeVolumeRate");
static_assert(sizeof(NicolaDebugSetting_SetSeVolumeRate) == 0x000004, "Wrong size on NicolaDebugSetting_SetSeVolumeRate");
static_assert(offsetof(NicolaDebugSetting_SetSeVolumeRate, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetSeVolumeRate::Rate' has a wrong offset!");

// Function Nicola.NicolaDebugSetting.SetVoiceVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaDebugSetting_SetVoiceVolumeRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaDebugSetting_SetVoiceVolumeRate) == 0x000004, "Wrong alignment on NicolaDebugSetting_SetVoiceVolumeRate");
static_assert(sizeof(NicolaDebugSetting_SetVoiceVolumeRate) == 0x000004, "Wrong size on NicolaDebugSetting_SetVoiceVolumeRate");
static_assert(offsetof(NicolaDebugSetting_SetVoiceVolumeRate, Rate) == 0x000000, "Member 'NicolaDebugSetting_SetVoiceVolumeRate::Rate' has a wrong offset!");

// Function Nicola.NpcAIController.GetNpcRotatorForDirectionType
// 0x0010 (0x0010 - 0x0000)
struct NpcAIController_GetNpcRotatorForDirectionType final
{
public:
	ENpcDirectionType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_GetNpcRotatorForDirectionType) == 0x000004, "Wrong alignment on NpcAIController_GetNpcRotatorForDirectionType");
static_assert(sizeof(NpcAIController_GetNpcRotatorForDirectionType) == 0x000010, "Wrong size on NpcAIController_GetNpcRotatorForDirectionType");
static_assert(offsetof(NpcAIController_GetNpcRotatorForDirectionType, Type) == 0x000000, "Member 'NpcAIController_GetNpcRotatorForDirectionType::Type' has a wrong offset!");
static_assert(offsetof(NpcAIController_GetNpcRotatorForDirectionType, ReturnValue) == 0x000004, "Member 'NpcAIController_GetNpcRotatorForDirectionType::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.ChangeMovePattern
// 0x000C (0x000C - 0x0000)
struct NpcAIController_ChangeMovePattern final
{
public:
	ENpcMovePattern                               NextState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         nextSpeedIdx;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nextWaitIdx;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_ChangeMovePattern) == 0x000004, "Wrong alignment on NpcAIController_ChangeMovePattern");
static_assert(sizeof(NpcAIController_ChangeMovePattern) == 0x00000C, "Wrong size on NpcAIController_ChangeMovePattern");
static_assert(offsetof(NpcAIController_ChangeMovePattern, NextState) == 0x000000, "Member 'NpcAIController_ChangeMovePattern::NextState' has a wrong offset!");
static_assert(offsetof(NpcAIController_ChangeMovePattern, nextSpeedIdx) == 0x000004, "Member 'NpcAIController_ChangeMovePattern::nextSpeedIdx' has a wrong offset!");
static_assert(offsetof(NpcAIController_ChangeMovePattern, nextWaitIdx) == 0x000008, "Member 'NpcAIController_ChangeMovePattern::nextWaitIdx' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptAnimationBP
// 0x000C (0x000C - 0x0000)
struct NpcAIController_InterruptScriptAnimationBP final
{
public:
	EAnimationType                                AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoIdle;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverride;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAIController_InterruptScriptAnimationBP) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptAnimationBP");
static_assert(sizeof(NpcAIController_InterruptScriptAnimationBP) == 0x00000C, "Wrong size on NpcAIController_InterruptScriptAnimationBP");
static_assert(offsetof(NpcAIController_InterruptScriptAnimationBP, AnimType) == 0x000000, "Member 'NpcAIController_InterruptScriptAnimationBP::AnimType' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptAnimationBP, IsLoop) == 0x000001, "Member 'NpcAIController_InterruptScriptAnimationBP::IsLoop' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptAnimationBP, IsAutoIdle) == 0x000002, "Member 'NpcAIController_InterruptScriptAnimationBP::IsAutoIdle' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptAnimationBP, AnimRate) == 0x000004, "Member 'NpcAIController_InterruptScriptAnimationBP::AnimRate' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptAnimationBP, IsOverride) == 0x000008, "Member 'NpcAIController_InterruptScriptAnimationBP::IsOverride' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptJump
// 0x000C (0x000C - 0x0000)
struct NpcAIController_InterruptScriptJump final
{
public:
	float                                         InJumpHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InJumpSeconds;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNoWaitJump;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAIController_InterruptScriptJump) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptJump");
static_assert(sizeof(NpcAIController_InterruptScriptJump) == 0x00000C, "Wrong size on NpcAIController_InterruptScriptJump");
static_assert(offsetof(NpcAIController_InterruptScriptJump, InJumpHeight) == 0x000000, "Member 'NpcAIController_InterruptScriptJump::InJumpHeight' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptJump, InJumpSeconds) == 0x000004, "Member 'NpcAIController_InterruptScriptJump::InJumpSeconds' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptJump, InNoWaitJump) == 0x000008, "Member 'NpcAIController_InterruptScriptJump::InNoWaitJump' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptMove
// 0x001C (0x001C - 0x0000)
struct NpcAIController_InterruptScriptMove final
{
public:
	struct FVector                                targetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRelative;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENpcDirectionType                             DirectionType;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationType                                AnimType;                                          // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRate;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayType;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_InterruptScriptMove) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptMove");
static_assert(sizeof(NpcAIController_InterruptScriptMove) == 0x00001C, "Wrong size on NpcAIController_InterruptScriptMove");
static_assert(offsetof(NpcAIController_InterruptScriptMove, targetLocation) == 0x000000, "Member 'NpcAIController_InterruptScriptMove::targetLocation' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMove, MoveSpeed) == 0x00000C, "Member 'NpcAIController_InterruptScriptMove::MoveSpeed' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMove, IsRelative) == 0x000010, "Member 'NpcAIController_InterruptScriptMove::IsRelative' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMove, DirectionType) == 0x000011, "Member 'NpcAIController_InterruptScriptMove::DirectionType' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMove, AnimType) == 0x000012, "Member 'NpcAIController_InterruptScriptMove::AnimType' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMove, AnimRate) == 0x000014, "Member 'NpcAIController_InterruptScriptMove::AnimRate' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMove, PlayType) == 0x000018, "Member 'NpcAIController_InterruptScriptMove::PlayType' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptMovePhysicsJump
// 0x0018 (0x0018 - 0x0000)
struct NpcAIController_InterruptScriptMovePhysicsJump final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoveSpeed;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InJumpZVelocity;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationType                                InAnimationType;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAIController_InterruptScriptMovePhysicsJump) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptMovePhysicsJump");
static_assert(sizeof(NpcAIController_InterruptScriptMovePhysicsJump) == 0x000018, "Wrong size on NpcAIController_InterruptScriptMovePhysicsJump");
static_assert(offsetof(NpcAIController_InterruptScriptMovePhysicsJump, InLocation) == 0x000000, "Member 'NpcAIController_InterruptScriptMovePhysicsJump::InLocation' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMovePhysicsJump, InMoveSpeed) == 0x00000C, "Member 'NpcAIController_InterruptScriptMovePhysicsJump::InMoveSpeed' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMovePhysicsJump, InJumpZVelocity) == 0x000010, "Member 'NpcAIController_InterruptScriptMovePhysicsJump::InJumpZVelocity' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMovePhysicsJump, InAnimationType) == 0x000014, "Member 'NpcAIController_InterruptScriptMovePhysicsJump::InAnimationType' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptMoveUpOrDownInterpolate
// 0x0014 (0x0014 - 0x0000)
struct NpcAIController_InterruptScriptMoveUpOrDownInterpolate final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMoveUp;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Seconds;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EaseFunc;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseExp;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptMoveUpOrDownInterpolate");
static_assert(sizeof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate) == 0x000014, "Wrong size on NpcAIController_InterruptScriptMoveUpOrDownInterpolate");
static_assert(offsetof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate, Height) == 0x000000, "Member 'NpcAIController_InterruptScriptMoveUpOrDownInterpolate::Height' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate, IsMoveUp) == 0x000004, "Member 'NpcAIController_InterruptScriptMoveUpOrDownInterpolate::IsMoveUp' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate, Seconds) == 0x000008, "Member 'NpcAIController_InterruptScriptMoveUpOrDownInterpolate::Seconds' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate, EaseFunc) == 0x00000C, "Member 'NpcAIController_InterruptScriptMoveUpOrDownInterpolate::EaseFunc' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptMoveUpOrDownInterpolate, EaseExp) == 0x000010, "Member 'NpcAIController_InterruptScriptMoveUpOrDownInterpolate::EaseExp' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptTurn
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_InterruptScriptTurn final
{
public:
	ENpcDirectionType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_InterruptScriptTurn) == 0x000001, "Wrong alignment on NpcAIController_InterruptScriptTurn");
static_assert(sizeof(NpcAIController_InterruptScriptTurn) == 0x000001, "Wrong size on NpcAIController_InterruptScriptTurn");
static_assert(offsetof(NpcAIController_InterruptScriptTurn, Type) == 0x000000, "Member 'NpcAIController_InterruptScriptTurn::Type' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptTurnFromRotation
// 0x0010 (0x0010 - 0x0000)
struct NpcAIController_InterruptScriptTurnFromRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InIsRelative;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAIController_InterruptScriptTurnFromRotation) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptTurnFromRotation");
static_assert(sizeof(NpcAIController_InterruptScriptTurnFromRotation) == 0x000010, "Wrong size on NpcAIController_InterruptScriptTurnFromRotation");
static_assert(offsetof(NpcAIController_InterruptScriptTurnFromRotation, Rotation) == 0x000000, "Member 'NpcAIController_InterruptScriptTurnFromRotation::Rotation' has a wrong offset!");
static_assert(offsetof(NpcAIController_InterruptScriptTurnFromRotation, InIsRelative) == 0x00000C, "Member 'NpcAIController_InterruptScriptTurnFromRotation::InIsRelative' has a wrong offset!");

// Function Nicola.NpcAIController.InterruptScriptWait
// 0x0004 (0x0004 - 0x0000)
struct NpcAIController_InterruptScriptWait final
{
public:
	float                                         InWaitTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_InterruptScriptWait) == 0x000004, "Wrong alignment on NpcAIController_InterruptScriptWait");
static_assert(sizeof(NpcAIController_InterruptScriptWait) == 0x000004, "Wrong size on NpcAIController_InterruptScriptWait");
static_assert(offsetof(NpcAIController_InterruptScriptWait, InWaitTime) == 0x000000, "Member 'NpcAIController_InterruptScriptWait::InWaitTime' has a wrong offset!");

// Function Nicola.NpcAIController.OnCharacterMovementUpdated
// 0x001C (0x001C - 0x0000)
struct NpcAIController_OnCharacterMovementUpdated final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_OnCharacterMovementUpdated) == 0x000004, "Wrong alignment on NpcAIController_OnCharacterMovementUpdated");
static_assert(sizeof(NpcAIController_OnCharacterMovementUpdated) == 0x00001C, "Wrong size on NpcAIController_OnCharacterMovementUpdated");
static_assert(offsetof(NpcAIController_OnCharacterMovementUpdated, DeltaSeconds) == 0x000000, "Member 'NpcAIController_OnCharacterMovementUpdated::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(NpcAIController_OnCharacterMovementUpdated, OldLocation) == 0x000004, "Member 'NpcAIController_OnCharacterMovementUpdated::OldLocation' has a wrong offset!");
static_assert(offsetof(NpcAIController_OnCharacterMovementUpdated, OldVelocity) == 0x000010, "Member 'NpcAIController_OnCharacterMovementUpdated::OldVelocity' has a wrong offset!");

// Function Nicola.NpcAIController.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct NpcAIController_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcAIController_OnComponentHit) == 0x000008, "Wrong alignment on NpcAIController_OnComponentHit");
static_assert(sizeof(NpcAIController_OnComponentHit) == 0x0000B0, "Wrong size on NpcAIController_OnComponentHit");
static_assert(offsetof(NpcAIController_OnComponentHit, HitComponent) == 0x000000, "Member 'NpcAIController_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(NpcAIController_OnComponentHit, OtherActor) == 0x000008, "Member 'NpcAIController_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(NpcAIController_OnComponentHit, OtherComp) == 0x000010, "Member 'NpcAIController_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(NpcAIController_OnComponentHit, NormalImpulse) == 0x000018, "Member 'NpcAIController_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(NpcAIController_OnComponentHit, Hit) == 0x000024, "Member 'NpcAIController_OnComponentHit::Hit' has a wrong offset!");

// Function Nicola.NpcAIController.IsMoveState
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsMoveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsMoveState) == 0x000001, "Wrong alignment on NpcAIController_IsMoveState");
static_assert(sizeof(NpcAIController_IsMoveState) == 0x000001, "Wrong size on NpcAIController_IsMoveState");
static_assert(offsetof(NpcAIController_IsMoveState, ReturnValue) == 0x000000, "Member 'NpcAIController_IsMoveState::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsScriptAnimation
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsScriptAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsScriptAnimation) == 0x000001, "Wrong alignment on NpcAIController_IsScriptAnimation");
static_assert(sizeof(NpcAIController_IsScriptAnimation) == 0x000001, "Wrong size on NpcAIController_IsScriptAnimation");
static_assert(offsetof(NpcAIController_IsScriptAnimation, ReturnValue) == 0x000000, "Member 'NpcAIController_IsScriptAnimation::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsScriptControl
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsScriptControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsScriptControl) == 0x000001, "Wrong alignment on NpcAIController_IsScriptControl");
static_assert(sizeof(NpcAIController_IsScriptControl) == 0x000001, "Wrong size on NpcAIController_IsScriptControl");
static_assert(offsetof(NpcAIController_IsScriptControl, ReturnValue) == 0x000000, "Member 'NpcAIController_IsScriptControl::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsScriptJump
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsScriptJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsScriptJump) == 0x000001, "Wrong alignment on NpcAIController_IsScriptJump");
static_assert(sizeof(NpcAIController_IsScriptJump) == 0x000001, "Wrong size on NpcAIController_IsScriptJump");
static_assert(offsetof(NpcAIController_IsScriptJump, ReturnValue) == 0x000000, "Member 'NpcAIController_IsScriptJump::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsScriptMove
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsScriptMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsScriptMove) == 0x000001, "Wrong alignment on NpcAIController_IsScriptMove");
static_assert(sizeof(NpcAIController_IsScriptMove) == 0x000001, "Wrong size on NpcAIController_IsScriptMove");
static_assert(offsetof(NpcAIController_IsScriptMove, ReturnValue) == 0x000000, "Member 'NpcAIController_IsScriptMove::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsScriptMovePhysicsJump
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsScriptMovePhysicsJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsScriptMovePhysicsJump) == 0x000001, "Wrong alignment on NpcAIController_IsScriptMovePhysicsJump");
static_assert(sizeof(NpcAIController_IsScriptMovePhysicsJump) == 0x000001, "Wrong size on NpcAIController_IsScriptMovePhysicsJump");
static_assert(offsetof(NpcAIController_IsScriptMovePhysicsJump, ReturnValue) == 0x000000, "Member 'NpcAIController_IsScriptMovePhysicsJump::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsScriptTurn
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsScriptTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsScriptTurn) == 0x000001, "Wrong alignment on NpcAIController_IsScriptTurn");
static_assert(sizeof(NpcAIController_IsScriptTurn) == 0x000001, "Wrong size on NpcAIController_IsScriptTurn");
static_assert(offsetof(NpcAIController_IsScriptTurn, ReturnValue) == 0x000000, "Member 'NpcAIController_IsScriptTurn::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsTurnState
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsTurnState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsTurnState) == 0x000001, "Wrong alignment on NpcAIController_IsTurnState");
static_assert(sizeof(NpcAIController_IsTurnState) == 0x000001, "Wrong size on NpcAIController_IsTurnState");
static_assert(offsetof(NpcAIController_IsTurnState, ReturnValue) == 0x000000, "Member 'NpcAIController_IsTurnState::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsWaitCommand
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsWaitCommand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsWaitCommand) == 0x000001, "Wrong alignment on NpcAIController_IsWaitCommand");
static_assert(sizeof(NpcAIController_IsWaitCommand) == 0x000001, "Wrong size on NpcAIController_IsWaitCommand");
static_assert(offsetof(NpcAIController_IsWaitCommand, ReturnValue) == 0x000000, "Member 'NpcAIController_IsWaitCommand::ReturnValue' has a wrong offset!");

// Function Nicola.NpcAIController.IsWaitMoveUpOrDownInterpolate
// 0x0001 (0x0001 - 0x0000)
struct NpcAIController_IsWaitMoveUpOrDownInterpolate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAIController_IsWaitMoveUpOrDownInterpolate) == 0x000001, "Wrong alignment on NpcAIController_IsWaitMoveUpOrDownInterpolate");
static_assert(sizeof(NpcAIController_IsWaitMoveUpOrDownInterpolate) == 0x000001, "Wrong size on NpcAIController_IsWaitMoveUpOrDownInterpolate");
static_assert(offsetof(NpcAIController_IsWaitMoveUpOrDownInterpolate, ReturnValue) == 0x000000, "Member 'NpcAIController_IsWaitMoveUpOrDownInterpolate::ReturnValue' has a wrong offset!");

// Function Nicola.RockPuzzleGimmickActor.OnMoveRockOneSquare
// 0x0008 (0x0008 - 0x0000)
struct RockPuzzleGimmickActor_OnMoveRockOneSquare final
{
public:
	class ARockGimmick*                           RockGimmick;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RockPuzzleGimmickActor_OnMoveRockOneSquare) == 0x000008, "Wrong alignment on RockPuzzleGimmickActor_OnMoveRockOneSquare");
static_assert(sizeof(RockPuzzleGimmickActor_OnMoveRockOneSquare) == 0x000008, "Wrong size on RockPuzzleGimmickActor_OnMoveRockOneSquare");
static_assert(offsetof(RockPuzzleGimmickActor_OnMoveRockOneSquare, RockGimmick) == 0x000000, "Member 'RockPuzzleGimmickActor_OnMoveRockOneSquare::RockGimmick' has a wrong offset!");

// Function Nicola.NicolaEffectManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct NicolaEffectManager_GetInstance final
{
public:
	class UNicolaEffectManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEffectManager_GetInstance) == 0x000008, "Wrong alignment on NicolaEffectManager_GetInstance");
static_assert(sizeof(NicolaEffectManager_GetInstance) == 0x000008, "Wrong size on NicolaEffectManager_GetInstance");
static_assert(offsetof(NicolaEffectManager_GetInstance, ReturnValue) == 0x000000, "Member 'NicolaEffectManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEncountCalcActor.CalcEncountSec
// 0x0010 (0x0010 - 0x0000)
struct NicolaEncountCalcActor_CalcEncountSec final
{
public:
	float                                         min_time;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_time;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         offset_time;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEncountCalcActor_CalcEncountSec) == 0x000004, "Wrong alignment on NicolaEncountCalcActor_CalcEncountSec");
static_assert(sizeof(NicolaEncountCalcActor_CalcEncountSec) == 0x000010, "Wrong size on NicolaEncountCalcActor_CalcEncountSec");
static_assert(offsetof(NicolaEncountCalcActor_CalcEncountSec, min_time) == 0x000000, "Member 'NicolaEncountCalcActor_CalcEncountSec::min_time' has a wrong offset!");
static_assert(offsetof(NicolaEncountCalcActor_CalcEncountSec, max_time) == 0x000004, "Member 'NicolaEncountCalcActor_CalcEncountSec::max_time' has a wrong offset!");
static_assert(offsetof(NicolaEncountCalcActor_CalcEncountSec, offset_time) == 0x000008, "Member 'NicolaEncountCalcActor_CalcEncountSec::offset_time' has a wrong offset!");
static_assert(offsetof(NicolaEncountCalcActor_CalcEncountSec, ReturnValue) == 0x00000C, "Member 'NicolaEncountCalcActor_CalcEncountSec::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEndingManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct NicolaEndingManager_GetInstance final
{
public:
	class UNicolaEndingManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEndingManager_GetInstance) == 0x000008, "Wrong alignment on NicolaEndingManager_GetInstance");
static_assert(sizeof(NicolaEndingManager_GetInstance) == 0x000008, "Wrong size on NicolaEndingManager_GetInstance");
static_assert(offsetof(NicolaEndingManager_GetInstance, ReturnValue) == 0x000000, "Member 'NicolaEndingManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.ResearchSequenceCamera.DebugPlaySequence
// 0x0004 (0x0004 - 0x0000)
struct ResearchSequenceCamera_DebugPlaySequence final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResearchSequenceCamera_DebugPlaySequence) == 0x000004, "Wrong alignment on ResearchSequenceCamera_DebugPlaySequence");
static_assert(sizeof(ResearchSequenceCamera_DebugPlaySequence) == 0x000004, "Wrong size on ResearchSequenceCamera_DebugPlaySequence");
static_assert(offsetof(ResearchSequenceCamera_DebugPlaySequence, Index_0) == 0x000000, "Member 'ResearchSequenceCamera_DebugPlaySequence::Index_0' has a wrong offset!");

// Function Nicola.ResearchSequenceCamera.PlaySequence
// 0x0008 (0x0008 - 0x0000)
struct ResearchSequenceCamera_PlaySequence final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInvisibleNpc;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpToEnd;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ResearchSequenceCamera_PlaySequence) == 0x000004, "Wrong alignment on ResearchSequenceCamera_PlaySequence");
static_assert(sizeof(ResearchSequenceCamera_PlaySequence) == 0x000008, "Wrong size on ResearchSequenceCamera_PlaySequence");
static_assert(offsetof(ResearchSequenceCamera_PlaySequence, Index_0) == 0x000000, "Member 'ResearchSequenceCamera_PlaySequence::Index_0' has a wrong offset!");
static_assert(offsetof(ResearchSequenceCamera_PlaySequence, bIsInvisibleNpc) == 0x000004, "Member 'ResearchSequenceCamera_PlaySequence::bIsInvisibleNpc' has a wrong offset!");
static_assert(offsetof(ResearchSequenceCamera_PlaySequence, bJumpToEnd) == 0x000005, "Member 'ResearchSequenceCamera_PlaySequence::bJumpToEnd' has a wrong offset!");

// Function Nicola.NicolaEventFL.ApplyEventDebug
// 0x0018 (0x0018 - 0x0000)
struct NicolaEventFL_ApplyEventDebug final
{
public:
	class FName                                   EventDebugId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataTable*                       DebugTable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeMap;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaEventFL_ApplyEventDebug) == 0x000008, "Wrong alignment on NicolaEventFL_ApplyEventDebug");
static_assert(sizeof(NicolaEventFL_ApplyEventDebug) == 0x000018, "Wrong size on NicolaEventFL_ApplyEventDebug");
static_assert(offsetof(NicolaEventFL_ApplyEventDebug, EventDebugId) == 0x000000, "Member 'NicolaEventFL_ApplyEventDebug::EventDebugId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ApplyEventDebug, DebugTable) == 0x000008, "Member 'NicolaEventFL_ApplyEventDebug::DebugTable' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ApplyEventDebug, ChangeMap) == 0x000010, "Member 'NicolaEventFL_ApplyEventDebug::ChangeMap' has a wrong offset!");

// Function Nicola.NicolaEventFL.CheckEnableEchoFlute
// 0x0001 (0x0001 - 0x0000)
struct NicolaEventFL_CheckEnableEchoFlute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_CheckEnableEchoFlute) == 0x000001, "Wrong alignment on NicolaEventFL_CheckEnableEchoFlute");
static_assert(sizeof(NicolaEventFL_CheckEnableEchoFlute) == 0x000001, "Wrong size on NicolaEventFL_CheckEnableEchoFlute");
static_assert(offsetof(NicolaEventFL_CheckEnableEchoFlute, ReturnValue) == 0x000000, "Member 'NicolaEventFL_CheckEnableEchoFlute::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.CheckEnableRemirama
// 0x0001 (0x0001 - 0x0000)
struct NicolaEventFL_CheckEnableRemirama final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_CheckEnableRemirama) == 0x000001, "Wrong alignment on NicolaEventFL_CheckEnableRemirama");
static_assert(sizeof(NicolaEventFL_CheckEnableRemirama) == 0x000001, "Wrong size on NicolaEventFL_CheckEnableRemirama");
static_assert(offsetof(NicolaEventFL_CheckEnableRemirama, ReturnValue) == 0x000000, "Member 'NicolaEventFL_CheckEnableRemirama::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.DebugPlayEventScript
// 0x0028 (0x0028 - 0x0000)
struct NicolaEventFL_DebugPlayEventScript final
{
public:
	EEventTriggerType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TriggerID;                                         // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaEventFL_DebugPlayEventScript) == 0x000008, "Wrong alignment on NicolaEventFL_DebugPlayEventScript");
static_assert(sizeof(NicolaEventFL_DebugPlayEventScript) == 0x000028, "Wrong size on NicolaEventFL_DebugPlayEventScript");
static_assert(offsetof(NicolaEventFL_DebugPlayEventScript, Type) == 0x000000, "Member 'NicolaEventFL_DebugPlayEventScript::Type' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_DebugPlayEventScript, TriggerID) == 0x000004, "Member 'NicolaEventFL_DebugPlayEventScript::TriggerID' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_DebugPlayEventScript, EventID) == 0x000010, "Member 'NicolaEventFL_DebugPlayEventScript::EventID' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_DebugPlayEventScript, ReturnValue) == 0x000020, "Member 'NicolaEventFL_DebugPlayEventScript::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.DispelCurseGoldenClaws
// 0x0001 (0x0001 - 0x0000)
struct NicolaEventFL_DispelCurseGoldenClaws final
{
public:
	bool                                          IsPyramidUnderGround;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_DispelCurseGoldenClaws) == 0x000001, "Wrong alignment on NicolaEventFL_DispelCurseGoldenClaws");
static_assert(sizeof(NicolaEventFL_DispelCurseGoldenClaws) == 0x000001, "Wrong size on NicolaEventFL_DispelCurseGoldenClaws");
static_assert(offsetof(NicolaEventFL_DispelCurseGoldenClaws, IsPyramidUnderGround) == 0x000000, "Member 'NicolaEventFL_DispelCurseGoldenClaws::IsPyramidUnderGround' has a wrong offset!");

// Function Nicola.NicolaEventFL.ExistEventForTriggerType
// 0x0002 (0x0002 - 0x0000)
struct NicolaEventFL_ExistEventForTriggerType final
{
public:
	EEventTriggerType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_ExistEventForTriggerType) == 0x000001, "Wrong alignment on NicolaEventFL_ExistEventForTriggerType");
static_assert(sizeof(NicolaEventFL_ExistEventForTriggerType) == 0x000002, "Wrong size on NicolaEventFL_ExistEventForTriggerType");
static_assert(offsetof(NicolaEventFL_ExistEventForTriggerType, Type) == 0x000000, "Member 'NicolaEventFL_ExistEventForTriggerType::Type' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ExistEventForTriggerType, ReturnValue) == 0x000001, "Member 'NicolaEventFL_ExistEventForTriggerType::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetEventDebugDescription
// 0x0018 (0x0018 - 0x0000)
struct NicolaEventFL_GetEventDebugDescription final
{
public:
	class FName                                   EventDebugId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataTable*                       DebugTable;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetEventDebugDescription) == 0x000008, "Wrong alignment on NicolaEventFL_GetEventDebugDescription");
static_assert(sizeof(NicolaEventFL_GetEventDebugDescription) == 0x000018, "Wrong size on NicolaEventFL_GetEventDebugDescription");
static_assert(offsetof(NicolaEventFL_GetEventDebugDescription, EventDebugId) == 0x000000, "Member 'NicolaEventFL_GetEventDebugDescription::EventDebugId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetEventDebugDescription, DebugTable) == 0x000008, "Member 'NicolaEventFL_GetEventDebugDescription::DebugTable' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetEventDebugDescription, ReturnValue) == 0x000010, "Member 'NicolaEventFL_GetEventDebugDescription::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetEventIdList
// 0x0020 (0x0020 - 0x0000)
struct NicolaEventFL_GetEventIdList final
{
public:
	EEventTriggerType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TriggerID;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetEventIdList) == 0x000008, "Wrong alignment on NicolaEventFL_GetEventIdList");
static_assert(sizeof(NicolaEventFL_GetEventIdList) == 0x000020, "Wrong size on NicolaEventFL_GetEventIdList");
static_assert(offsetof(NicolaEventFL_GetEventIdList, Type) == 0x000000, "Member 'NicolaEventFL_GetEventIdList::Type' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetEventIdList, TriggerID) == 0x000004, "Member 'NicolaEventFL_GetEventIdList::TriggerID' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetEventIdList, ReturnValue) == 0x000010, "Member 'NicolaEventFL_GetEventIdList::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetFlagIndexStartEnd
// 0x000C (0x000C - 0x0000)
struct NicolaEventFL_GetFlagIndexStartEnd final
{
public:
	EEventFlagType                                FlagType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Start;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetFlagIndexStartEnd) == 0x000004, "Wrong alignment on NicolaEventFL_GetFlagIndexStartEnd");
static_assert(sizeof(NicolaEventFL_GetFlagIndexStartEnd) == 0x00000C, "Wrong size on NicolaEventFL_GetFlagIndexStartEnd");
static_assert(offsetof(NicolaEventFL_GetFlagIndexStartEnd, FlagType) == 0x000000, "Member 'NicolaEventFL_GetFlagIndexStartEnd::FlagType' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetFlagIndexStartEnd, Start) == 0x000004, "Member 'NicolaEventFL_GetFlagIndexStartEnd::Start' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetFlagIndexStartEnd, End) == 0x000008, "Member 'NicolaEventFL_GetFlagIndexStartEnd::End' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetNumOfSearchObjContainItems
// 0x0008 (0x0008 - 0x0000)
struct NicolaEventFL_GetNumOfSearchObjContainItems final
{
public:
	bool                                          IsCheckOnlyScreen;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetNumOfSearchObjContainItems) == 0x000004, "Wrong alignment on NicolaEventFL_GetNumOfSearchObjContainItems");
static_assert(sizeof(NicolaEventFL_GetNumOfSearchObjContainItems) == 0x000008, "Wrong size on NicolaEventFL_GetNumOfSearchObjContainItems");
static_assert(offsetof(NicolaEventFL_GetNumOfSearchObjContainItems, IsCheckOnlyScreen) == 0x000000, "Member 'NicolaEventFL_GetNumOfSearchObjContainItems::IsCheckOnlyScreen' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetNumOfSearchObjContainItems, ReturnValue) == 0x000004, "Member 'NicolaEventFL_GetNumOfSearchObjContainItems::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetSaveFlagStr
// 0x0018 (0x0018 - 0x0000)
struct NicolaEventFL_GetSaveFlagStr final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetSaveFlagStr) == 0x000008, "Wrong alignment on NicolaEventFL_GetSaveFlagStr");
static_assert(sizeof(NicolaEventFL_GetSaveFlagStr) == 0x000018, "Wrong size on NicolaEventFL_GetSaveFlagStr");
static_assert(offsetof(NicolaEventFL_GetSaveFlagStr, Index_0) == 0x000000, "Member 'NicolaEventFL_GetSaveFlagStr::Index_0' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetSaveFlagStr, ReturnValue) == 0x000008, "Member 'NicolaEventFL_GetSaveFlagStr::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetTriggerIdList
// 0x0018 (0x0018 - 0x0000)
struct NicolaEventFL_GetTriggerIdList final
{
public:
	EEventTriggerType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetTriggerIdList) == 0x000008, "Wrong alignment on NicolaEventFL_GetTriggerIdList");
static_assert(sizeof(NicolaEventFL_GetTriggerIdList) == 0x000018, "Wrong size on NicolaEventFL_GetTriggerIdList");
static_assert(offsetof(NicolaEventFL_GetTriggerIdList, Type) == 0x000000, "Member 'NicolaEventFL_GetTriggerIdList::Type' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_GetTriggerIdList, ReturnValue) == 0x000008, "Member 'NicolaEventFL_GetTriggerIdList::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.GetUIManpuIDList
// 0x0010 (0x0010 - 0x0000)
struct NicolaEventFL_GetUIManpuIDList final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_GetUIManpuIDList) == 0x000008, "Wrong alignment on NicolaEventFL_GetUIManpuIDList");
static_assert(sizeof(NicolaEventFL_GetUIManpuIDList) == 0x000010, "Wrong size on NicolaEventFL_GetUIManpuIDList");
static_assert(offsetof(NicolaEventFL_GetUIManpuIDList, ReturnValue) == 0x000000, "Member 'NicolaEventFL_GetUIManpuIDList::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.IsPlayEventScript
// 0x0001 (0x0001 - 0x0000)
struct NicolaEventFL_IsPlayEventScript final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_IsPlayEventScript) == 0x000001, "Wrong alignment on NicolaEventFL_IsPlayEventScript");
static_assert(sizeof(NicolaEventFL_IsPlayEventScript) == 0x000001, "Wrong size on NicolaEventFL_IsPlayEventScript");
static_assert(offsetof(NicolaEventFL_IsPlayEventScript, ReturnValue) == 0x000000, "Member 'NicolaEventFL_IsPlayEventScript::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.JudgeInpasuType
// 0x0001 (0x0001 - 0x0000)
struct NicolaEventFL_JudgeInpasuType final
{
public:
	EInpasuType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_JudgeInpasuType) == 0x000001, "Wrong alignment on NicolaEventFL_JudgeInpasuType");
static_assert(sizeof(NicolaEventFL_JudgeInpasuType) == 0x000001, "Wrong size on NicolaEventFL_JudgeInpasuType");
static_assert(offsetof(NicolaEventFL_JudgeInpasuType, ReturnValue) == 0x000000, "Member 'NicolaEventFL_JudgeInpasuType::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.MakeEventConditionInfo
// 0x0078 (0x0078 - 0x0000)
struct NicolaEventFL_MakeEventConditionInfo final
{
public:
	class FString                                 InEventId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InProgLower;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InProgUpper;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFlagName1;                                       // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTrueCondition1;                                // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InFlagName2;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsTrueCondition2;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAndOperator;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InGopId;                                           // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventConditionInfo                    ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_MakeEventConditionInfo) == 0x000008, "Wrong alignment on NicolaEventFL_MakeEventConditionInfo");
static_assert(sizeof(NicolaEventFL_MakeEventConditionInfo) == 0x000078, "Wrong size on NicolaEventFL_MakeEventConditionInfo");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InEventId) == 0x000000, "Member 'NicolaEventFL_MakeEventConditionInfo::InEventId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InPriority) == 0x000010, "Member 'NicolaEventFL_MakeEventConditionInfo::InPriority' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InProgLower) == 0x000014, "Member 'NicolaEventFL_MakeEventConditionInfo::InProgLower' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InProgUpper) == 0x000018, "Member 'NicolaEventFL_MakeEventConditionInfo::InProgUpper' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InFlagName1) == 0x00001C, "Member 'NicolaEventFL_MakeEventConditionInfo::InFlagName1' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InIsTrueCondition1) == 0x000024, "Member 'NicolaEventFL_MakeEventConditionInfo::InIsTrueCondition1' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InFlagName2) == 0x000028, "Member 'NicolaEventFL_MakeEventConditionInfo::InFlagName2' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InIsTrueCondition2) == 0x000030, "Member 'NicolaEventFL_MakeEventConditionInfo::InIsTrueCondition2' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, IsAndOperator) == 0x000031, "Member 'NicolaEventFL_MakeEventConditionInfo::IsAndOperator' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, InGopId) == 0x000034, "Member 'NicolaEventFL_MakeEventConditionInfo::InGopId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfo, ReturnValue) == 0x000040, "Member 'NicolaEventFL_MakeEventConditionInfo::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.MakeEventConditionInfoForGOPEventCommon
// 0x0090 (0x0090 - 0x0000)
struct NicolaEventFL_MakeEventConditionInfoForGOPEventCommon final
{
public:
	struct FGOP_Event_CommonTable                 EventTable;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventConditionInfo                    ReturnValue;                                       // 0x0058(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_MakeEventConditionInfoForGOPEventCommon) == 0x000008, "Wrong alignment on NicolaEventFL_MakeEventConditionInfoForGOPEventCommon");
static_assert(sizeof(NicolaEventFL_MakeEventConditionInfoForGOPEventCommon) == 0x000090, "Wrong size on NicolaEventFL_MakeEventConditionInfoForGOPEventCommon");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfoForGOPEventCommon, EventTable) == 0x000000, "Member 'NicolaEventFL_MakeEventConditionInfoForGOPEventCommon::EventTable' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeEventConditionInfoForGOPEventCommon, ReturnValue) == 0x000058, "Member 'NicolaEventFL_MakeEventConditionInfoForGOPEventCommon::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.MakeScriptCommandTag
// 0x0048 (0x0048 - 0x0000)
struct NicolaEventFL_MakeScriptCommandTag final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TriggerID;                                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GopId;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcTypeId;                                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLookAtPlayerToTarget;                            // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionTag;                                      // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_MakeScriptCommandTag) == 0x000008, "Wrong alignment on NicolaEventFL_MakeScriptCommandTag");
static_assert(sizeof(NicolaEventFL_MakeScriptCommandTag) == 0x000048, "Wrong size on NicolaEventFL_MakeScriptCommandTag");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, EventID) == 0x000000, "Member 'NicolaEventFL_MakeScriptCommandTag::EventID' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, TriggerID) == 0x000010, "Member 'NicolaEventFL_MakeScriptCommandTag::TriggerID' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, GopId) == 0x000018, "Member 'NicolaEventFL_MakeScriptCommandTag::GopId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, NpcTypeId) == 0x000020, "Member 'NicolaEventFL_MakeScriptCommandTag::NpcTypeId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, IsLookAtPlayerToTarget) == 0x000028, "Member 'NicolaEventFL_MakeScriptCommandTag::IsLookAtPlayerToTarget' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, CollisionTag) == 0x00002C, "Member 'NicolaEventFL_MakeScriptCommandTag::CollisionTag' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_MakeScriptCommandTag, ReturnValue) == 0x000038, "Member 'NicolaEventFL_MakeScriptCommandTag::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.PlayEffectEchoFlute
// 0x000C (0x000C - 0x0000)
struct NicolaEventFL_PlayEffectEchoFlute final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayEffectTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_PlayEffectEchoFlute) == 0x000004, "Wrong alignment on NicolaEventFL_PlayEffectEchoFlute");
static_assert(sizeof(NicolaEventFL_PlayEffectEchoFlute) == 0x00000C, "Wrong size on NicolaEventFL_PlayEffectEchoFlute");
static_assert(offsetof(NicolaEventFL_PlayEffectEchoFlute, EffectId) == 0x000000, "Member 'NicolaEventFL_PlayEffectEchoFlute::EffectId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEffectEchoFlute, PlayEffectTime) == 0x000008, "Member 'NicolaEventFL_PlayEffectEchoFlute::PlayEffectTime' has a wrong offset!");

// Function Nicola.NicolaEventFL.PlayEffectRemirama
// 0x000C (0x000C - 0x0000)
struct NicolaEventFL_PlayEffectRemirama final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayEffectTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_PlayEffectRemirama) == 0x000004, "Wrong alignment on NicolaEventFL_PlayEffectRemirama");
static_assert(sizeof(NicolaEventFL_PlayEffectRemirama) == 0x00000C, "Wrong size on NicolaEventFL_PlayEffectRemirama");
static_assert(offsetof(NicolaEventFL_PlayEffectRemirama, EffectId) == 0x000000, "Member 'NicolaEventFL_PlayEffectRemirama::EffectId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEffectRemirama, PlayEffectTime) == 0x000008, "Member 'NicolaEventFL_PlayEffectRemirama::PlayEffectTime' has a wrong offset!");

// Function Nicola.NicolaEventFL.PlayEventScript
// 0x0010 (0x0010 - 0x0000)
struct NicolaEventFL_PlayEventScript final
{
public:
	EEventTriggerType                             TriggerType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TriggerID;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaEventFL_PlayEventScript) == 0x000004, "Wrong alignment on NicolaEventFL_PlayEventScript");
static_assert(sizeof(NicolaEventFL_PlayEventScript) == 0x000010, "Wrong size on NicolaEventFL_PlayEventScript");
static_assert(offsetof(NicolaEventFL_PlayEventScript, TriggerType) == 0x000000, "Member 'NicolaEventFL_PlayEventScript::TriggerType' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEventScript, TriggerID) == 0x000004, "Member 'NicolaEventFL_PlayEventScript::TriggerID' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEventScript, ReturnValue) == 0x00000C, "Member 'NicolaEventFL_PlayEventScript::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.PlayEventScriptCommand
// 0x0038 (0x0038 - 0x0000)
struct NicolaEventFL_PlayEventScriptCommand final
{
public:
	class FString                                 EventScriptId;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Args;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaEventFL_PlayEventScriptCommand) == 0x000008, "Wrong alignment on NicolaEventFL_PlayEventScriptCommand");
static_assert(sizeof(NicolaEventFL_PlayEventScriptCommand) == 0x000038, "Wrong size on NicolaEventFL_PlayEventScriptCommand");
static_assert(offsetof(NicolaEventFL_PlayEventScriptCommand, EventScriptId) == 0x000000, "Member 'NicolaEventFL_PlayEventScriptCommand::EventScriptId' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEventScriptCommand, Tags) == 0x000010, "Member 'NicolaEventFL_PlayEventScriptCommand::Tags' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEventScriptCommand, Args) == 0x000020, "Member 'NicolaEventFL_PlayEventScriptCommand::Args' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_PlayEventScriptCommand, ReturnValue) == 0x000030, "Member 'NicolaEventFL_PlayEventScriptCommand::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaEventFL.ReloadEventData
// 0x0030 (0x0030 - 0x0000)
struct NicolaEventFL_ReloadEventData final
{
public:
	class FString                                 ScriptPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             EventTable;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TalkTable;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SearchTable;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_ReloadEventData) == 0x000008, "Wrong alignment on NicolaEventFL_ReloadEventData");
static_assert(sizeof(NicolaEventFL_ReloadEventData) == 0x000030, "Wrong size on NicolaEventFL_ReloadEventData");
static_assert(offsetof(NicolaEventFL_ReloadEventData, ScriptPath) == 0x000000, "Member 'NicolaEventFL_ReloadEventData::ScriptPath' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ReloadEventData, MapName) == 0x000010, "Member 'NicolaEventFL_ReloadEventData::MapName' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ReloadEventData, EventTable) == 0x000018, "Member 'NicolaEventFL_ReloadEventData::EventTable' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ReloadEventData, TalkTable) == 0x000020, "Member 'NicolaEventFL_ReloadEventData::TalkTable' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ReloadEventData, SearchTable) == 0x000028, "Member 'NicolaEventFL_ReloadEventData::SearchTable' has a wrong offset!");

// Function Nicola.NicolaEventFL.RequestEventScreenShotTexture
// 0x0008 (0x0008 - 0x0000)
struct NicolaEventFL_RequestEventScreenShotTexture final
{
public:
	class FName                                   InScreenShotGopId;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_RequestEventScreenShotTexture) == 0x000004, "Wrong alignment on NicolaEventFL_RequestEventScreenShotTexture");
static_assert(sizeof(NicolaEventFL_RequestEventScreenShotTexture) == 0x000008, "Wrong size on NicolaEventFL_RequestEventScreenShotTexture");
static_assert(offsetof(NicolaEventFL_RequestEventScreenShotTexture, InScreenShotGopId) == 0x000000, "Member 'NicolaEventFL_RequestEventScreenShotTexture::InScreenShotGopId' has a wrong offset!");

// Function Nicola.NicolaEventFL.ResetFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaEventFL_ResetFlag final
{
public:
	EEventFlagType                                FlagType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_ResetFlag) == 0x000001, "Wrong alignment on NicolaEventFL_ResetFlag");
static_assert(sizeof(NicolaEventFL_ResetFlag) == 0x000001, "Wrong size on NicolaEventFL_ResetFlag");
static_assert(offsetof(NicolaEventFL_ResetFlag, FlagType) == 0x000000, "Member 'NicolaEventFL_ResetFlag::FlagType' has a wrong offset!");

// Function Nicola.NicolaEventFL.ResetTempSaveFlag
// 0x0002 (0x0002 - 0x0000)
struct NicolaEventFL_ResetTempSaveFlag final
{
public:
	bool                                          IsResetDungeon;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResetSuspend;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_ResetTempSaveFlag) == 0x000001, "Wrong alignment on NicolaEventFL_ResetTempSaveFlag");
static_assert(sizeof(NicolaEventFL_ResetTempSaveFlag) == 0x000002, "Wrong size on NicolaEventFL_ResetTempSaveFlag");
static_assert(offsetof(NicolaEventFL_ResetTempSaveFlag, IsResetDungeon) == 0x000000, "Member 'NicolaEventFL_ResetTempSaveFlag::IsResetDungeon' has a wrong offset!");
static_assert(offsetof(NicolaEventFL_ResetTempSaveFlag, IsResetSuspend) == 0x000001, "Member 'NicolaEventFL_ResetTempSaveFlag::IsResetSuspend' has a wrong offset!");

// Function Nicola.NicolaEventFL.ShowEventScreenShot
// 0x0008 (0x0008 - 0x0000)
struct NicolaEventFL_ShowEventScreenShot final
{
public:
	class FName                                   InScreenShotGopId;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaEventFL_ShowEventScreenShot) == 0x000004, "Wrong alignment on NicolaEventFL_ShowEventScreenShot");
static_assert(sizeof(NicolaEventFL_ShowEventScreenShot) == 0x000008, "Wrong size on NicolaEventFL_ShowEventScreenShot");
static_assert(offsetof(NicolaEventFL_ShowEventScreenShot, InScreenShotGopId) == 0x000000, "Member 'NicolaEventFL_ShowEventScreenShot::InScreenShotGopId' has a wrong offset!");

// Function Nicola.NicolaFadingTriggerBase.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct NicolaFadingTriggerBase_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaFadingTriggerBase_OnOverlapBegin) == 0x000008, "Wrong alignment on NicolaFadingTriggerBase_OnOverlapBegin");
static_assert(sizeof(NicolaFadingTriggerBase_OnOverlapBegin) == 0x0000A8, "Wrong size on NicolaFadingTriggerBase_OnOverlapBegin");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapBegin, OverlappedComp) == 0x000000, "Member 'NicolaFadingTriggerBase_OnOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapBegin, OtherActor) == 0x000008, "Member 'NicolaFadingTriggerBase_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapBegin, OtherComp) == 0x000010, "Member 'NicolaFadingTriggerBase_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'NicolaFadingTriggerBase_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'NicolaFadingTriggerBase_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapBegin, SweepResult) == 0x000020, "Member 'NicolaFadingTriggerBase_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function Nicola.NicolaFadingTriggerBase.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct NicolaFadingTriggerBase_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaFadingTriggerBase_OnOverlapEnd) == 0x000008, "Wrong alignment on NicolaFadingTriggerBase_OnOverlapEnd");
static_assert(sizeof(NicolaFadingTriggerBase_OnOverlapEnd) == 0x000020, "Wrong size on NicolaFadingTriggerBase_OnOverlapEnd");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapEnd, OverlappedComp) == 0x000000, "Member 'NicolaFadingTriggerBase_OnOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapEnd, OtherActor) == 0x000008, "Member 'NicolaFadingTriggerBase_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapEnd, OtherComp) == 0x000010, "Member 'NicolaFadingTriggerBase_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(NicolaFadingTriggerBase_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'NicolaFadingTriggerBase_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Nicola.SearchObjectItem.MoveToPlayer
// 0x000C (0x000C - 0x0000)
struct SearchObjectItem_MoveToPlayer final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchObjectItem_MoveToPlayer) == 0x000004, "Wrong alignment on SearchObjectItem_MoveToPlayer");
static_assert(sizeof(SearchObjectItem_MoveToPlayer) == 0x00000C, "Wrong size on SearchObjectItem_MoveToPlayer");
static_assert(offsetof(SearchObjectItem_MoveToPlayer, Offset) == 0x000000, "Member 'SearchObjectItem_MoveToPlayer::Offset' has a wrong offset!");

// Function Nicola.SearchObjectItem.PlayItemGet
// 0x0001 (0x0001 - 0x0000)
struct SearchObjectItem_PlayItemGet final
{
public:
	EItemGetType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchObjectItem_PlayItemGet) == 0x000001, "Wrong alignment on SearchObjectItem_PlayItemGet");
static_assert(sizeof(SearchObjectItem_PlayItemGet) == 0x000001, "Wrong size on SearchObjectItem_PlayItemGet");
static_assert(offsetof(SearchObjectItem_PlayItemGet, Type) == 0x000000, "Member 'SearchObjectItem_PlayItemGet::Type' has a wrong offset!");

// Function Nicola.SearchObjectItem.PlaySearchObjectGet
// 0x0001 (0x0001 - 0x0000)
struct SearchObjectItem_PlaySearchObjectGet final
{
public:
	ESearchObjectType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchObjectItem_PlaySearchObjectGet) == 0x000001, "Wrong alignment on SearchObjectItem_PlaySearchObjectGet");
static_assert(sizeof(SearchObjectItem_PlaySearchObjectGet) == 0x000001, "Wrong size on SearchObjectItem_PlaySearchObjectGet");
static_assert(offsetof(SearchObjectItem_PlaySearchObjectGet, Type) == 0x000000, "Member 'SearchObjectItem_PlaySearchObjectGet::Type' has a wrong offset!");

// Function Nicola.SearchObjectItem.SetLocationOffset
// 0x000C (0x000C - 0x0000)
struct SearchObjectItem_SetLocationOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchObjectItem_SetLocationOffset) == 0x000004, "Wrong alignment on SearchObjectItem_SetLocationOffset");
static_assert(sizeof(SearchObjectItem_SetLocationOffset) == 0x00000C, "Wrong size on SearchObjectItem_SetLocationOffset");
static_assert(offsetof(SearchObjectItem_SetLocationOffset, Offset) == 0x000000, "Member 'SearchObjectItem_SetLocationOffset::Offset' has a wrong offset!");

// Function Nicola.SearchObjectItem.SetVisibilityItem
// 0x0001 (0x0001 - 0x0000)
struct SearchObjectItem_SetVisibilityItem final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchObjectItem_SetVisibilityItem) == 0x000001, "Wrong alignment on SearchObjectItem_SetVisibilityItem");
static_assert(sizeof(SearchObjectItem_SetVisibilityItem) == 0x000001, "Wrong size on SearchObjectItem_SetVisibilityItem");
static_assert(offsetof(SearchObjectItem_SetVisibilityItem, Visibility) == 0x000000, "Member 'SearchObjectItem_SetVisibilityItem::Visibility' has a wrong offset!");

// Function Nicola.NicolaResearchPlayerCameraManagerBase.RequestCameraFadeIn
// 0x0004 (0x0004 - 0x0000)
struct NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn) == 0x000004, "Wrong alignment on NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn");
static_assert(sizeof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn) == 0x000004, "Wrong size on NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn, FadeTime) == 0x000000, "Member 'NicolaResearchPlayerCameraManagerBase_RequestCameraFadeIn::FadeTime' has a wrong offset!");

// Function Nicola.NicolaResearchPlayerCameraManagerBase.RequestCameraFadeOut
// 0x0008 (0x0008 - 0x0000)
struct NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut final
{
public:
	float                                         targetAlpha;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut) == 0x000004, "Wrong alignment on NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut");
static_assert(sizeof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut) == 0x000008, "Wrong size on NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut, targetAlpha) == 0x000000, "Member 'NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut::targetAlpha' has a wrong offset!");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut, FadeTime) == 0x000004, "Member 'NicolaResearchPlayerCameraManagerBase_RequestCameraFadeOut::FadeTime' has a wrong offset!");

// Function Nicola.NicolaResearchPlayerCameraManagerBase.RequestHideBattleCameraEffect
// 0x000C (0x000C - 0x0000)
struct NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect) == 0x000004, "Wrong alignment on NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect");
static_assert(sizeof(NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect) == 0x00000C, "Wrong size on NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect, AssetName) == 0x000000, "Member 'NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect::AssetName' has a wrong offset!");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect, FadeTime) == 0x000008, "Member 'NicolaResearchPlayerCameraManagerBase_RequestHideBattleCameraEffect::FadeTime' has a wrong offset!");

// Function Nicola.NicolaResearchPlayerCameraManagerBase.RequestHideCameraEffect
// 0x000C (0x000C - 0x0000)
struct NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect) == 0x000004, "Wrong alignment on NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect");
static_assert(sizeof(NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect) == 0x00000C, "Wrong size on NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect, AssetName) == 0x000000, "Member 'NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect::AssetName' has a wrong offset!");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect, FadeTime) == 0x000008, "Member 'NicolaResearchPlayerCameraManagerBase_RequestHideCameraEffect::FadeTime' has a wrong offset!");

// Function Nicola.NicolaResearchPlayerCameraManagerBase.RequestShowBattleCameraEffect
// 0x000C (0x000C - 0x0000)
struct NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect) == 0x000004, "Wrong alignment on NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect");
static_assert(sizeof(NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect) == 0x00000C, "Wrong size on NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect, AssetName) == 0x000000, "Member 'NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect::AssetName' has a wrong offset!");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect, FadeTime) == 0x000008, "Member 'NicolaResearchPlayerCameraManagerBase_RequestShowBattleCameraEffect::FadeTime' has a wrong offset!");

// Function Nicola.NicolaResearchPlayerCameraManagerBase.RequestShowCameraEffect
// 0x000C (0x000C - 0x0000)
struct NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect) == 0x000004, "Wrong alignment on NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect");
static_assert(sizeof(NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect) == 0x00000C, "Wrong size on NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect, AssetName) == 0x000000, "Member 'NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect::AssetName' has a wrong offset!");
static_assert(offsetof(NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect, FadeTime) == 0x000008, "Member 'NicolaResearchPlayerCameraManagerBase_RequestShowCameraEffect::FadeTime' has a wrong offset!");

// Function Nicola.NicolaGameInstance.DemoEnding
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_DemoEnding final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_DemoEnding) == 0x000004, "Wrong alignment on NicolaGameInstance_DemoEnding");
static_assert(sizeof(NicolaGameInstance_DemoEnding) == 0x000008, "Wrong size on NicolaGameInstance_DemoEnding");
static_assert(offsetof(NicolaGameInstance_DemoEnding, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_DemoEnding::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.Ending
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_Ending final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_Ending) == 0x000004, "Wrong alignment on NicolaGameInstance_Ending");
static_assert(sizeof(NicolaGameInstance_Ending) == 0x000008, "Wrong size on NicolaGameInstance_Ending");
static_assert(offsetof(NicolaGameInstance_Ending, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_Ending::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.NewGame
// 0x000C (0x000C - 0x0000)
struct NicolaGameInstance_NewGame final
{
public:
	bool                                          titleSelectNewGame;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_NewGame) == 0x000004, "Wrong alignment on NicolaGameInstance_NewGame");
static_assert(sizeof(NicolaGameInstance_NewGame) == 0x00000C, "Wrong size on NicolaGameInstance_NewGame");
static_assert(offsetof(NicolaGameInstance_NewGame, titleSelectNewGame) == 0x000000, "Member 'NicolaGameInstance_NewGame::titleSelectNewGame' has a wrong offset!");
static_assert(offsetof(NicolaGameInstance_NewGame, ReturnValue) == 0x000004, "Member 'NicolaGameInstance_NewGame::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.ReturnTitle
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_ReturnTitle final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_ReturnTitle) == 0x000004, "Wrong alignment on NicolaGameInstance_ReturnTitle");
static_assert(sizeof(NicolaGameInstance_ReturnTitle) == 0x000008, "Wrong size on NicolaGameInstance_ReturnTitle");
static_assert(offsetof(NicolaGameInstance_ReturnTitle, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_ReturnTitle::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.StartFromDevelopmentLauncher
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_StartFromDevelopmentLauncher final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_StartFromDevelopmentLauncher) == 0x000004, "Wrong alignment on NicolaGameInstance_StartFromDevelopmentLauncher");
static_assert(sizeof(NicolaGameInstance_StartFromDevelopmentLauncher) == 0x000008, "Wrong size on NicolaGameInstance_StartFromDevelopmentLauncher");
static_assert(offsetof(NicolaGameInstance_StartFromDevelopmentLauncher, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_StartFromDevelopmentLauncher::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetAchievementManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetAchievementManager final
{
public:
	class UNicolaAchievementManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetAchievementManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetAchievementManager");
static_assert(sizeof(NicolaGameInstance_GetAchievementManager) == 0x000008, "Wrong size on NicolaGameInstance_GetAchievementManager");
static_assert(offsetof(NicolaGameInstance_GetAchievementManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetAchievementManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetCompileVersion
// 0x0018 (0x0018 - 0x0000)
struct NicolaGameInstance_GetCompileVersion final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetCompileVersion) == 0x000008, "Wrong alignment on NicolaGameInstance_GetCompileVersion");
static_assert(sizeof(NicolaGameInstance_GetCompileVersion) == 0x000018, "Wrong size on NicolaGameInstance_GetCompileVersion");
static_assert(offsetof(NicolaGameInstance_GetCompileVersion, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetCompileVersion::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetEffectManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetEffectManager final
{
public:
	class UNicolaEffectManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetEffectManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetEffectManager");
static_assert(sizeof(NicolaGameInstance_GetEffectManager) == 0x000008, "Wrong size on NicolaGameInstance_GetEffectManager");
static_assert(offsetof(NicolaGameInstance_GetEffectManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetEffectManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetEndingManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetEndingManager final
{
public:
	class UNicolaEndingManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetEndingManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetEndingManager");
static_assert(sizeof(NicolaGameInstance_GetEndingManager) == 0x000008, "Wrong size on NicolaGameInstance_GetEndingManager");
static_assert(offsetof(NicolaGameInstance_GetEndingManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetEndingManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetEventManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetEventManager final
{
public:
	class UNicolaEventManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetEventManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetEventManager");
static_assert(sizeof(NicolaGameInstance_GetEventManager) == 0x000008, "Wrong size on NicolaGameInstance_GetEventManager");
static_assert(offsetof(NicolaGameInstance_GetEventManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetEventManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetGuideIconManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetGuideIconManager final
{
public:
	class UNicolaGuideIconManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetGuideIconManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetGuideIconManager");
static_assert(sizeof(NicolaGameInstance_GetGuideIconManager) == 0x000008, "Wrong size on NicolaGameInstance_GetGuideIconManager");
static_assert(offsetof(NicolaGameInstance_GetGuideIconManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetGuideIconManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetInGameManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetInGameManager final
{
public:
	class UNicolaInGameManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetInGameManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetInGameManager");
static_assert(sizeof(NicolaGameInstance_GetInGameManager) == 0x000008, "Wrong size on NicolaGameInstance_GetInGameManager");
static_assert(offsetof(NicolaGameInstance_GetInGameManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetInGameManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetLuaScriptManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetLuaScriptManager final
{
public:
	class ULuaScriptMgr*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetLuaScriptManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetLuaScriptManager");
static_assert(sizeof(NicolaGameInstance_GetLuaScriptManager) == 0x000008, "Wrong size on NicolaGameInstance_GetLuaScriptManager");
static_assert(offsetof(NicolaGameInstance_GetLuaScriptManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetLuaScriptManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetMapGuideManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetMapGuideManager final
{
public:
	class UNicolaMapGuideManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetMapGuideManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetMapGuideManager");
static_assert(sizeof(NicolaGameInstance_GetMapGuideManager) == 0x000008, "Wrong size on NicolaGameInstance_GetMapGuideManager");
static_assert(offsetof(NicolaGameInstance_GetMapGuideManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetMapGuideManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetMapParameterCollectionManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetMapParameterCollectionManager final
{
public:
	class UMapParameterCollectionManager*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetMapParameterCollectionManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetMapParameterCollectionManager");
static_assert(sizeof(NicolaGameInstance_GetMapParameterCollectionManager) == 0x000008, "Wrong size on NicolaGameInstance_GetMapParameterCollectionManager");
static_assert(offsetof(NicolaGameInstance_GetMapParameterCollectionManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetMapParameterCollectionManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetPS5ActivityManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetPS5ActivityManager final
{
public:
	class UPS5ActivityManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetPS5ActivityManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetPS5ActivityManager");
static_assert(sizeof(NicolaGameInstance_GetPS5ActivityManager) == 0x000008, "Wrong size on NicolaGameInstance_GetPS5ActivityManager");
static_assert(offsetof(NicolaGameInstance_GetPS5ActivityManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetPS5ActivityManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetSaveGameManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetSaveGameManager final
{
public:
	class UNicolaSaveGameManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetSaveGameManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetSaveGameManager");
static_assert(sizeof(NicolaGameInstance_GetSaveGameManager) == 0x000008, "Wrong size on NicolaGameInstance_GetSaveGameManager");
static_assert(offsetof(NicolaGameInstance_GetSaveGameManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetSaveGameManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetSkillManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetSkillManager final
{
public:
	class UNicolaSkillManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetSkillManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetSkillManager");
static_assert(sizeof(NicolaGameInstance_GetSkillManager) == 0x000008, "Wrong size on NicolaGameInstance_GetSkillManager");
static_assert(offsetof(NicolaGameInstance_GetSkillManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetSkillManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameInstance.GetSoundManager
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameInstance_GetSoundManager final
{
public:
	class UNicolaSoundManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameInstance_GetSoundManager) == 0x000008, "Wrong alignment on NicolaGameInstance_GetSoundManager");
static_assert(sizeof(NicolaGameInstance_GetSoundManager) == 0x000008, "Wrong size on NicolaGameInstance_GetSoundManager");
static_assert(offsetof(NicolaGameInstance_GetSoundManager, ReturnValue) == 0x000000, "Member 'NicolaGameInstance_GetSoundManager::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaGameStateBase.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct NicolaGameStateBase_GetPlayerController final
{
public:
	class ANicolaPlayerControllerBase*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaGameStateBase_GetPlayerController) == 0x000008, "Wrong alignment on NicolaGameStateBase_GetPlayerController");
static_assert(sizeof(NicolaGameStateBase_GetPlayerController) == 0x000008, "Wrong size on NicolaGameStateBase_GetPlayerController");
static_assert(offsetof(NicolaGameStateBase_GetPlayerController, ReturnValue) == 0x000000, "Member 'NicolaGameStateBase_GetPlayerController::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSpriteManagerComponent.SequencerRotationRoll
// 0x0004 (0x0004 - 0x0000)
struct NicolaSpriteManagerComponent_SequencerRotationRoll final
{
public:
	float                                         Degree;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSpriteManagerComponent_SequencerRotationRoll) == 0x000004, "Wrong alignment on NicolaSpriteManagerComponent_SequencerRotationRoll");
static_assert(sizeof(NicolaSpriteManagerComponent_SequencerRotationRoll) == 0x000004, "Wrong size on NicolaSpriteManagerComponent_SequencerRotationRoll");
static_assert(offsetof(NicolaSpriteManagerComponent_SequencerRotationRoll, Degree) == 0x000000, "Member 'NicolaSpriteManagerComponent_SequencerRotationRoll::Degree' has a wrong offset!");

// Function Nicola.NicolaSpriteManagerComponent.SequencerSetEnableCharacterPrePass
// 0x0001 (0x0001 - 0x0000)
struct NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass) == 0x000001, "Wrong alignment on NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass");
static_assert(sizeof(NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass) == 0x000001, "Wrong size on NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass");
static_assert(offsetof(NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass, bEnable) == 0x000000, "Member 'NicolaSpriteManagerComponent_SequencerSetEnableCharacterPrePass::bEnable' has a wrong offset!");

// Function Nicola.ProduceSequencerTownNameUI.PlayTownNameWindow
// 0x0008 (0x0008 - 0x0000)
struct ProduceSequencerTownNameUI_PlayTownNameWindow final
{
public:
	class FName                                   textID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerTownNameUI_PlayTownNameWindow) == 0x000004, "Wrong alignment on ProduceSequencerTownNameUI_PlayTownNameWindow");
static_assert(sizeof(ProduceSequencerTownNameUI_PlayTownNameWindow) == 0x000008, "Wrong size on ProduceSequencerTownNameUI_PlayTownNameWindow");
static_assert(offsetof(ProduceSequencerTownNameUI_PlayTownNameWindow, textID) == 0x000000, "Member 'ProduceSequencerTownNameUI_PlayTownNameWindow::textID' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.AddItem
// 0x0014 (0x0014 - 0x0000)
struct NicolaItemDataFL_AddItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         partyMemberNo;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_AddItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_AddItem");
static_assert(sizeof(NicolaItemDataFL_AddItem) == 0x000014, "Wrong size on NicolaItemDataFL_AddItem");
static_assert(offsetof(NicolaItemDataFL_AddItem, ItemId) == 0x000000, "Member 'NicolaItemDataFL_AddItem::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AddItem, Count) == 0x000008, "Member 'NicolaItemDataFL_AddItem::Count' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AddItem, partyMemberNo) == 0x00000C, "Member 'NicolaItemDataFL_AddItem::partyMemberNo' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AddItem, bForce) == 0x000010, "Member 'NicolaItemDataFL_AddItem::bForce' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AddItem, ReturnValue) == 0x000011, "Member 'NicolaItemDataFL_AddItem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.AddItemNobody
// 0x000C (0x000C - 0x0000)
struct NicolaItemDataFL_AddItemNobody final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_AddItemNobody) == 0x000004, "Wrong alignment on NicolaItemDataFL_AddItemNobody");
static_assert(sizeof(NicolaItemDataFL_AddItemNobody) == 0x00000C, "Wrong size on NicolaItemDataFL_AddItemNobody");
static_assert(offsetof(NicolaItemDataFL_AddItemNobody, ItemId) == 0x000000, "Member 'NicolaItemDataFL_AddItemNobody::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AddItemNobody, ReturnValue) == 0x000008, "Member 'NicolaItemDataFL_AddItemNobody::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.AdjustBag
// 0x0008 (0x0008 - 0x0000)
struct NicolaItemDataFL_AdjustBag final
{
public:
	int32                                         partyUnitIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          checkTidy;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_AdjustBag) == 0x000004, "Wrong alignment on NicolaItemDataFL_AdjustBag");
static_assert(sizeof(NicolaItemDataFL_AdjustBag) == 0x000008, "Wrong size on NicolaItemDataFL_AdjustBag");
static_assert(offsetof(NicolaItemDataFL_AdjustBag, partyUnitIndex) == 0x000000, "Member 'NicolaItemDataFL_AdjustBag::partyUnitIndex' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AdjustBag, checkTidy) == 0x000004, "Member 'NicolaItemDataFL_AdjustBag::checkTidy' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_AdjustBag, ReturnValue) == 0x000005, "Member 'NicolaItemDataFL_AdjustBag::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.CanAddItem
// 0x000C (0x000C - 0x0000)
struct NicolaItemDataFL_CanAddItem final
{
public:
	int32                                         partyMemberNo;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         cnt;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_CanAddItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_CanAddItem");
static_assert(sizeof(NicolaItemDataFL_CanAddItem) == 0x00000C, "Wrong size on NicolaItemDataFL_CanAddItem");
static_assert(offsetof(NicolaItemDataFL_CanAddItem, partyMemberNo) == 0x000000, "Member 'NicolaItemDataFL_CanAddItem::partyMemberNo' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_CanAddItem, cnt) == 0x000004, "Member 'NicolaItemDataFL_CanAddItem::cnt' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_CanAddItem, ReturnValue) == 0x000008, "Member 'NicolaItemDataFL_CanAddItem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.DebugAddItemAll
// 0x0004 (0x0004 - 0x0000)
struct NicolaItemDataFL_DebugAddItemAll final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_DebugAddItemAll) == 0x000004, "Wrong alignment on NicolaItemDataFL_DebugAddItemAll");
static_assert(sizeof(NicolaItemDataFL_DebugAddItemAll) == 0x000004, "Wrong size on NicolaItemDataFL_DebugAddItemAll");
static_assert(offsetof(NicolaItemDataFL_DebugAddItemAll, Count) == 0x000000, "Member 'NicolaItemDataFL_DebugAddItemAll::Count' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.DebugGetItemBagNum
// 0x000C (0x000C - 0x0000)
struct NicolaItemDataFL_DebugGetItemBagNum final
{
public:
	class FName                                   InGopId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_DebugGetItemBagNum) == 0x000004, "Wrong alignment on NicolaItemDataFL_DebugGetItemBagNum");
static_assert(sizeof(NicolaItemDataFL_DebugGetItemBagNum) == 0x00000C, "Wrong size on NicolaItemDataFL_DebugGetItemBagNum");
static_assert(offsetof(NicolaItemDataFL_DebugGetItemBagNum, InGopId) == 0x000000, "Member 'NicolaItemDataFL_DebugGetItemBagNum::InGopId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugGetItemBagNum, ReturnValue) == 0x000008, "Member 'NicolaItemDataFL_DebugGetItemBagNum::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.DebugGetItemNameID
// 0x0010 (0x0010 - 0x0000)
struct NicolaItemDataFL_DebugGetItemNameID final
{
public:
	class FName                                   InGopId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_DebugGetItemNameID) == 0x000004, "Wrong alignment on NicolaItemDataFL_DebugGetItemNameID");
static_assert(sizeof(NicolaItemDataFL_DebugGetItemNameID) == 0x000010, "Wrong size on NicolaItemDataFL_DebugGetItemNameID");
static_assert(offsetof(NicolaItemDataFL_DebugGetItemNameID, InGopId) == 0x000000, "Member 'NicolaItemDataFL_DebugGetItemNameID::InGopId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugGetItemNameID, ReturnValue) == 0x000008, "Member 'NicolaItemDataFL_DebugGetItemNameID::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.DebugSetItemBagNum
// 0x000C (0x000C - 0x0000)
struct NicolaItemDataFL_DebugSetItemBagNum final
{
public:
	class FName                                   InGopId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_DebugSetItemBagNum) == 0x000004, "Wrong alignment on NicolaItemDataFL_DebugSetItemBagNum");
static_assert(sizeof(NicolaItemDataFL_DebugSetItemBagNum) == 0x00000C, "Wrong size on NicolaItemDataFL_DebugSetItemBagNum");
static_assert(offsetof(NicolaItemDataFL_DebugSetItemBagNum, InGopId) == 0x000000, "Member 'NicolaItemDataFL_DebugSetItemBagNum::InGopId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugSetItemBagNum, InCount) == 0x000008, "Member 'NicolaItemDataFL_DebugSetItemBagNum::InCount' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.DebugUseItem
// 0x0018 (0x0018 - 0x0000)
struct NicolaItemDataFL_DebugUseItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetNo;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattle;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemy;                                            // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RuraID;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_DebugUseItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_DebugUseItem");
static_assert(sizeof(NicolaItemDataFL_DebugUseItem) == 0x000018, "Wrong size on NicolaItemDataFL_DebugUseItem");
static_assert(offsetof(NicolaItemDataFL_DebugUseItem, ItemId) == 0x000000, "Member 'NicolaItemDataFL_DebugUseItem::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugUseItem, targetNo) == 0x000008, "Member 'NicolaItemDataFL_DebugUseItem::targetNo' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugUseItem, bBattle) == 0x00000C, "Member 'NicolaItemDataFL_DebugUseItem::bBattle' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugUseItem, bEnemy) == 0x00000D, "Member 'NicolaItemDataFL_DebugUseItem::bEnemy' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_DebugUseItem, RuraID) == 0x000010, "Member 'NicolaItemDataFL_DebugUseItem::RuraID' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.EquipItem
// 0x0010 (0x0010 - 0x0000)
struct NicolaItemDataFL_EquipItem final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_EquipItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_EquipItem");
static_assert(sizeof(NicolaItemDataFL_EquipItem) == 0x000010, "Wrong size on NicolaItemDataFL_EquipItem");
static_assert(offsetof(NicolaItemDataFL_EquipItem, partyIndex) == 0x000000, "Member 'NicolaItemDataFL_EquipItem::partyIndex' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_EquipItem, ItemId) == 0x000004, "Member 'NicolaItemDataFL_EquipItem::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_EquipItem, ReturnValue) == 0x00000C, "Member 'NicolaItemDataFL_EquipItem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.GetHaveItemNum
// 0x0010 (0x0010 - 0x0000)
struct NicolaItemDataFL_GetHaveItemNum final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          excludeRentalEquip;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          excludeUnitDataFromBelongStatusTemporary;          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_GetHaveItemNum) == 0x000004, "Wrong alignment on NicolaItemDataFL_GetHaveItemNum");
static_assert(sizeof(NicolaItemDataFL_GetHaveItemNum) == 0x000010, "Wrong size on NicolaItemDataFL_GetHaveItemNum");
static_assert(offsetof(NicolaItemDataFL_GetHaveItemNum, ItemId) == 0x000000, "Member 'NicolaItemDataFL_GetHaveItemNum::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_GetHaveItemNum, excludeRentalEquip) == 0x000008, "Member 'NicolaItemDataFL_GetHaveItemNum::excludeRentalEquip' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_GetHaveItemNum, excludeUnitDataFromBelongStatusTemporary) == 0x000009, "Member 'NicolaItemDataFL_GetHaveItemNum::excludeUnitDataFromBelongStatusTemporary' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_GetHaveItemNum, ReturnValue) == 0x00000C, "Member 'NicolaItemDataFL_GetHaveItemNum::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.GetItemGopList
// 0x0010 (0x0010 - 0x0000)
struct NicolaItemDataFL_GetItemGopList final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_GetItemGopList) == 0x000008, "Wrong alignment on NicolaItemDataFL_GetItemGopList");
static_assert(sizeof(NicolaItemDataFL_GetItemGopList) == 0x000010, "Wrong size on NicolaItemDataFL_GetItemGopList");
static_assert(offsetof(NicolaItemDataFL_GetItemGopList, GopIdList) == 0x000000, "Member 'NicolaItemDataFL_GetItemGopList::GopIdList' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.GetItemGopListByCategory
// 0x0018 (0x0018 - 0x0000)
struct NicolaItemDataFL_GetItemGopListByCategory final
{
public:
	EItemType                                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OutGopIdList;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_GetItemGopListByCategory) == 0x000008, "Wrong alignment on NicolaItemDataFL_GetItemGopListByCategory");
static_assert(sizeof(NicolaItemDataFL_GetItemGopListByCategory) == 0x000018, "Wrong size on NicolaItemDataFL_GetItemGopListByCategory");
static_assert(offsetof(NicolaItemDataFL_GetItemGopListByCategory, InType) == 0x000000, "Member 'NicolaItemDataFL_GetItemGopListByCategory::InType' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_GetItemGopListByCategory, OutGopIdList) == 0x000008, "Member 'NicolaItemDataFL_GetItemGopListByCategory::OutGopIdList' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.IsHaveItem
// 0x000C (0x000C - 0x0000)
struct NicolaItemDataFL_IsHaveItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          excludeRentalEquip;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          excludeUnitDataFromBelongStatusTemporary;          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_IsHaveItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_IsHaveItem");
static_assert(sizeof(NicolaItemDataFL_IsHaveItem) == 0x00000C, "Wrong size on NicolaItemDataFL_IsHaveItem");
static_assert(offsetof(NicolaItemDataFL_IsHaveItem, ItemId) == 0x000000, "Member 'NicolaItemDataFL_IsHaveItem::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_IsHaveItem, excludeRentalEquip) == 0x000008, "Member 'NicolaItemDataFL_IsHaveItem::excludeRentalEquip' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_IsHaveItem, excludeUnitDataFromBelongStatusTemporary) == 0x000009, "Member 'NicolaItemDataFL_IsHaveItem::excludeUnitDataFromBelongStatusTemporary' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_IsHaveItem, ReturnValue) == 0x00000A, "Member 'NicolaItemDataFL_IsHaveItem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.IsHaveItemEffectType
// 0x0003 (0x0003 - 0x0000)
struct NicolaItemDataFL_IsHaveItemEffectType final
{
public:
	EItemEffectType                               EffectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          excludeUnitDataFromBelongStatusTemporary;          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaItemDataFL_IsHaveItemEffectType) == 0x000001, "Wrong alignment on NicolaItemDataFL_IsHaveItemEffectType");
static_assert(sizeof(NicolaItemDataFL_IsHaveItemEffectType) == 0x000003, "Wrong size on NicolaItemDataFL_IsHaveItemEffectType");
static_assert(offsetof(NicolaItemDataFL_IsHaveItemEffectType, EffectType) == 0x000000, "Member 'NicolaItemDataFL_IsHaveItemEffectType::EffectType' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_IsHaveItemEffectType, excludeUnitDataFromBelongStatusTemporary) == 0x000001, "Member 'NicolaItemDataFL_IsHaveItemEffectType::excludeUnitDataFromBelongStatusTemporary' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_IsHaveItemEffectType, ReturnValue) == 0x000002, "Member 'NicolaItemDataFL_IsHaveItemEffectType::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.RemoveItem
// 0x000C (0x000C - 0x0000)
struct NicolaItemDataFL_RemoveItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAllUnitData;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          excludeUnitDataFromBelongStatusTemporary;          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_RemoveItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_RemoveItem");
static_assert(sizeof(NicolaItemDataFL_RemoveItem) == 0x00000C, "Wrong size on NicolaItemDataFL_RemoveItem");
static_assert(offsetof(NicolaItemDataFL_RemoveItem, ItemId) == 0x000000, "Member 'NicolaItemDataFL_RemoveItem::ItemId' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_RemoveItem, isAllUnitData) == 0x000008, "Member 'NicolaItemDataFL_RemoveItem::isAllUnitData' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_RemoveItem, excludeUnitDataFromBelongStatusTemporary) == 0x000009, "Member 'NicolaItemDataFL_RemoveItem::excludeUnitDataFromBelongStatusTemporary' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_RemoveItem, ReturnValue) == 0x00000A, "Member 'NicolaItemDataFL_RemoveItem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaItemDataFL.UseItem
// 0x0020 (0x0020 - 0x0000)
struct NicolaItemDataFL_UseItem final
{
public:
	bool                                          isBag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DataIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetNo;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemUsableType                               usedTyming;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RuraID;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaItemDataFL_UseItem) == 0x000004, "Wrong alignment on NicolaItemDataFL_UseItem");
static_assert(sizeof(NicolaItemDataFL_UseItem) == 0x000020, "Wrong size on NicolaItemDataFL_UseItem");
static_assert(offsetof(NicolaItemDataFL_UseItem, isBag) == 0x000000, "Member 'NicolaItemDataFL_UseItem::isBag' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_UseItem, DataIndex) == 0x000004, "Member 'NicolaItemDataFL_UseItem::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_UseItem, ItemIndex) == 0x000008, "Member 'NicolaItemDataFL_UseItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_UseItem, targetNo) == 0x00000C, "Member 'NicolaItemDataFL_UseItem::targetNo' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_UseItem, usedTyming) == 0x000010, "Member 'NicolaItemDataFL_UseItem::usedTyming' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_UseItem, RuraID) == 0x000014, "Member 'NicolaItemDataFL_UseItem::RuraID' has a wrong offset!");
static_assert(offsetof(NicolaItemDataFL_UseItem, ReturnValue) == 0x00001C, "Member 'NicolaItemDataFL_UseItem::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightDirRotator.GetCorrectionFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightDirRotator_GetCorrectionFlag final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightDirRotator_GetCorrectionFlag) == 0x000001, "Wrong alignment on NicolaLightDirRotator_GetCorrectionFlag");
static_assert(sizeof(NicolaLightDirRotator_GetCorrectionFlag) == 0x000001, "Wrong size on NicolaLightDirRotator_GetCorrectionFlag");
static_assert(offsetof(NicolaLightDirRotator_GetCorrectionFlag, ReturnValue) == 0x000000, "Member 'NicolaLightDirRotator_GetCorrectionFlag::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightDirRotator.GetCorrectionLightColor
// 0x0010 (0x0010 - 0x0000)
struct NicolaLightDirRotator_GetCorrectionLightColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightDirRotator_GetCorrectionLightColor) == 0x000004, "Wrong alignment on NicolaLightDirRotator_GetCorrectionLightColor");
static_assert(sizeof(NicolaLightDirRotator_GetCorrectionLightColor) == 0x000010, "Wrong size on NicolaLightDirRotator_GetCorrectionLightColor");
static_assert(offsetof(NicolaLightDirRotator_GetCorrectionLightColor, ReturnValue) == 0x000000, "Member 'NicolaLightDirRotator_GetCorrectionLightColor::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightDirRotator.GetCorrectionLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightDirRotator_GetCorrectionLightIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightDirRotator_GetCorrectionLightIntensity) == 0x000004, "Wrong alignment on NicolaLightDirRotator_GetCorrectionLightIntensity");
static_assert(sizeof(NicolaLightDirRotator_GetCorrectionLightIntensity) == 0x000004, "Wrong size on NicolaLightDirRotator_GetCorrectionLightIntensity");
static_assert(offsetof(NicolaLightDirRotator_GetCorrectionLightIntensity, ReturnValue) == 0x000000, "Member 'NicolaLightDirRotator_GetCorrectionLightIntensity::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightDirRotator.GetCorrectionSkySphereOverallColor
// 0x0010 (0x0010 - 0x0000)
struct NicolaLightDirRotator_GetCorrectionSkySphereOverallColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightDirRotator_GetCorrectionSkySphereOverallColor) == 0x000004, "Wrong alignment on NicolaLightDirRotator_GetCorrectionSkySphereOverallColor");
static_assert(sizeof(NicolaLightDirRotator_GetCorrectionSkySphereOverallColor) == 0x000010, "Wrong size on NicolaLightDirRotator_GetCorrectionSkySphereOverallColor");
static_assert(offsetof(NicolaLightDirRotator_GetCorrectionSkySphereOverallColor, ReturnValue) == 0x000000, "Member 'NicolaLightDirRotator_GetCorrectionSkySphereOverallColor::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightDirRotator.SetVisibleActors
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightDirRotator_SetVisibleActors final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightDirRotator_SetVisibleActors) == 0x000001, "Wrong alignment on NicolaLightDirRotator_SetVisibleActors");
static_assert(sizeof(NicolaLightDirRotator_SetVisibleActors) == 0x000001, "Wrong size on NicolaLightDirRotator_SetVisibleActors");
static_assert(offsetof(NicolaLightDirRotator_SetVisibleActors, bVisible) == 0x000000, "Member 'NicolaLightDirRotator_SetVisibleActors::bVisible' has a wrong offset!");

// Function Nicola.NicolaLightDirRotator.GetCorrectionBlendRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightDirRotator_GetCorrectionBlendRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightDirRotator_GetCorrectionBlendRate) == 0x000004, "Wrong alignment on NicolaLightDirRotator_GetCorrectionBlendRate");
static_assert(sizeof(NicolaLightDirRotator_GetCorrectionBlendRate) == 0x000004, "Wrong size on NicolaLightDirRotator_GetCorrectionBlendRate");
static_assert(offsetof(NicolaLightDirRotator_GetCorrectionBlendRate, ReturnValue) == 0x000000, "Member 'NicolaLightDirRotator_GetCorrectionBlendRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.CheckProgressFlagFromString
// 0x0018 (0x0018 - 0x0000)
struct NicolaLightingEnvMgrActor_CheckProgressFlagFromString final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaLightingEnvMgrActor_CheckProgressFlagFromString) == 0x000008, "Wrong alignment on NicolaLightingEnvMgrActor_CheckProgressFlagFromString");
static_assert(sizeof(NicolaLightingEnvMgrActor_CheckProgressFlagFromString) == 0x000018, "Wrong size on NicolaLightingEnvMgrActor_CheckProgressFlagFromString");
static_assert(offsetof(NicolaLightingEnvMgrActor_CheckProgressFlagFromString, inString) == 0x000000, "Member 'NicolaLightingEnvMgrActor_CheckProgressFlagFromString::inString' has a wrong offset!");
static_assert(offsetof(NicolaLightingEnvMgrActor_CheckProgressFlagFromString, ReturnValue) == 0x000010, "Member 'NicolaLightingEnvMgrActor_CheckProgressFlagFromString::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.GetCorrectionFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingEnvMgrActor_GetCorrectionFlag final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_GetCorrectionFlag) == 0x000001, "Wrong alignment on NicolaLightingEnvMgrActor_GetCorrectionFlag");
static_assert(sizeof(NicolaLightingEnvMgrActor_GetCorrectionFlag) == 0x000001, "Wrong size on NicolaLightingEnvMgrActor_GetCorrectionFlag");
static_assert(offsetof(NicolaLightingEnvMgrActor_GetCorrectionFlag, ReturnValue) == 0x000000, "Member 'NicolaLightingEnvMgrActor_GetCorrectionFlag::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.GetCorrectionLightColor
// 0x0010 (0x0010 - 0x0000)
struct NicolaLightingEnvMgrActor_GetCorrectionLightColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_GetCorrectionLightColor) == 0x000004, "Wrong alignment on NicolaLightingEnvMgrActor_GetCorrectionLightColor");
static_assert(sizeof(NicolaLightingEnvMgrActor_GetCorrectionLightColor) == 0x000010, "Wrong size on NicolaLightingEnvMgrActor_GetCorrectionLightColor");
static_assert(offsetof(NicolaLightingEnvMgrActor_GetCorrectionLightColor, ReturnValue) == 0x000000, "Member 'NicolaLightingEnvMgrActor_GetCorrectionLightColor::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.GetCorrectionLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingEnvMgrActor_GetCorrectionLightIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_GetCorrectionLightIntensity) == 0x000004, "Wrong alignment on NicolaLightingEnvMgrActor_GetCorrectionLightIntensity");
static_assert(sizeof(NicolaLightingEnvMgrActor_GetCorrectionLightIntensity) == 0x000004, "Wrong size on NicolaLightingEnvMgrActor_GetCorrectionLightIntensity");
static_assert(offsetof(NicolaLightingEnvMgrActor_GetCorrectionLightIntensity, ReturnValue) == 0x000000, "Member 'NicolaLightingEnvMgrActor_GetCorrectionLightIntensity::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.GetCorrectionSkySphereOverallColor
// 0x0010 (0x0010 - 0x0000)
struct NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor) == 0x000004, "Wrong alignment on NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor");
static_assert(sizeof(NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor) == 0x000010, "Wrong size on NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor");
static_assert(offsetof(NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor, ReturnValue) == 0x000000, "Member 'NicolaLightingEnvMgrActor_GetCorrectionSkySphereOverallColor::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.SetVisibleActors
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingEnvMgrActor_SetVisibleActors final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_SetVisibleActors) == 0x000001, "Wrong alignment on NicolaLightingEnvMgrActor_SetVisibleActors");
static_assert(sizeof(NicolaLightingEnvMgrActor_SetVisibleActors) == 0x000001, "Wrong size on NicolaLightingEnvMgrActor_SetVisibleActors");
static_assert(offsetof(NicolaLightingEnvMgrActor_SetVisibleActors, bVisible) == 0x000000, "Member 'NicolaLightingEnvMgrActor_SetVisibleActors::bVisible' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.GetCorrectionBlendRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingEnvMgrActor_GetCorrectionBlendRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_GetCorrectionBlendRate) == 0x000004, "Wrong alignment on NicolaLightingEnvMgrActor_GetCorrectionBlendRate");
static_assert(sizeof(NicolaLightingEnvMgrActor_GetCorrectionBlendRate) == 0x000004, "Wrong size on NicolaLightingEnvMgrActor_GetCorrectionBlendRate");
static_assert(offsetof(NicolaLightingEnvMgrActor_GetCorrectionBlendRate, ReturnValue) == 0x000000, "Member 'NicolaLightingEnvMgrActor_GetCorrectionBlendRate::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingEnvMgrActor.UpdateSkyLightComponentSourceTypeByCubeMap
// 0x0010 (0x0010 - 0x0000)
struct NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap final
{
public:
	const class USkyLightComponent*               comp;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTextureCube*                     cubeMap;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap) == 0x000008, "Wrong alignment on NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap");
static_assert(sizeof(NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap) == 0x000010, "Wrong size on NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap");
static_assert(offsetof(NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap, comp) == 0x000000, "Member 'NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap::comp' has a wrong offset!");
static_assert(offsetof(NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap, cubeMap) == 0x000008, "Member 'NicolaLightingEnvMgrActor_UpdateSkyLightComponentSourceTypeByCubeMap::cubeMap' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.ApplyHeroInitStatus
// 0x0001 (0x0001 - 0x0000)
struct NicolaUnitDataFL_ApplyHeroInitStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_ApplyHeroInitStatus) == 0x000001, "Wrong alignment on NicolaUnitDataFL_ApplyHeroInitStatus");
static_assert(sizeof(NicolaUnitDataFL_ApplyHeroInitStatus) == 0x000001, "Wrong size on NicolaUnitDataFL_ApplyHeroInitStatus");
static_assert(offsetof(NicolaUnitDataFL_ApplyHeroInitStatus, ReturnValue) == 0x000000, "Member 'NicolaUnitDataFL_ApplyHeroInitStatus::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.AutoHPMax
// 0x0002 (0x0002 - 0x0000)
struct NicolaUnitDataFL_AutoHPMax final
{
public:
	bool                                          bAlmost;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_AutoHPMax) == 0x000001, "Wrong alignment on NicolaUnitDataFL_AutoHPMax");
static_assert(sizeof(NicolaUnitDataFL_AutoHPMax) == 0x000002, "Wrong size on NicolaUnitDataFL_AutoHPMax");
static_assert(offsetof(NicolaUnitDataFL_AutoHPMax, bAlmost) == 0x000000, "Member 'NicolaUnitDataFL_AutoHPMax::bAlmost' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_AutoHPMax, ReturnValue) == 0x000001, "Member 'NicolaUnitDataFL_AutoHPMax::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.ChangePartyUnitParsonality
// 0x000C (0x000C - 0x0000)
struct NicolaUnitDataFL_ChangePartyUnitParsonality final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PersonalityId;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_ChangePartyUnitParsonality) == 0x000004, "Wrong alignment on NicolaUnitDataFL_ChangePartyUnitParsonality");
static_assert(sizeof(NicolaUnitDataFL_ChangePartyUnitParsonality) == 0x00000C, "Wrong size on NicolaUnitDataFL_ChangePartyUnitParsonality");
static_assert(offsetof(NicolaUnitDataFL_ChangePartyUnitParsonality, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_ChangePartyUnitParsonality::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_ChangePartyUnitParsonality, PersonalityId) == 0x000004, "Member 'NicolaUnitDataFL_ChangePartyUnitParsonality::PersonalityId' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugAddExp
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_DebugAddExp final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugAddExp) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugAddExp");
static_assert(sizeof(NicolaUnitDataFL_DebugAddExp) == 0x000008, "Wrong size on NicolaUnitDataFL_DebugAddExp");
static_assert(offsetof(NicolaUnitDataFL_DebugAddExp, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_DebugAddExp::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugAddExp, Exp) == 0x000004, "Member 'NicolaUnitDataFL_DebugAddExp::Exp' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugAddExpBeforeLevelUp
// 0x0004 (0x0004 - 0x0000)
struct NicolaUnitDataFL_DebugAddExpBeforeLevelUp final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugAddExpBeforeLevelUp) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugAddExpBeforeLevelUp");
static_assert(sizeof(NicolaUnitDataFL_DebugAddExpBeforeLevelUp) == 0x000004, "Wrong size on NicolaUnitDataFL_DebugAddExpBeforeLevelUp");
static_assert(offsetof(NicolaUnitDataFL_DebugAddExpBeforeLevelUp, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_DebugAddExpBeforeLevelUp::partyNo' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugAddExpTargetLevel
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_DebugAddExpTargetLevel final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetLv;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugAddExpTargetLevel) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugAddExpTargetLevel");
static_assert(sizeof(NicolaUnitDataFL_DebugAddExpTargetLevel) == 0x000008, "Wrong size on NicolaUnitDataFL_DebugAddExpTargetLevel");
static_assert(offsetof(NicolaUnitDataFL_DebugAddExpTargetLevel, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_DebugAddExpTargetLevel::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugAddExpTargetLevel, targetLv) == 0x000004, "Member 'NicolaUnitDataFL_DebugAddExpTargetLevel::targetLv' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugCharaMake
// 0x001C (0x001C - 0x0000)
struct NicolaUnitDataFL_DebugCharaMake final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitClassType                                ClassType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitGenderType                               GenderType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitVoicePattern                             VoicePattern;                                      // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         looksPattern;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         hairColorPattern;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusType                                   Seed1;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusType                                   Seed2;                                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusType                                   Seed3;                                             // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusType                                   seed4;                                             // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusType                                   seed5;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusType                                   seed6;                                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_DebugCharaMake) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugCharaMake");
static_assert(sizeof(NicolaUnitDataFL_DebugCharaMake) == 0x00001C, "Wrong size on NicolaUnitDataFL_DebugCharaMake");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, Name_0) == 0x000000, "Member 'NicolaUnitDataFL_DebugCharaMake::Name_0' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, ClassType) == 0x000008, "Member 'NicolaUnitDataFL_DebugCharaMake::ClassType' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, GenderType) == 0x000009, "Member 'NicolaUnitDataFL_DebugCharaMake::GenderType' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, VoicePattern) == 0x00000A, "Member 'NicolaUnitDataFL_DebugCharaMake::VoicePattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, looksPattern) == 0x00000C, "Member 'NicolaUnitDataFL_DebugCharaMake::looksPattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, hairColorPattern) == 0x000010, "Member 'NicolaUnitDataFL_DebugCharaMake::hairColorPattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, Seed1) == 0x000014, "Member 'NicolaUnitDataFL_DebugCharaMake::Seed1' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, Seed2) == 0x000015, "Member 'NicolaUnitDataFL_DebugCharaMake::Seed2' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, Seed3) == 0x000016, "Member 'NicolaUnitDataFL_DebugCharaMake::Seed3' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, seed4) == 0x000017, "Member 'NicolaUnitDataFL_DebugCharaMake::seed4' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, seed5) == 0x000018, "Member 'NicolaUnitDataFL_DebugCharaMake::seed5' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMake, seed6) == 0x000019, "Member 'NicolaUnitDataFL_DebugCharaMake::seed6' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugCharaMakeForDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_DebugCharaMakeForDebugMenu final
{
public:
	EUnitClassType                                ClassType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitGenderType                               GenderType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         seedMode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugCharaMakeForDebugMenu) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugCharaMakeForDebugMenu");
static_assert(sizeof(NicolaUnitDataFL_DebugCharaMakeForDebugMenu) == 0x000008, "Wrong size on NicolaUnitDataFL_DebugCharaMakeForDebugMenu");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMakeForDebugMenu, ClassType) == 0x000000, "Member 'NicolaUnitDataFL_DebugCharaMakeForDebugMenu::ClassType' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMakeForDebugMenu, GenderType) == 0x000001, "Member 'NicolaUnitDataFL_DebugCharaMakeForDebugMenu::GenderType' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCharaMakeForDebugMenu, seedMode) == 0x000004, "Member 'NicolaUnitDataFL_DebugCharaMakeForDebugMenu::seedMode' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugCreateBattleParty
// 0x0074 (0x0074 - 0x0000)
struct NicolaUnitDataFL_DebugCreateBattleParty final
{
public:
	struct FCharaMakeInfo                         Party1;                                            // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharaMakeInfo                         Party2;                                            // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharaMakeInfo                         Party3;                                            // 0x0038(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharaMakeInfo                         Party4;                                            // 0x0054(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         minLv;                                             // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugCreateBattleParty) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugCreateBattleParty");
static_assert(sizeof(NicolaUnitDataFL_DebugCreateBattleParty) == 0x000074, "Wrong size on NicolaUnitDataFL_DebugCreateBattleParty");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateBattleParty, Party1) == 0x000000, "Member 'NicolaUnitDataFL_DebugCreateBattleParty::Party1' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateBattleParty, Party2) == 0x00001C, "Member 'NicolaUnitDataFL_DebugCreateBattleParty::Party2' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateBattleParty, Party3) == 0x000038, "Member 'NicolaUnitDataFL_DebugCreateBattleParty::Party3' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateBattleParty, Party4) == 0x000054, "Member 'NicolaUnitDataFL_DebugCreateBattleParty::Party4' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateBattleParty, minLv) == 0x000070, "Member 'NicolaUnitDataFL_DebugCreateBattleParty::minLv' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugCreateCharaMakeInfo
// 0x002C (0x002C - 0x0000)
struct NicolaUnitDataFL_DebugCreateCharaMakeInfo final
{
public:
	EUnitClassType                                ClassType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitGenderType                               GenderType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitVoicePattern                             VoicePattern;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         looksPattern;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         hairColorPattern;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugCharaMakeOption                         Option;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaMakeInfo                         ReturnValue;                                       // 0x0010(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugCreateCharaMakeInfo) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugCreateCharaMakeInfo");
static_assert(sizeof(NicolaUnitDataFL_DebugCreateCharaMakeInfo) == 0x00002C, "Wrong size on NicolaUnitDataFL_DebugCreateCharaMakeInfo");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, ClassType) == 0x000000, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::ClassType' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, GenderType) == 0x000001, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::GenderType' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, VoicePattern) == 0x000002, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::VoicePattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, looksPattern) == 0x000004, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::looksPattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, hairColorPattern) == 0x000008, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::hairColorPattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, Option) == 0x00000C, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::Option' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugCreateCharaMakeInfo, ReturnValue) == 0x000010, "Member 'NicolaUnitDataFL_DebugCreateCharaMakeInfo::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugDisplayAllMember
// 0x0001 (0x0001 - 0x0000)
struct NicolaUnitDataFL_DebugDisplayAllMember final
{
public:
	bool                                          partyOnly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugDisplayAllMember) == 0x000001, "Wrong alignment on NicolaUnitDataFL_DebugDisplayAllMember");
static_assert(sizeof(NicolaUnitDataFL_DebugDisplayAllMember) == 0x000001, "Wrong size on NicolaUnitDataFL_DebugDisplayAllMember");
static_assert(offsetof(NicolaUnitDataFL_DebugDisplayAllMember, partyOnly) == 0x000000, "Member 'NicolaUnitDataFL_DebugDisplayAllMember::partyOnly' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugGetAllSkill
// 0x0004 (0x0004 - 0x0000)
struct NicolaUnitDataFL_DebugGetAllSkill final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugGetAllSkill) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugGetAllSkill");
static_assert(sizeof(NicolaUnitDataFL_DebugGetAllSkill) == 0x000004, "Wrong size on NicolaUnitDataFL_DebugGetAllSkill");
static_assert(offsetof(NicolaUnitDataFL_DebugGetAllSkill, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_DebugGetAllSkill::partyNo' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugMaxDoping
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_DebugMaxDoping final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sub;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugMaxDoping) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugMaxDoping");
static_assert(sizeof(NicolaUnitDataFL_DebugMaxDoping) == 0x000008, "Wrong size on NicolaUnitDataFL_DebugMaxDoping");
static_assert(offsetof(NicolaUnitDataFL_DebugMaxDoping, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_DebugMaxDoping::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugMaxDoping, sub) == 0x000004, "Member 'NicolaUnitDataFL_DebugMaxDoping::sub' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugModifyHp
// 0x000C (0x000C - 0x0000)
struct NicolaUnitDataFL_DebugModifyHp final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         modifyValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccepDead;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_DebugModifyHp) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugModifyHp");
static_assert(sizeof(NicolaUnitDataFL_DebugModifyHp) == 0x00000C, "Wrong size on NicolaUnitDataFL_DebugModifyHp");
static_assert(offsetof(NicolaUnitDataFL_DebugModifyHp, partyIndex) == 0x000000, "Member 'NicolaUnitDataFL_DebugModifyHp::partyIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugModifyHp, modifyValue) == 0x000004, "Member 'NicolaUnitDataFL_DebugModifyHp::modifyValue' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugModifyHp, bAccepDead) == 0x000008, "Member 'NicolaUnitDataFL_DebugModifyHp::bAccepDead' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugModifyMp
// 0x000C (0x000C - 0x0000)
struct NicolaUnitDataFL_DebugModifyMp final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         modifyValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptEmpty;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_DebugModifyMp) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugModifyMp");
static_assert(sizeof(NicolaUnitDataFL_DebugModifyMp) == 0x00000C, "Wrong size on NicolaUnitDataFL_DebugModifyMp");
static_assert(offsetof(NicolaUnitDataFL_DebugModifyMp, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_DebugModifyMp::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugModifyMp, modifyValue) == 0x000004, "Member 'NicolaUnitDataFL_DebugModifyMp::modifyValue' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugModifyMp, bAcceptEmpty) == 0x000008, "Member 'NicolaUnitDataFL_DebugModifyMp::bAcceptEmpty' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DebugSetPartyUnitStatusEffectBP
// 0x0010 (0x0010 - 0x0000)
struct NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP final
{
public:
	int32                                         statusEffectFlag;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdd;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         partyMemberIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         healRatio;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP");
static_assert(sizeof(NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP) == 0x000010, "Wrong size on NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP");
static_assert(offsetof(NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP, statusEffectFlag) == 0x000000, "Member 'NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP::statusEffectFlag' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP, bAdd) == 0x000004, "Member 'NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP::bAdd' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP, partyMemberIndex) == 0x000008, "Member 'NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP::partyMemberIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP, healRatio) == 0x00000C, "Member 'NicolaUnitDataFL_DebugSetPartyUnitStatusEffectBP::healRatio' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.DeleteUnitDataFromStandby
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_DeleteUnitDataFromStandby final
{
public:
	int32                                         standbyIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_DeleteUnitDataFromStandby) == 0x000004, "Wrong alignment on NicolaUnitDataFL_DeleteUnitDataFromStandby");
static_assert(sizeof(NicolaUnitDataFL_DeleteUnitDataFromStandby) == 0x000008, "Wrong size on NicolaUnitDataFL_DeleteUnitDataFromStandby");
static_assert(offsetof(NicolaUnitDataFL_DeleteUnitDataFromStandby, standbyIndex) == 0x000000, "Member 'NicolaUnitDataFL_DeleteUnitDataFromStandby::standbyIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_DeleteUnitDataFromStandby, ReturnValue) == 0x000004, "Member 'NicolaUnitDataFL_DeleteUnitDataFromStandby::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.GetHairColorMax
// 0x0004 (0x0004 - 0x0000)
struct NicolaUnitDataFL_GetHairColorMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_GetHairColorMax) == 0x000004, "Wrong alignment on NicolaUnitDataFL_GetHairColorMax");
static_assert(sizeof(NicolaUnitDataFL_GetHairColorMax) == 0x000004, "Wrong size on NicolaUnitDataFL_GetHairColorMax");
static_assert(offsetof(NicolaUnitDataFL_GetHairColorMax, ReturnValue) == 0x000000, "Member 'NicolaUnitDataFL_GetHairColorMax::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.GetPartyMemberNum
// 0x0004 (0x0004 - 0x0000)
struct NicolaUnitDataFL_GetPartyMemberNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_GetPartyMemberNum) == 0x000004, "Wrong alignment on NicolaUnitDataFL_GetPartyMemberNum");
static_assert(sizeof(NicolaUnitDataFL_GetPartyMemberNum) == 0x000004, "Wrong size on NicolaUnitDataFL_GetPartyMemberNum");
static_assert(offsetof(NicolaUnitDataFL_GetPartyMemberNum, ReturnValue) == 0x000000, "Member 'NicolaUnitDataFL_GetPartyMemberNum::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.GetUnitDatasByBelongStatus
// 0x0058 (0x0058 - 0x0000)
struct NicolaUnitDataFL_GetUnitDatasByBelongStatus final
{
public:
	EUnitResidentBelongStatus                     belongStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FString>                    ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_GetUnitDatasByBelongStatus) == 0x000008, "Wrong alignment on NicolaUnitDataFL_GetUnitDatasByBelongStatus");
static_assert(sizeof(NicolaUnitDataFL_GetUnitDatasByBelongStatus) == 0x000058, "Wrong size on NicolaUnitDataFL_GetUnitDatasByBelongStatus");
static_assert(offsetof(NicolaUnitDataFL_GetUnitDatasByBelongStatus, belongStatus) == 0x000000, "Member 'NicolaUnitDataFL_GetUnitDatasByBelongStatus::belongStatus' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_GetUnitDatasByBelongStatus, ReturnValue) == 0x000008, "Member 'NicolaUnitDataFL_GetUnitDatasByBelongStatus::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.HealAllPartyMember
// 0x0001 (0x0001 - 0x0000)
struct NicolaUnitDataFL_HealAllPartyMember final
{
public:
	bool                                          bHealStatusEffect;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_HealAllPartyMember) == 0x000001, "Wrong alignment on NicolaUnitDataFL_HealAllPartyMember");
static_assert(sizeof(NicolaUnitDataFL_HealAllPartyMember) == 0x000001, "Wrong size on NicolaUnitDataFL_HealAllPartyMember");
static_assert(offsetof(NicolaUnitDataFL_HealAllPartyMember, bHealStatusEffect) == 0x000000, "Member 'NicolaUnitDataFL_HealAllPartyMember::bHealStatusEffect' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.HealPartyUnitHP
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_HealPartyUnitHP final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_HealPartyUnitHP) == 0x000004, "Wrong alignment on NicolaUnitDataFL_HealPartyUnitHP");
static_assert(sizeof(NicolaUnitDataFL_HealPartyUnitHP) == 0x000008, "Wrong size on NicolaUnitDataFL_HealPartyUnitHP");
static_assert(offsetof(NicolaUnitDataFL_HealPartyUnitHP, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_HealPartyUnitHP::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_HealPartyUnitHP, Value) == 0x000004, "Member 'NicolaUnitDataFL_HealPartyUnitHP::Value' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.HealPartyUnitMP
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_HealPartyUnitMP final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_HealPartyUnitMP) == 0x000004, "Wrong alignment on NicolaUnitDataFL_HealPartyUnitMP");
static_assert(sizeof(NicolaUnitDataFL_HealPartyUnitMP) == 0x000008, "Wrong size on NicolaUnitDataFL_HealPartyUnitMP");
static_assert(offsetof(NicolaUnitDataFL_HealPartyUnitMP, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_HealPartyUnitMP::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_HealPartyUnitMP, Value) == 0x000004, "Member 'NicolaUnitDataFL_HealPartyUnitMP::Value' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.MoveUnitDataToParty
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_MoveUnitDataToParty final
{
public:
	int32                                         standbyIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_MoveUnitDataToParty) == 0x000004, "Wrong alignment on NicolaUnitDataFL_MoveUnitDataToParty");
static_assert(sizeof(NicolaUnitDataFL_MoveUnitDataToParty) == 0x000008, "Wrong size on NicolaUnitDataFL_MoveUnitDataToParty");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToParty, standbyIndex) == 0x000000, "Member 'NicolaUnitDataFL_MoveUnitDataToParty::standbyIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToParty, ReturnValue) == 0x000004, "Member 'NicolaUnitDataFL_MoveUnitDataToParty::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.MoveUnitDataToPartyFromTemporary
// 0x0001 (0x0001 - 0x0000)
struct NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary) == 0x000001, "Wrong alignment on NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary");
static_assert(sizeof(NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary) == 0x000001, "Wrong size on NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary, ReturnValue) == 0x000000, "Member 'NicolaUnitDataFL_MoveUnitDataToPartyFromTemporary::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.MoveUnitDataToStandby
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_MoveUnitDataToStandby final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_MoveUnitDataToStandby) == 0x000004, "Wrong alignment on NicolaUnitDataFL_MoveUnitDataToStandby");
static_assert(sizeof(NicolaUnitDataFL_MoveUnitDataToStandby) == 0x000008, "Wrong size on NicolaUnitDataFL_MoveUnitDataToStandby");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToStandby, partyIndex) == 0x000000, "Member 'NicolaUnitDataFL_MoveUnitDataToStandby::partyIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToStandby, ReturnValue) == 0x000004, "Member 'NicolaUnitDataFL_MoveUnitDataToStandby::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.MoveUnitDataToTemporary
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_MoveUnitDataToTemporary final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_MoveUnitDataToTemporary) == 0x000004, "Wrong alignment on NicolaUnitDataFL_MoveUnitDataToTemporary");
static_assert(sizeof(NicolaUnitDataFL_MoveUnitDataToTemporary) == 0x000008, "Wrong size on NicolaUnitDataFL_MoveUnitDataToTemporary");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToTemporary, partyIndex) == 0x000000, "Member 'NicolaUnitDataFL_MoveUnitDataToTemporary::partyIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_MoveUnitDataToTemporary, ReturnValue) == 0x000004, "Member 'NicolaUnitDataFL_MoveUnitDataToTemporary::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.ReducePartyUnitHP
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_ReducePartyUnitHP final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_ReducePartyUnitHP) == 0x000004, "Wrong alignment on NicolaUnitDataFL_ReducePartyUnitHP");
static_assert(sizeof(NicolaUnitDataFL_ReducePartyUnitHP) == 0x000008, "Wrong size on NicolaUnitDataFL_ReducePartyUnitHP");
static_assert(offsetof(NicolaUnitDataFL_ReducePartyUnitHP, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_ReducePartyUnitHP::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_ReducePartyUnitHP, Value) == 0x000004, "Member 'NicolaUnitDataFL_ReducePartyUnitHP::Value' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.ReducePartyUnitMP
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_ReducePartyUnitMP final
{
public:
	int32                                         partyNo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_ReducePartyUnitMP) == 0x000004, "Wrong alignment on NicolaUnitDataFL_ReducePartyUnitMP");
static_assert(sizeof(NicolaUnitDataFL_ReducePartyUnitMP) == 0x000008, "Wrong size on NicolaUnitDataFL_ReducePartyUnitMP");
static_assert(offsetof(NicolaUnitDataFL_ReducePartyUnitMP, partyNo) == 0x000000, "Member 'NicolaUnitDataFL_ReducePartyUnitMP::partyNo' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_ReducePartyUnitMP, Value) == 0x000004, "Member 'NicolaUnitDataFL_ReducePartyUnitMP::Value' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.SetUnitVoicePattern
// 0x0008 (0x0008 - 0x0000)
struct NicolaUnitDataFL_SetUnitVoicePattern final
{
public:
	int32                                         partyUnitIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitVoicePattern                             VoicePattern;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_SetUnitVoicePattern) == 0x000004, "Wrong alignment on NicolaUnitDataFL_SetUnitVoicePattern");
static_assert(sizeof(NicolaUnitDataFL_SetUnitVoicePattern) == 0x000008, "Wrong size on NicolaUnitDataFL_SetUnitVoicePattern");
static_assert(offsetof(NicolaUnitDataFL_SetUnitVoicePattern, partyUnitIndex) == 0x000000, "Member 'NicolaUnitDataFL_SetUnitVoicePattern::partyUnitIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_SetUnitVoicePattern, VoicePattern) == 0x000004, "Member 'NicolaUnitDataFL_SetUnitVoicePattern::VoicePattern' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_SetUnitVoicePattern, ReturnValue) == 0x000005, "Member 'NicolaUnitDataFL_SetUnitVoicePattern::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.SortItemAll
// 0x0001 (0x0001 - 0x0000)
struct NicolaUnitDataFL_SortItemAll final
{
public:
	bool                                          bSortABC;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUnitDataFL_SortItemAll) == 0x000001, "Wrong alignment on NicolaUnitDataFL_SortItemAll");
static_assert(sizeof(NicolaUnitDataFL_SortItemAll) == 0x000001, "Wrong size on NicolaUnitDataFL_SortItemAll");
static_assert(offsetof(NicolaUnitDataFL_SortItemAll, bSortABC) == 0x000000, "Member 'NicolaUnitDataFL_SortItemAll::bSortABC' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.SwapUnitDataPosition
// 0x000C (0x000C - 0x0000)
struct NicolaUnitDataFL_SwapUnitDataPosition final
{
public:
	int32                                         partyIndex1;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         partyIndex2;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_SwapUnitDataPosition) == 0x000004, "Wrong alignment on NicolaUnitDataFL_SwapUnitDataPosition");
static_assert(sizeof(NicolaUnitDataFL_SwapUnitDataPosition) == 0x00000C, "Wrong size on NicolaUnitDataFL_SwapUnitDataPosition");
static_assert(offsetof(NicolaUnitDataFL_SwapUnitDataPosition, partyIndex1) == 0x000000, "Member 'NicolaUnitDataFL_SwapUnitDataPosition::partyIndex1' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_SwapUnitDataPosition, partyIndex2) == 0x000004, "Member 'NicolaUnitDataFL_SwapUnitDataPosition::partyIndex2' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_SwapUnitDataPosition, ReturnValue) == 0x000008, "Member 'NicolaUnitDataFL_SwapUnitDataPosition::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.UseSkillBattle
// 0x0018 (0x0018 - 0x0000)
struct NicolaUnitDataFL_UseSkillBattle final
{
public:
	bool                                          bEnemy;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillId;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_UseSkillBattle) == 0x000004, "Wrong alignment on NicolaUnitDataFL_UseSkillBattle");
static_assert(sizeof(NicolaUnitDataFL_UseSkillBattle) == 0x000018, "Wrong size on NicolaUnitDataFL_UseSkillBattle");
static_assert(offsetof(NicolaUnitDataFL_UseSkillBattle, bEnemy) == 0x000000, "Member 'NicolaUnitDataFL_UseSkillBattle::bEnemy' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillBattle, UserIndex) == 0x000004, "Member 'NicolaUnitDataFL_UseSkillBattle::UserIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillBattle, targetIndex) == 0x000008, "Member 'NicolaUnitDataFL_UseSkillBattle::targetIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillBattle, SkillId) == 0x00000C, "Member 'NicolaUnitDataFL_UseSkillBattle::SkillId' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillBattle, ReturnValue) == 0x000014, "Member 'NicolaUnitDataFL_UseSkillBattle::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUnitDataFL.UseSkillNoBattle
// 0x001C (0x001C - 0x0000)
struct NicolaUnitDataFL_UseSkillNoBattle final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RuraID;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaUnitDataFL_UseSkillNoBattle) == 0x000004, "Wrong alignment on NicolaUnitDataFL_UseSkillNoBattle");
static_assert(sizeof(NicolaUnitDataFL_UseSkillNoBattle) == 0x00001C, "Wrong size on NicolaUnitDataFL_UseSkillNoBattle");
static_assert(offsetof(NicolaUnitDataFL_UseSkillNoBattle, UserIndex) == 0x000000, "Member 'NicolaUnitDataFL_UseSkillNoBattle::UserIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillNoBattle, targetIndex) == 0x000004, "Member 'NicolaUnitDataFL_UseSkillNoBattle::targetIndex' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillNoBattle, SkillId) == 0x000008, "Member 'NicolaUnitDataFL_UseSkillNoBattle::SkillId' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillNoBattle, RuraID) == 0x000010, "Member 'NicolaUnitDataFL_UseSkillNoBattle::RuraID' has a wrong offset!");
static_assert(offsetof(NicolaUnitDataFL_UseSkillNoBattle, ReturnValue) == 0x000018, "Member 'NicolaUnitDataFL_UseSkillNoBattle::ReturnValue' has a wrong offset!");

// Function Nicola.UIXenlonWish.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIXenlonWish_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIXenlonWish_IsExecMenu) == 0x000001, "Wrong alignment on UIXenlonWish_IsExecMenu");
static_assert(sizeof(UIXenlonWish_IsExecMenu) == 0x000001, "Wrong size on UIXenlonWish_IsExecMenu");
static_assert(offsetof(UIXenlonWish_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIXenlonWish_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugCascadeDistributionExponent
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugCascadeDistributionExponent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugCascadeDistributionExponent) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugCascadeDistributionExponent");
static_assert(sizeof(NicolaLightingMgr_SetDebugCascadeDistributionExponent) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugCascadeDistributionExponent");
static_assert(offsetof(NicolaLightingMgr_SetDebugCascadeDistributionExponent, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugCascadeDistributionExponent::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugCascadeTransitionFraction
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugCascadeTransitionFraction final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugCascadeTransitionFraction) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugCascadeTransitionFraction");
static_assert(sizeof(NicolaLightingMgr_SetDebugCascadeTransitionFraction) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugCascadeTransitionFraction");
static_assert(offsetof(NicolaLightingMgr_SetDebugCascadeTransitionFraction, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugCascadeTransitionFraction::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugDynamicShadowCascades
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugDynamicShadowCascades final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugDynamicShadowCascades) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugDynamicShadowCascades");
static_assert(sizeof(NicolaLightingMgr_SetDebugDynamicShadowCascades) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugDynamicShadowCascades");
static_assert(offsetof(NicolaLightingMgr_SetDebugDynamicShadowCascades, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugDynamicShadowCascades::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugDynamicShadowDistance
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugDynamicShadowDistance final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugDynamicShadowDistance) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugDynamicShadowDistance");
static_assert(sizeof(NicolaLightingMgr_SetDebugDynamicShadowDistance) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugDynamicShadowDistance");
static_assert(offsetof(NicolaLightingMgr_SetDebugDynamicShadowDistance, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugDynamicShadowDistance::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugLightFunctionFadeDistance
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugLightFunctionFadeDistance final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugLightFunctionFadeDistance) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugLightFunctionFadeDistance");
static_assert(sizeof(NicolaLightingMgr_SetDebugLightFunctionFadeDistance) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugLightFunctionFadeDistance");
static_assert(offsetof(NicolaLightingMgr_SetDebugLightFunctionFadeDistance, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugLightFunctionFadeDistance::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugShadowBias
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugShadowBias final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugShadowBias) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugShadowBias");
static_assert(sizeof(NicolaLightingMgr_SetDebugShadowBias) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugShadowBias");
static_assert(offsetof(NicolaLightingMgr_SetDebugShadowBias, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugShadowBias::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetDebugShadowDistanceFadeoutFraction
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction) == 0x000004, "Wrong alignment on NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction");
static_assert(sizeof(NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction) == 0x000004, "Wrong size on NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction");
static_assert(offsetof(NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction, Value) == 0x000000, "Member 'NicolaLightingMgr_SetDebugShadowDistanceFadeoutFraction::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetLightDirRotatorActivated
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingMgr_SetLightDirRotatorActivated final
{
public:
	bool                                          isActivated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetLightDirRotatorActivated) == 0x000001, "Wrong alignment on NicolaLightingMgr_SetLightDirRotatorActivated");
static_assert(sizeof(NicolaLightingMgr_SetLightDirRotatorActivated) == 0x000001, "Wrong size on NicolaLightingMgr_SetLightDirRotatorActivated");
static_assert(offsetof(NicolaLightingMgr_SetLightDirRotatorActivated, isActivated) == 0x000000, "Member 'NicolaLightingMgr_SetLightDirRotatorActivated::isActivated' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.SetUseDebugDirectionalLightParameterFlag
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag) == 0x000001, "Wrong alignment on NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag");
static_assert(sizeof(NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag) == 0x000001, "Wrong size on NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag");
static_assert(offsetof(NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag, Value) == 0x000000, "Member 'NicolaLightingMgr_SetUseDebugDirectionalLightParameterFlag::Value' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugCascadeDistributionExponent
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugCascadeDistributionExponent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugCascadeDistributionExponent) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugCascadeDistributionExponent");
static_assert(sizeof(NicolaLightingMgr_GetDebugCascadeDistributionExponent) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugCascadeDistributionExponent");
static_assert(offsetof(NicolaLightingMgr_GetDebugCascadeDistributionExponent, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugCascadeDistributionExponent::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugCascadeTransitionFraction
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugCascadeTransitionFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugCascadeTransitionFraction) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugCascadeTransitionFraction");
static_assert(sizeof(NicolaLightingMgr_GetDebugCascadeTransitionFraction) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugCascadeTransitionFraction");
static_assert(offsetof(NicolaLightingMgr_GetDebugCascadeTransitionFraction, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugCascadeTransitionFraction::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugDynamicShadowCascades
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugDynamicShadowCascades final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugDynamicShadowCascades) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugDynamicShadowCascades");
static_assert(sizeof(NicolaLightingMgr_GetDebugDynamicShadowCascades) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugDynamicShadowCascades");
static_assert(offsetof(NicolaLightingMgr_GetDebugDynamicShadowCascades, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugDynamicShadowCascades::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugDynamicShadowDistance
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugDynamicShadowDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugDynamicShadowDistance) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugDynamicShadowDistance");
static_assert(sizeof(NicolaLightingMgr_GetDebugDynamicShadowDistance) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugDynamicShadowDistance");
static_assert(offsetof(NicolaLightingMgr_GetDebugDynamicShadowDistance, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugDynamicShadowDistance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugLightFunctionFadeDistance
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugLightFunctionFadeDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugLightFunctionFadeDistance) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugLightFunctionFadeDistance");
static_assert(sizeof(NicolaLightingMgr_GetDebugLightFunctionFadeDistance) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugLightFunctionFadeDistance");
static_assert(offsetof(NicolaLightingMgr_GetDebugLightFunctionFadeDistance, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugLightFunctionFadeDistance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugShadowBias
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugShadowBias final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugShadowBias) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugShadowBias");
static_assert(sizeof(NicolaLightingMgr_GetDebugShadowBias) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugShadowBias");
static_assert(offsetof(NicolaLightingMgr_GetDebugShadowBias, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugShadowBias::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.GetDebugShadowDistanceFadeoutFraction
// 0x0004 (0x0004 - 0x0000)
struct NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction) == 0x000004, "Wrong alignment on NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction");
static_assert(sizeof(NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction) == 0x000004, "Wrong size on NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction");
static_assert(offsetof(NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_GetDebugShadowDistanceFadeoutFraction::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.IsEnvironmentDirectionalLightEnable
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingMgr_IsEnvironmentDirectionalLightEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_IsEnvironmentDirectionalLightEnable) == 0x000001, "Wrong alignment on NicolaLightingMgr_IsEnvironmentDirectionalLightEnable");
static_assert(sizeof(NicolaLightingMgr_IsEnvironmentDirectionalLightEnable) == 0x000001, "Wrong size on NicolaLightingMgr_IsEnvironmentDirectionalLightEnable");
static_assert(offsetof(NicolaLightingMgr_IsEnvironmentDirectionalLightEnable, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_IsEnvironmentDirectionalLightEnable::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.IsEnvironmentSkyLightEnable
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingMgr_IsEnvironmentSkyLightEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_IsEnvironmentSkyLightEnable) == 0x000001, "Wrong alignment on NicolaLightingMgr_IsEnvironmentSkyLightEnable");
static_assert(sizeof(NicolaLightingMgr_IsEnvironmentSkyLightEnable) == 0x000001, "Wrong size on NicolaLightingMgr_IsEnvironmentSkyLightEnable");
static_assert(offsetof(NicolaLightingMgr_IsEnvironmentSkyLightEnable, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_IsEnvironmentSkyLightEnable::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.IsEnvironmentSkySphereEnable
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingMgr_IsEnvironmentSkySphereEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_IsEnvironmentSkySphereEnable) == 0x000001, "Wrong alignment on NicolaLightingMgr_IsEnvironmentSkySphereEnable");
static_assert(sizeof(NicolaLightingMgr_IsEnvironmentSkySphereEnable) == 0x000001, "Wrong size on NicolaLightingMgr_IsEnvironmentSkySphereEnable");
static_assert(offsetof(NicolaLightingMgr_IsEnvironmentSkySphereEnable, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_IsEnvironmentSkySphereEnable::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaLightingMgr.IsLightDirRotatorActivated
// 0x0001 (0x0001 - 0x0000)
struct NicolaLightingMgr_IsLightDirRotatorActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaLightingMgr_IsLightDirRotatorActivated) == 0x000001, "Wrong alignment on NicolaLightingMgr_IsLightDirRotatorActivated");
static_assert(sizeof(NicolaLightingMgr_IsLightDirRotatorActivated) == 0x000001, "Wrong size on NicolaLightingMgr_IsLightDirRotatorActivated");
static_assert(offsetof(NicolaLightingMgr_IsLightDirRotatorActivated, ReturnValue) == 0x000000, "Member 'NicolaLightingMgr_IsLightDirRotatorActivated::ReturnValue' has a wrong offset!");

// Function Nicola.UIBar2Menu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIBar2Menu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBar2Menu_IsExecMenu) == 0x000001, "Wrong alignment on UIBar2Menu_IsExecMenu");
static_assert(sizeof(UIBar2Menu_IsExecMenu) == 0x000001, "Wrong size on UIBar2Menu_IsExecMenu");
static_assert(offsetof(UIBar2Menu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIBar2Menu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.SetApertureRate
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_SetApertureRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_SetApertureRate) == 0x000004, "Wrong alignment on PostProcessMgrBase_SetApertureRate");
static_assert(sizeof(PostProcessMgrBase_SetApertureRate) == 0x000008, "Wrong size on PostProcessMgrBase_SetApertureRate");
static_assert(offsetof(PostProcessMgrBase_SetApertureRate, Rate) == 0x000000, "Member 'PostProcessMgrBase_SetApertureRate::Rate' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_SetApertureRate, BlendTime) == 0x000004, "Member 'PostProcessMgrBase_SetApertureRate::BlendTime' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.SetFocalLength
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_SetFocalLength final
{
public:
	ENicolaCameraParamType                        ParamType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocalLength;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_SetFocalLength) == 0x000004, "Wrong alignment on PostProcessMgrBase_SetFocalLength");
static_assert(sizeof(PostProcessMgrBase_SetFocalLength) == 0x000008, "Wrong size on PostProcessMgrBase_SetFocalLength");
static_assert(offsetof(PostProcessMgrBase_SetFocalLength, ParamType) == 0x000000, "Member 'PostProcessMgrBase_SetFocalLength::ParamType' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_SetFocalLength, FocalLength) == 0x000004, "Member 'PostProcessMgrBase_SetFocalLength::FocalLength' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.GetAperture
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_GetAperture final
{
public:
	ENicolaCameraParamType                        ParamType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_GetAperture) == 0x000004, "Wrong alignment on PostProcessMgrBase_GetAperture");
static_assert(sizeof(PostProcessMgrBase_GetAperture) == 0x000008, "Wrong size on PostProcessMgrBase_GetAperture");
static_assert(offsetof(PostProcessMgrBase_GetAperture, ParamType) == 0x000000, "Member 'PostProcessMgrBase_GetAperture::ParamType' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_GetAperture, ReturnValue) == 0x000004, "Member 'PostProcessMgrBase_GetAperture::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.GetApertureRate
// 0x0004 (0x0004 - 0x0000)
struct PostProcessMgrBase_GetApertureRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_GetApertureRate) == 0x000004, "Wrong alignment on PostProcessMgrBase_GetApertureRate");
static_assert(sizeof(PostProcessMgrBase_GetApertureRate) == 0x000004, "Wrong size on PostProcessMgrBase_GetApertureRate");
static_assert(offsetof(PostProcessMgrBase_GetApertureRate, ReturnValue) == 0x000000, "Member 'PostProcessMgrBase_GetApertureRate::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.GetDiaphragmBladeCount
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_GetDiaphragmBladeCount final
{
public:
	ENicolaCameraParamType                        ParamType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_GetDiaphragmBladeCount) == 0x000004, "Wrong alignment on PostProcessMgrBase_GetDiaphragmBladeCount");
static_assert(sizeof(PostProcessMgrBase_GetDiaphragmBladeCount) == 0x000008, "Wrong size on PostProcessMgrBase_GetDiaphragmBladeCount");
static_assert(offsetof(PostProcessMgrBase_GetDiaphragmBladeCount, ParamType) == 0x000000, "Member 'PostProcessMgrBase_GetDiaphragmBladeCount::ParamType' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_GetDiaphragmBladeCount, ReturnValue) == 0x000004, "Member 'PostProcessMgrBase_GetDiaphragmBladeCount::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.GetDofDepthBlurAmount
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_GetDofDepthBlurAmount final
{
public:
	ENicolaCameraParamType                        ParamType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_GetDofDepthBlurAmount) == 0x000004, "Wrong alignment on PostProcessMgrBase_GetDofDepthBlurAmount");
static_assert(sizeof(PostProcessMgrBase_GetDofDepthBlurAmount) == 0x000008, "Wrong size on PostProcessMgrBase_GetDofDepthBlurAmount");
static_assert(offsetof(PostProcessMgrBase_GetDofDepthBlurAmount, ParamType) == 0x000000, "Member 'PostProcessMgrBase_GetDofDepthBlurAmount::ParamType' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_GetDofDepthBlurAmount, ReturnValue) == 0x000004, "Member 'PostProcessMgrBase_GetDofDepthBlurAmount::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.GetDofDepthBlurRadius
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_GetDofDepthBlurRadius final
{
public:
	ENicolaCameraParamType                        ParamType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_GetDofDepthBlurRadius) == 0x000004, "Wrong alignment on PostProcessMgrBase_GetDofDepthBlurRadius");
static_assert(sizeof(PostProcessMgrBase_GetDofDepthBlurRadius) == 0x000008, "Wrong size on PostProcessMgrBase_GetDofDepthBlurRadius");
static_assert(offsetof(PostProcessMgrBase_GetDofDepthBlurRadius, ParamType) == 0x000000, "Member 'PostProcessMgrBase_GetDofDepthBlurRadius::ParamType' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_GetDofDepthBlurRadius, ReturnValue) == 0x000004, "Member 'PostProcessMgrBase_GetDofDepthBlurRadius::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessMgrBase.GetFocalLength
// 0x0008 (0x0008 - 0x0000)
struct PostProcessMgrBase_GetFocalLength final
{
public:
	ENicolaCameraParamType                        ParamType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessMgrBase_GetFocalLength) == 0x000004, "Wrong alignment on PostProcessMgrBase_GetFocalLength");
static_assert(sizeof(PostProcessMgrBase_GetFocalLength) == 0x000008, "Wrong size on PostProcessMgrBase_GetFocalLength");
static_assert(offsetof(PostProcessMgrBase_GetFocalLength, ParamType) == 0x000000, "Member 'PostProcessMgrBase_GetFocalLength::ParamType' has a wrong offset!");
static_assert(offsetof(PostProcessMgrBase_GetFocalLength, ReturnValue) == 0x000004, "Member 'PostProcessMgrBase_GetFocalLength::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaResearchCommandComponent.OnEventOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct NicolaResearchCommandComponent_OnEventOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaResearchCommandComponent_OnEventOverlapBegin) == 0x000008, "Wrong alignment on NicolaResearchCommandComponent_OnEventOverlapBegin");
static_assert(sizeof(NicolaResearchCommandComponent_OnEventOverlapBegin) == 0x0000A8, "Wrong size on NicolaResearchCommandComponent_OnEventOverlapBegin");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapBegin, OverlappedComp) == 0x000000, "Member 'NicolaResearchCommandComponent_OnEventOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapBegin, OtherActor) == 0x000008, "Member 'NicolaResearchCommandComponent_OnEventOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapBegin, OtherComp) == 0x000010, "Member 'NicolaResearchCommandComponent_OnEventOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'NicolaResearchCommandComponent_OnEventOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapBegin, bFromSweep) == 0x00001C, "Member 'NicolaResearchCommandComponent_OnEventOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapBegin, SweepResult) == 0x000020, "Member 'NicolaResearchCommandComponent_OnEventOverlapBegin::SweepResult' has a wrong offset!");

// Function Nicola.NicolaResearchCommandComponent.OnEventOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct NicolaResearchCommandComponent_OnEventOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaResearchCommandComponent_OnEventOverlapEnd) == 0x000008, "Wrong alignment on NicolaResearchCommandComponent_OnEventOverlapEnd");
static_assert(sizeof(NicolaResearchCommandComponent_OnEventOverlapEnd) == 0x000020, "Wrong size on NicolaResearchCommandComponent_OnEventOverlapEnd");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapEnd, OverlappedComp) == 0x000000, "Member 'NicolaResearchCommandComponent_OnEventOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapEnd, OtherActor) == 0x000008, "Member 'NicolaResearchCommandComponent_OnEventOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapEnd, OtherComp) == 0x000010, "Member 'NicolaResearchCommandComponent_OnEventOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(NicolaResearchCommandComponent_OnEventOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'NicolaResearchCommandComponent_OnEventOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Nicola.ShineSearchEventForField.OnFadeCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct ShineSearchEventForField_OnFadeCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShineSearchEventForField_OnFadeCollisionOverlapBegin) == 0x000008, "Wrong alignment on ShineSearchEventForField_OnFadeCollisionOverlapBegin");
static_assert(sizeof(ShineSearchEventForField_OnFadeCollisionOverlapBegin) == 0x0000A8, "Wrong size on ShineSearchEventForField_OnFadeCollisionOverlapBegin");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapBegin, OverlappedComp) == 0x000000, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function Nicola.ShineSearchEventForField.OnFadeCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct ShineSearchEventForField_OnFadeCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShineSearchEventForField_OnFadeCollisionOverlapEnd) == 0x000008, "Wrong alignment on ShineSearchEventForField_OnFadeCollisionOverlapEnd");
static_assert(sizeof(ShineSearchEventForField_OnFadeCollisionOverlapEnd) == 0x000020, "Wrong size on ShineSearchEventForField_OnFadeCollisionOverlapEnd");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapEnd, OverlappedComp) == 0x000000, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(ShineSearchEventForField_OnFadeCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'ShineSearchEventForField_OnFadeCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Nicola.UITutorial.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UITutorial_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorial_IsExecMenu) == 0x000001, "Wrong alignment on UITutorial_IsExecMenu");
static_assert(sizeof(UITutorial_IsExecMenu) == 0x000001, "Wrong size on UITutorial_IsExecMenu");
static_assert(offsetof(UITutorial_IsExecMenu, ReturnValue) == 0x000000, "Member 'UITutorial_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UITutorial.OpenMenu
// 0x0008 (0x0008 - 0x0000)
struct UITutorial_OpenMenu final
{
public:
	class FName                                   InGopId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorial_OpenMenu) == 0x000004, "Wrong alignment on UITutorial_OpenMenu");
static_assert(sizeof(UITutorial_OpenMenu) == 0x000008, "Wrong size on UITutorial_OpenMenu");
static_assert(offsetof(UITutorial_OpenMenu, InGopId) == 0x000000, "Member 'UITutorial_OpenMenu::InGopId' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.AsyncLoadGameData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_AsyncLoadGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          loadForConfig;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSaveGameManager_AsyncLoadGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_AsyncLoadGameData");
static_assert(sizeof(NicolaSaveGameManager_AsyncLoadGameData) == 0x000008, "Wrong size on NicolaSaveGameManager_AsyncLoadGameData");
static_assert(offsetof(NicolaSaveGameManager_AsyncLoadGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_AsyncLoadGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_AsyncLoadGameData, loadForConfig) == 0x000004, "Member 'NicolaSaveGameManager_AsyncLoadGameData::loadForConfig' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.AsyncSaveGameData
// 0x0018 (0x0018 - 0x0000)
struct NicolaSaveGameManager_AsyncSaveGameData final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          gameClear;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   saveChurchID;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_AsyncSaveGameData) == 0x000008, "Wrong alignment on NicolaSaveGameManager_AsyncSaveGameData");
static_assert(sizeof(NicolaSaveGameManager_AsyncSaveGameData) == 0x000018, "Wrong size on NicolaSaveGameManager_AsyncSaveGameData");
static_assert(offsetof(NicolaSaveGameManager_AsyncSaveGameData, WorldContext) == 0x000000, "Member 'NicolaSaveGameManager_AsyncSaveGameData::WorldContext' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_AsyncSaveGameData, DataIndex) == 0x000008, "Member 'NicolaSaveGameManager_AsyncSaveGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_AsyncSaveGameData, gameClear) == 0x00000C, "Member 'NicolaSaveGameManager_AsyncSaveGameData::gameClear' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_AsyncSaveGameData, saveChurchID) == 0x000010, "Member 'NicolaSaveGameManager_AsyncSaveGameData::saveChurchID' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.DEBUG_ResetSystemData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_DEBUG_ResetSystemData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSaveGameManager_DEBUG_ResetSystemData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_DEBUG_ResetSystemData");
static_assert(sizeof(NicolaSaveGameManager_DEBUG_ResetSystemData) == 0x000008, "Wrong size on NicolaSaveGameManager_DEBUG_ResetSystemData");
static_assert(offsetof(NicolaSaveGameManager_DEBUG_ResetSystemData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_DEBUG_ResetSystemData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_DEBUG_ResetSystemData, ReturnValue) == 0x000004, "Member 'NicolaSaveGameManager_DEBUG_ResetSystemData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.DebugMakeClearData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_DebugMakeClearData final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_DebugMakeClearData) == 0x000008, "Wrong alignment on NicolaSaveGameManager_DebugMakeClearData");
static_assert(sizeof(NicolaSaveGameManager_DebugMakeClearData) == 0x000008, "Wrong size on NicolaSaveGameManager_DebugMakeClearData");
static_assert(offsetof(NicolaSaveGameManager_DebugMakeClearData, WorldContext) == 0x000000, "Member 'NicolaSaveGameManager_DebugMakeClearData::WorldContext' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.DeleteSaveGameData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_DeleteSaveGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSaveGameManager_DeleteSaveGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_DeleteSaveGameData");
static_assert(sizeof(NicolaSaveGameManager_DeleteSaveGameData) == 0x000008, "Wrong size on NicolaSaveGameManager_DeleteSaveGameData");
static_assert(offsetof(NicolaSaveGameManager_DeleteSaveGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_DeleteSaveGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_DeleteSaveGameData, ReturnValue) == 0x000004, "Member 'NicolaSaveGameManager_DeleteSaveGameData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.DoesSaveGameExist
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_DoesSaveGameExist final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSaveGameManager_DoesSaveGameExist) == 0x000004, "Wrong alignment on NicolaSaveGameManager_DoesSaveGameExist");
static_assert(sizeof(NicolaSaveGameManager_DoesSaveGameExist) == 0x000008, "Wrong size on NicolaSaveGameManager_DoesSaveGameExist");
static_assert(offsetof(NicolaSaveGameManager_DoesSaveGameExist, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_DoesSaveGameExist::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_DoesSaveGameExist, ReturnValue) == 0x000004, "Member 'NicolaSaveGameManager_DoesSaveGameExist::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.LoadGameData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_LoadGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSaveGameManager_LoadGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_LoadGameData");
static_assert(sizeof(NicolaSaveGameManager_LoadGameData) == 0x000008, "Wrong size on NicolaSaveGameManager_LoadGameData");
static_assert(offsetof(NicolaSaveGameManager_LoadGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_LoadGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_LoadGameData, ReturnValue) == 0x000004, "Member 'NicolaSaveGameManager_LoadGameData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.MakeBrokenGameData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_MakeBrokenGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         randSeed;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_MakeBrokenGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_MakeBrokenGameData");
static_assert(sizeof(NicolaSaveGameManager_MakeBrokenGameData) == 0x000008, "Wrong size on NicolaSaveGameManager_MakeBrokenGameData");
static_assert(offsetof(NicolaSaveGameManager_MakeBrokenGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_MakeBrokenGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_MakeBrokenGameData, randSeed) == 0x000004, "Member 'NicolaSaveGameManager_MakeBrokenGameData::randSeed' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.MakeCrackedGameData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_MakeCrackedGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         randSeed;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_MakeCrackedGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_MakeCrackedGameData");
static_assert(sizeof(NicolaSaveGameManager_MakeCrackedGameData) == 0x000008, "Wrong size on NicolaSaveGameManager_MakeCrackedGameData");
static_assert(offsetof(NicolaSaveGameManager_MakeCrackedGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_MakeCrackedGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_MakeCrackedGameData, randSeed) == 0x000004, "Member 'NicolaSaveGameManager_MakeCrackedGameData::randSeed' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.MakeDifferentVersionGameData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_MakeDifferentVersionGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_MakeDifferentVersionGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_MakeDifferentVersionGameData");
static_assert(sizeof(NicolaSaveGameManager_MakeDifferentVersionGameData) == 0x000008, "Wrong size on NicolaSaveGameManager_MakeDifferentVersionGameData");
static_assert(offsetof(NicolaSaveGameManager_MakeDifferentVersionGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_MakeDifferentVersionGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_MakeDifferentVersionGameData, Version) == 0x000004, "Member 'NicolaSaveGameManager_MakeDifferentVersionGameData::Version' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.MakeDifferentVersionSystemData
// 0x0008 (0x0008 - 0x0000)
struct NicolaSaveGameManager_MakeDifferentVersionSystemData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_MakeDifferentVersionSystemData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_MakeDifferentVersionSystemData");
static_assert(sizeof(NicolaSaveGameManager_MakeDifferentVersionSystemData) == 0x000008, "Wrong size on NicolaSaveGameManager_MakeDifferentVersionSystemData");
static_assert(offsetof(NicolaSaveGameManager_MakeDifferentVersionSystemData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_MakeDifferentVersionSystemData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_MakeDifferentVersionSystemData, Version) == 0x000004, "Member 'NicolaSaveGameManager_MakeDifferentVersionSystemData::Version' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.MakeInvertedGameData
// 0x0004 (0x0004 - 0x0000)
struct NicolaSaveGameManager_MakeInvertedGameData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_MakeInvertedGameData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_MakeInvertedGameData");
static_assert(sizeof(NicolaSaveGameManager_MakeInvertedGameData) == 0x000004, "Wrong size on NicolaSaveGameManager_MakeInvertedGameData");
static_assert(offsetof(NicolaSaveGameManager_MakeInvertedGameData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_MakeInvertedGameData::DataIndex' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.MakeInvertedSystemData
// 0x0004 (0x0004 - 0x0000)
struct NicolaSaveGameManager_MakeInvertedSystemData final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_MakeInvertedSystemData) == 0x000004, "Wrong alignment on NicolaSaveGameManager_MakeInvertedSystemData");
static_assert(sizeof(NicolaSaveGameManager_MakeInvertedSystemData) == 0x000004, "Wrong size on NicolaSaveGameManager_MakeInvertedSystemData");
static_assert(offsetof(NicolaSaveGameManager_MakeInvertedSystemData, DataIndex) == 0x000000, "Member 'NicolaSaveGameManager_MakeInvertedSystemData::DataIndex' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.SaveGameData
// 0x0020 (0x0020 - 0x0000)
struct NicolaSaveGameManager_SaveGameData final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          gameClear;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   saveChurchID;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSaveGameManager_SaveGameData) == 0x000008, "Wrong alignment on NicolaSaveGameManager_SaveGameData");
static_assert(sizeof(NicolaSaveGameManager_SaveGameData) == 0x000020, "Wrong size on NicolaSaveGameManager_SaveGameData");
static_assert(offsetof(NicolaSaveGameManager_SaveGameData, WorldContext) == 0x000000, "Member 'NicolaSaveGameManager_SaveGameData::WorldContext' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_SaveGameData, DataIndex) == 0x000008, "Member 'NicolaSaveGameManager_SaveGameData::DataIndex' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_SaveGameData, gameClear) == 0x00000C, "Member 'NicolaSaveGameManager_SaveGameData::gameClear' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_SaveGameData, saveChurchID) == 0x000010, "Member 'NicolaSaveGameManager_SaveGameData::saveChurchID' has a wrong offset!");
static_assert(offsetof(NicolaSaveGameManager_SaveGameData, ReturnValue) == 0x000018, "Member 'NicolaSaveGameManager_SaveGameData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.IsExistingAutoSaveData
// 0x0001 (0x0001 - 0x0000)
struct NicolaSaveGameManager_IsExistingAutoSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_IsExistingAutoSaveData) == 0x000001, "Wrong alignment on NicolaSaveGameManager_IsExistingAutoSaveData");
static_assert(sizeof(NicolaSaveGameManager_IsExistingAutoSaveData) == 0x000001, "Wrong size on NicolaSaveGameManager_IsExistingAutoSaveData");
static_assert(offsetof(NicolaSaveGameManager_IsExistingAutoSaveData, ReturnValue) == 0x000000, "Member 'NicolaSaveGameManager_IsExistingAutoSaveData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.IsExistingContinueSaveData
// 0x0001 (0x0001 - 0x0000)
struct NicolaSaveGameManager_IsExistingContinueSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_IsExistingContinueSaveData) == 0x000001, "Wrong alignment on NicolaSaveGameManager_IsExistingContinueSaveData");
static_assert(sizeof(NicolaSaveGameManager_IsExistingContinueSaveData) == 0x000001, "Wrong size on NicolaSaveGameManager_IsExistingContinueSaveData");
static_assert(offsetof(NicolaSaveGameManager_IsExistingContinueSaveData, ReturnValue) == 0x000000, "Member 'NicolaSaveGameManager_IsExistingContinueSaveData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSaveGameManager.IsExistingNormalSaveData
// 0x0001 (0x0001 - 0x0000)
struct NicolaSaveGameManager_IsExistingNormalSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSaveGameManager_IsExistingNormalSaveData) == 0x000001, "Wrong alignment on NicolaSaveGameManager_IsExistingNormalSaveData");
static_assert(sizeof(NicolaSaveGameManager_IsExistingNormalSaveData) == 0x000001, "Wrong size on NicolaSaveGameManager_IsExistingNormalSaveData");
static_assert(offsetof(NicolaSaveGameManager_IsExistingNormalSaveData, ReturnValue) == 0x000000, "Member 'NicolaSaveGameManager_IsExistingNormalSaveData::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSkillFL.DebugUseSkill
// 0x0018 (0x0018 - 0x0000)
struct NicolaSkillFL_DebugUseSkill final
{
public:
	class FName                                   gopMagicId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetNo;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattle;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnemy;                                            // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RuraID;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSkillFL_DebugUseSkill) == 0x000004, "Wrong alignment on NicolaSkillFL_DebugUseSkill");
static_assert(sizeof(NicolaSkillFL_DebugUseSkill) == 0x000018, "Wrong size on NicolaSkillFL_DebugUseSkill");
static_assert(offsetof(NicolaSkillFL_DebugUseSkill, gopMagicId) == 0x000000, "Member 'NicolaSkillFL_DebugUseSkill::gopMagicId' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_DebugUseSkill, targetNo) == 0x000008, "Member 'NicolaSkillFL_DebugUseSkill::targetNo' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_DebugUseSkill, bBattle) == 0x00000C, "Member 'NicolaSkillFL_DebugUseSkill::bBattle' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_DebugUseSkill, bEnemy) == 0x00000D, "Member 'NicolaSkillFL_DebugUseSkill::bEnemy' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_DebugUseSkill, RuraID) == 0x000010, "Member 'NicolaSkillFL_DebugUseSkill::RuraID' has a wrong offset!");

// Function Nicola.NicolaSkillFL.GetRuraList
// 0x0010 (0x0010 - 0x0000)
struct NicolaSkillFL_GetRuraList final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSkillFL_GetRuraList) == 0x000008, "Wrong alignment on NicolaSkillFL_GetRuraList");
static_assert(sizeof(NicolaSkillFL_GetRuraList) == 0x000010, "Wrong size on NicolaSkillFL_GetRuraList");
static_assert(offsetof(NicolaSkillFL_GetRuraList, GopIdList) == 0x000000, "Member 'NicolaSkillFL_GetRuraList::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSkillFL.GetScriptArgs
// 0x0058 (0x0058 - 0x0000)
struct NicolaSkillFL_GetScriptArgs final
{
public:
	int32                                         scriptId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSkillFL_GetScriptArgs) == 0x000008, "Wrong alignment on NicolaSkillFL_GetScriptArgs");
static_assert(sizeof(NicolaSkillFL_GetScriptArgs) == 0x000058, "Wrong size on NicolaSkillFL_GetScriptArgs");
static_assert(offsetof(NicolaSkillFL_GetScriptArgs, scriptId) == 0x000000, "Member 'NicolaSkillFL_GetScriptArgs::scriptId' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_GetScriptArgs, ReturnValue) == 0x000008, "Member 'NicolaSkillFL_GetScriptArgs::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSkillFL.GetSkillGopList
// 0x0010 (0x0010 - 0x0000)
struct NicolaSkillFL_GetSkillGopList final
{
public:
	TArray<class FName>                           GopIdList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSkillFL_GetSkillGopList) == 0x000008, "Wrong alignment on NicolaSkillFL_GetSkillGopList");
static_assert(sizeof(NicolaSkillFL_GetSkillGopList) == 0x000010, "Wrong size on NicolaSkillFL_GetSkillGopList");
static_assert(offsetof(NicolaSkillFL_GetSkillGopList, GopIdList) == 0x000000, "Member 'NicolaSkillFL_GetSkillGopList::GopIdList' has a wrong offset!");

// Function Nicola.NicolaSkillFL.OnWalkStep
// 0x0010 (0x0010 - 0x0000)
struct NicolaSkillFL_OnWalkStep final
{
public:
	bool                                          isInTown;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isField;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FastWalkRate;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         subRate;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSkillFL_OnWalkStep) == 0x000004, "Wrong alignment on NicolaSkillFL_OnWalkStep");
static_assert(sizeof(NicolaSkillFL_OnWalkStep) == 0x000010, "Wrong size on NicolaSkillFL_OnWalkStep");
static_assert(offsetof(NicolaSkillFL_OnWalkStep, isInTown) == 0x000000, "Member 'NicolaSkillFL_OnWalkStep::isInTown' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_OnWalkStep, isField) == 0x000001, "Member 'NicolaSkillFL_OnWalkStep::isField' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_OnWalkStep, FastWalkRate) == 0x000004, "Member 'NicolaSkillFL_OnWalkStep::FastWalkRate' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_OnWalkStep, subRate) == 0x000008, "Member 'NicolaSkillFL_OnWalkStep::subRate' has a wrong offset!");
static_assert(offsetof(NicolaSkillFL_OnWalkStep, ReturnValue) == 0x00000C, "Member 'NicolaSkillFL_OnWalkStep::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSkillFL.RemoveScriptArgs
// 0x0004 (0x0004 - 0x0000)
struct NicolaSkillFL_RemoveScriptArgs final
{
public:
	int32                                         scriptId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSkillFL_RemoveScriptArgs) == 0x000004, "Wrong alignment on NicolaSkillFL_RemoveScriptArgs");
static_assert(sizeof(NicolaSkillFL_RemoveScriptArgs) == 0x000004, "Wrong size on NicolaSkillFL_RemoveScriptArgs");
static_assert(offsetof(NicolaSkillFL_RemoveScriptArgs, scriptId) == 0x000000, "Member 'NicolaSkillFL_RemoveScriptArgs::scriptId' has a wrong offset!");

// Function Nicola.OutputFontSizeSubsytem.SetFontPath
// 0x0010 (0x0010 - 0x0000)
struct OutputFontSizeSubsytem_SetFontPath final
{
public:
	class FString                                 InFontPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutputFontSizeSubsytem_SetFontPath) == 0x000008, "Wrong alignment on OutputFontSizeSubsytem_SetFontPath");
static_assert(sizeof(OutputFontSizeSubsytem_SetFontPath) == 0x000010, "Wrong size on OutputFontSizeSubsytem_SetFontPath");
static_assert(offsetof(OutputFontSizeSubsytem_SetFontPath, InFontPath) == 0x000000, "Member 'OutputFontSizeSubsytem_SetFontPath::InFontPath' has a wrong offset!");

// Function Nicola.OutputFontSizeSubsytem.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct OutputFontSizeSubsytem_SetFontSize final
{
public:
	int32                                         InFontSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutputFontSizeSubsytem_SetFontSize) == 0x000004, "Wrong alignment on OutputFontSizeSubsytem_SetFontSize");
static_assert(sizeof(OutputFontSizeSubsytem_SetFontSize) == 0x000004, "Wrong size on OutputFontSizeSubsytem_SetFontSize");
static_assert(offsetof(OutputFontSizeSubsytem_SetFontSize, InFontSize) == 0x000000, "Member 'OutputFontSizeSubsytem_SetFontSize::InFontSize' has a wrong offset!");

// Function Nicola.OutputFontSizeSubsytem.GetFontSize
// 0x0004 (0x0004 - 0x0000)
struct OutputFontSizeSubsytem_GetFontSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutputFontSizeSubsytem_GetFontSize) == 0x000004, "Wrong alignment on OutputFontSizeSubsytem_GetFontSize");
static_assert(sizeof(OutputFontSizeSubsytem_GetFontSize) == 0x000004, "Wrong size on OutputFontSizeSubsytem_GetFontSize");
static_assert(offsetof(OutputFontSizeSubsytem_GetFontSize, ReturnValue) == 0x000000, "Member 'OutputFontSizeSubsytem_GetFontSize::ReturnValue' has a wrong offset!");

// Function Nicola.SequenceCameraFL.DebugPlayEventSequence
// 0x0004 (0x0004 - 0x0000)
struct SequenceCameraFL_DebugPlayEventSequence final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraFL_DebugPlayEventSequence) == 0x000004, "Wrong alignment on SequenceCameraFL_DebugPlayEventSequence");
static_assert(sizeof(SequenceCameraFL_DebugPlayEventSequence) == 0x000004, "Wrong size on SequenceCameraFL_DebugPlayEventSequence");
static_assert(offsetof(SequenceCameraFL_DebugPlayEventSequence, Index_0) == 0x000000, "Member 'SequenceCameraFL_DebugPlayEventSequence::Index_0' has a wrong offset!");

// Function Nicola.SequenceCameraFL.SequencerSetEnableCharacterForegroundPrePass
// 0x0010 (0x0010 - 0x0000)
struct SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass final
{
public:
	class UPrimitiveComponent*                    TARGET;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass) == 0x000008, "Wrong alignment on SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass");
static_assert(sizeof(SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass) == 0x000010, "Wrong size on SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass");
static_assert(offsetof(SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass, TARGET) == 0x000000, "Member 'SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass::TARGET' has a wrong offset!");
static_assert(offsetof(SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass, bEnable) == 0x000008, "Member 'SequenceCameraFL_SequencerSetEnableCharacterForegroundPrePass::bEnable' has a wrong offset!");

// Function Nicola.PostProcessFL.EndPostProcessRecollection
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_EndPostProcessRecollection final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_EndPostProcessRecollection) == 0x000004, "Wrong alignment on PostProcessFL_EndPostProcessRecollection");
static_assert(sizeof(PostProcessFL_EndPostProcessRecollection) == 0x000004, "Wrong size on PostProcessFL_EndPostProcessRecollection");
static_assert(offsetof(PostProcessFL_EndPostProcessRecollection, Time) == 0x000000, "Member 'PostProcessFL_EndPostProcessRecollection::Time' has a wrong offset!");

// Function Nicola.PostProcessFL.EndPostProcessSepia
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_EndPostProcessSepia final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_EndPostProcessSepia) == 0x000004, "Wrong alignment on PostProcessFL_EndPostProcessSepia");
static_assert(sizeof(PostProcessFL_EndPostProcessSepia) == 0x000004, "Wrong size on PostProcessFL_EndPostProcessSepia");
static_assert(offsetof(PostProcessFL_EndPostProcessSepia, Time) == 0x000000, "Member 'PostProcessFL_EndPostProcessSepia::Time' has a wrong offset!");

// Function Nicola.PostProcessFL.EndSettingPostProcessColorByEventScript
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_EndSettingPostProcessColorByEventScript final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_EndSettingPostProcessColorByEventScript) == 0x000004, "Wrong alignment on PostProcessFL_EndSettingPostProcessColorByEventScript");
static_assert(sizeof(PostProcessFL_EndSettingPostProcessColorByEventScript) == 0x000004, "Wrong size on PostProcessFL_EndSettingPostProcessColorByEventScript");
static_assert(offsetof(PostProcessFL_EndSettingPostProcessColorByEventScript, BlendTime) == 0x000000, "Member 'PostProcessFL_EndSettingPostProcessColorByEventScript::BlendTime' has a wrong offset!");

// Function Nicola.PostProcessFL.EndSettingPostProcessGainByEventScript
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_EndSettingPostProcessGainByEventScript final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_EndSettingPostProcessGainByEventScript) == 0x000004, "Wrong alignment on PostProcessFL_EndSettingPostProcessGainByEventScript");
static_assert(sizeof(PostProcessFL_EndSettingPostProcessGainByEventScript) == 0x000004, "Wrong size on PostProcessFL_EndSettingPostProcessGainByEventScript");
static_assert(offsetof(PostProcessFL_EndSettingPostProcessGainByEventScript, BlendTime) == 0x000000, "Member 'PostProcessFL_EndSettingPostProcessGainByEventScript::BlendTime' has a wrong offset!");

// Function Nicola.PostProcessFL.EndSettingPostProcessVignetteByEventScript
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_EndSettingPostProcessVignetteByEventScript final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_EndSettingPostProcessVignetteByEventScript) == 0x000004, "Wrong alignment on PostProcessFL_EndSettingPostProcessVignetteByEventScript");
static_assert(sizeof(PostProcessFL_EndSettingPostProcessVignetteByEventScript) == 0x000004, "Wrong size on PostProcessFL_EndSettingPostProcessVignetteByEventScript");
static_assert(offsetof(PostProcessFL_EndSettingPostProcessVignetteByEventScript, BlendTime) == 0x000000, "Member 'PostProcessFL_EndSettingPostProcessVignetteByEventScript::BlendTime' has a wrong offset!");

// Function Nicola.PostProcessFL.IsCatchingPostProcessVolume
// 0x0001 (0x0001 - 0x0000)
struct PostProcessFL_IsCatchingPostProcessVolume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_IsCatchingPostProcessVolume) == 0x000001, "Wrong alignment on PostProcessFL_IsCatchingPostProcessVolume");
static_assert(sizeof(PostProcessFL_IsCatchingPostProcessVolume) == 0x000001, "Wrong size on PostProcessFL_IsCatchingPostProcessVolume");
static_assert(offsetof(PostProcessFL_IsCatchingPostProcessVolume, ReturnValue) == 0x000000, "Member 'PostProcessFL_IsCatchingPostProcessVolume::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessFL.IsPlayingPostProcessRecollection
// 0x0001 (0x0001 - 0x0000)
struct PostProcessFL_IsPlayingPostProcessRecollection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_IsPlayingPostProcessRecollection) == 0x000001, "Wrong alignment on PostProcessFL_IsPlayingPostProcessRecollection");
static_assert(sizeof(PostProcessFL_IsPlayingPostProcessRecollection) == 0x000001, "Wrong size on PostProcessFL_IsPlayingPostProcessRecollection");
static_assert(offsetof(PostProcessFL_IsPlayingPostProcessRecollection, ReturnValue) == 0x000000, "Member 'PostProcessFL_IsPlayingPostProcessRecollection::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessFL.IsPlayingPostProcessSepia
// 0x0001 (0x0001 - 0x0000)
struct PostProcessFL_IsPlayingPostProcessSepia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_IsPlayingPostProcessSepia) == 0x000001, "Wrong alignment on PostProcessFL_IsPlayingPostProcessSepia");
static_assert(sizeof(PostProcessFL_IsPlayingPostProcessSepia) == 0x000001, "Wrong size on PostProcessFL_IsPlayingPostProcessSepia");
static_assert(offsetof(PostProcessFL_IsPlayingPostProcessSepia, ReturnValue) == 0x000000, "Member 'PostProcessFL_IsPlayingPostProcessSepia::ReturnValue' has a wrong offset!");

// Function Nicola.PostProcessFL.SetPostProcessVolumeInfo
// 0x0014 (0x0014 - 0x0000)
struct PostProcessFL_SetPostProcessVolumeInfo final
{
public:
	class FName                                   MapId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapTimeFrame                                 MapTime;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   subLevelId;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_SetPostProcessVolumeInfo) == 0x000004, "Wrong alignment on PostProcessFL_SetPostProcessVolumeInfo");
static_assert(sizeof(PostProcessFL_SetPostProcessVolumeInfo) == 0x000014, "Wrong size on PostProcessFL_SetPostProcessVolumeInfo");
static_assert(offsetof(PostProcessFL_SetPostProcessVolumeInfo, MapId) == 0x000000, "Member 'PostProcessFL_SetPostProcessVolumeInfo::MapId' has a wrong offset!");
static_assert(offsetof(PostProcessFL_SetPostProcessVolumeInfo, MapTime) == 0x000008, "Member 'PostProcessFL_SetPostProcessVolumeInfo::MapTime' has a wrong offset!");
static_assert(offsetof(PostProcessFL_SetPostProcessVolumeInfo, subLevelId) == 0x00000C, "Member 'PostProcessFL_SetPostProcessVolumeInfo::subLevelId' has a wrong offset!");

// Function Nicola.PostProcessFL.StartPostProcessRecollection
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_StartPostProcessRecollection final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_StartPostProcessRecollection) == 0x000004, "Wrong alignment on PostProcessFL_StartPostProcessRecollection");
static_assert(sizeof(PostProcessFL_StartPostProcessRecollection) == 0x000004, "Wrong size on PostProcessFL_StartPostProcessRecollection");
static_assert(offsetof(PostProcessFL_StartPostProcessRecollection, Time) == 0x000000, "Member 'PostProcessFL_StartPostProcessRecollection::Time' has a wrong offset!");

// Function Nicola.PostProcessFL.StartPostProcessSepia
// 0x0004 (0x0004 - 0x0000)
struct PostProcessFL_StartPostProcessSepia final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_StartPostProcessSepia) == 0x000004, "Wrong alignment on PostProcessFL_StartPostProcessSepia");
static_assert(sizeof(PostProcessFL_StartPostProcessSepia) == 0x000004, "Wrong size on PostProcessFL_StartPostProcessSepia");
static_assert(offsetof(PostProcessFL_StartPostProcessSepia, Time) == 0x000000, "Member 'PostProcessFL_StartPostProcessSepia::Time' has a wrong offset!");

// Function Nicola.PostProcessFL.StartSettingPostProcessColorByEventScript
// 0x0010 (0x0010 - 0x0000)
struct PostProcessFL_StartSettingPostProcessColorByEventScript final
{
public:
	struct FVector                                rgbVec;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_StartSettingPostProcessColorByEventScript) == 0x000004, "Wrong alignment on PostProcessFL_StartSettingPostProcessColorByEventScript");
static_assert(sizeof(PostProcessFL_StartSettingPostProcessColorByEventScript) == 0x000010, "Wrong size on PostProcessFL_StartSettingPostProcessColorByEventScript");
static_assert(offsetof(PostProcessFL_StartSettingPostProcessColorByEventScript, rgbVec) == 0x000000, "Member 'PostProcessFL_StartSettingPostProcessColorByEventScript::rgbVec' has a wrong offset!");
static_assert(offsetof(PostProcessFL_StartSettingPostProcessColorByEventScript, BlendTime) == 0x00000C, "Member 'PostProcessFL_StartSettingPostProcessColorByEventScript::BlendTime' has a wrong offset!");

// Function Nicola.PostProcessFL.StartSettingPostProcessGainByEventScript
// 0x0008 (0x0008 - 0x0000)
struct PostProcessFL_StartSettingPostProcessGainByEventScript final
{
public:
	float                                         gainRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_StartSettingPostProcessGainByEventScript) == 0x000004, "Wrong alignment on PostProcessFL_StartSettingPostProcessGainByEventScript");
static_assert(sizeof(PostProcessFL_StartSettingPostProcessGainByEventScript) == 0x000008, "Wrong size on PostProcessFL_StartSettingPostProcessGainByEventScript");
static_assert(offsetof(PostProcessFL_StartSettingPostProcessGainByEventScript, gainRate) == 0x000000, "Member 'PostProcessFL_StartSettingPostProcessGainByEventScript::gainRate' has a wrong offset!");
static_assert(offsetof(PostProcessFL_StartSettingPostProcessGainByEventScript, BlendTime) == 0x000004, "Member 'PostProcessFL_StartSettingPostProcessGainByEventScript::BlendTime' has a wrong offset!");

// Function Nicola.PostProcessFL.StartSettingPostProcessVignetteByEventScript
// 0x0008 (0x0008 - 0x0000)
struct PostProcessFL_StartSettingPostProcessVignetteByEventScript final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessFL_StartSettingPostProcessVignetteByEventScript) == 0x000004, "Wrong alignment on PostProcessFL_StartSettingPostProcessVignetteByEventScript");
static_assert(sizeof(PostProcessFL_StartSettingPostProcessVignetteByEventScript) == 0x000008, "Wrong size on PostProcessFL_StartSettingPostProcessVignetteByEventScript");
static_assert(offsetof(PostProcessFL_StartSettingPostProcessVignetteByEventScript, Intensity) == 0x000000, "Member 'PostProcessFL_StartSettingPostProcessVignetteByEventScript::Intensity' has a wrong offset!");
static_assert(offsetof(PostProcessFL_StartSettingPostProcessVignetteByEventScript, BlendTime) == 0x000004, "Member 'PostProcessFL_StartSettingPostProcessVignetteByEventScript::BlendTime' has a wrong offset!");

// Function Nicola.NicolaSoundManager.FadeInCategoryVolumeRate
// 0x0008 (0x0008 - 0x0000)
struct NicolaSoundManager_FadeInCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_FadeInCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundManager_FadeInCategoryVolumeRate");
static_assert(sizeof(NicolaSoundManager_FadeInCategoryVolumeRate) == 0x000008, "Wrong size on NicolaSoundManager_FadeInCategoryVolumeRate");
static_assert(offsetof(NicolaSoundManager_FadeInCategoryVolumeRate, SoundCategory) == 0x000000, "Member 'NicolaSoundManager_FadeInCategoryVolumeRate::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_FadeInCategoryVolumeRate, DurationSec) == 0x000004, "Member 'NicolaSoundManager_FadeInCategoryVolumeRate::DurationSec' has a wrong offset!");

// Function Nicola.NicolaSoundManager.FadeOutCategoryVolumeRate
// 0x000C (0x000C - 0x0000)
struct NicolaSoundManager_FadeOutCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationSec;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStop;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundManager_FadeOutCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundManager_FadeOutCategoryVolumeRate");
static_assert(sizeof(NicolaSoundManager_FadeOutCategoryVolumeRate) == 0x00000C, "Wrong size on NicolaSoundManager_FadeOutCategoryVolumeRate");
static_assert(offsetof(NicolaSoundManager_FadeOutCategoryVolumeRate, SoundCategory) == 0x000000, "Member 'NicolaSoundManager_FadeOutCategoryVolumeRate::SoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_FadeOutCategoryVolumeRate, DurationSec) == 0x000004, "Member 'NicolaSoundManager_FadeOutCategoryVolumeRate::DurationSec' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_FadeOutCategoryVolumeRate, bAutoStop) == 0x000008, "Member 'NicolaSoundManager_FadeOutCategoryVolumeRate::bAutoStop' has a wrong offset!");

// Function Nicola.NicolaSoundManager.PlaySE
// 0x0038 (0x0038 - 0x0000)
struct NicolaSoundManager_PlaySE final
{
public:
	class FName                                   GopId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Owner;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ENicolaSoundCategory>                  AdditionalSoundCategory;                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ENicolaSoundPlayOptionFlags                   NicolaSoundPlayOptionFlags;                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_PlaySE) == 0x000008, "Wrong alignment on NicolaSoundManager_PlaySE");
static_assert(sizeof(NicolaSoundManager_PlaySE) == 0x000038, "Wrong size on NicolaSoundManager_PlaySE");
static_assert(offsetof(NicolaSoundManager_PlaySE, GopId) == 0x000000, "Member 'NicolaSoundManager_PlaySE::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_PlaySE, Location) == 0x000008, "Member 'NicolaSoundManager_PlaySE::Location' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_PlaySE, Owner) == 0x000018, "Member 'NicolaSoundManager_PlaySE::Owner' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_PlaySE, AdditionalSoundCategory) == 0x000020, "Member 'NicolaSoundManager_PlaySE::AdditionalSoundCategory' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_PlaySE, NicolaSoundPlayOptionFlags) == 0x000030, "Member 'NicolaSoundManager_PlaySE::NicolaSoundPlayOptionFlags' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_PlaySE, ReturnValue) == 0x000034, "Member 'NicolaSoundManager_PlaySE::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaSoundManager.SetBgmVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundManager_SetBgmVolumeRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_SetBgmVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundManager_SetBgmVolumeRate");
static_assert(sizeof(NicolaSoundManager_SetBgmVolumeRate) == 0x000004, "Wrong size on NicolaSoundManager_SetBgmVolumeRate");
static_assert(offsetof(NicolaSoundManager_SetBgmVolumeRate, Value) == 0x000000, "Member 'NicolaSoundManager_SetBgmVolumeRate::Value' has a wrong offset!");

// Function Nicola.NicolaSoundManager.SetSeVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundManager_SetSeVolumeRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_SetSeVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundManager_SetSeVolumeRate");
static_assert(sizeof(NicolaSoundManager_SetSeVolumeRate) == 0x000004, "Wrong size on NicolaSoundManager_SetSeVolumeRate");
static_assert(offsetof(NicolaSoundManager_SetSeVolumeRate, Value) == 0x000000, "Member 'NicolaSoundManager_SetSeVolumeRate::Value' has a wrong offset!");

// Function Nicola.NicolaSoundManager.SetVoiceVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct NicolaSoundManager_SetVoiceVolumeRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_SetVoiceVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundManager_SetVoiceVolumeRate");
static_assert(sizeof(NicolaSoundManager_SetVoiceVolumeRate) == 0x000004, "Wrong size on NicolaSoundManager_SetVoiceVolumeRate");
static_assert(offsetof(NicolaSoundManager_SetVoiceVolumeRate, Value) == 0x000000, "Member 'NicolaSoundManager_SetVoiceVolumeRate::Value' has a wrong offset!");

// Function Nicola.NicolaSoundManager.StopByCategory
// 0x0001 (0x0001 - 0x0000)
struct NicolaSoundManager_StopByCategory final
{
public:
	ENicolaSoundCategory                          SoundCategory;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_StopByCategory) == 0x000001, "Wrong alignment on NicolaSoundManager_StopByCategory");
static_assert(sizeof(NicolaSoundManager_StopByCategory) == 0x000001, "Wrong size on NicolaSoundManager_StopByCategory");
static_assert(offsetof(NicolaSoundManager_StopByCategory, SoundCategory) == 0x000000, "Member 'NicolaSoundManager_StopByCategory::SoundCategory' has a wrong offset!");

// Function Nicola.NicolaSoundManager.TransitionCategoryVolumeRate
// 0x000C (0x000C - 0x0000)
struct NicolaSoundManager_TransitionCategoryVolumeRate final
{
public:
	ENicolaSoundCategory                          Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSec;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaSoundManager_TransitionCategoryVolumeRate) == 0x000004, "Wrong alignment on NicolaSoundManager_TransitionCategoryVolumeRate");
static_assert(sizeof(NicolaSoundManager_TransitionCategoryVolumeRate) == 0x00000C, "Wrong size on NicolaSoundManager_TransitionCategoryVolumeRate");
static_assert(offsetof(NicolaSoundManager_TransitionCategoryVolumeRate, Category) == 0x000000, "Member 'NicolaSoundManager_TransitionCategoryVolumeRate::Category' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_TransitionCategoryVolumeRate, Rate) == 0x000004, "Member 'NicolaSoundManager_TransitionCategoryVolumeRate::Rate' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_TransitionCategoryVolumeRate, DurationSec) == 0x000008, "Member 'NicolaSoundManager_TransitionCategoryVolumeRate::DurationSec' has a wrong offset!");

// Function Nicola.NicolaSoundManager.IsLoopByGopId
// 0x0010 (0x0010 - 0x0000)
struct NicolaSoundManager_IsLoopByGopId final
{
public:
	ENicolaSoundDataTableType                     DataTableType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GopId;                                             // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NicolaSoundManager_IsLoopByGopId) == 0x000004, "Wrong alignment on NicolaSoundManager_IsLoopByGopId");
static_assert(sizeof(NicolaSoundManager_IsLoopByGopId) == 0x000010, "Wrong size on NicolaSoundManager_IsLoopByGopId");
static_assert(offsetof(NicolaSoundManager_IsLoopByGopId, DataTableType) == 0x000000, "Member 'NicolaSoundManager_IsLoopByGopId::DataTableType' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_IsLoopByGopId, GopId) == 0x000004, "Member 'NicolaSoundManager_IsLoopByGopId::GopId' has a wrong offset!");
static_assert(offsetof(NicolaSoundManager_IsLoopByGopId, ReturnValue) == 0x00000C, "Member 'NicolaSoundManager_IsLoopByGopId::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaTitleManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct NicolaTitleManager_GetInstance final
{
public:
	class ANicolaTitleManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaTitleManager_GetInstance) == 0x000008, "Wrong alignment on NicolaTitleManager_GetInstance");
static_assert(sizeof(NicolaTitleManager_GetInstance) == 0x000008, "Wrong size on NicolaTitleManager_GetInstance");
static_assert(offsetof(NicolaTitleManager_GetInstance, ReturnValue) == 0x000000, "Member 'NicolaTitleManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaUIManager.GetInstance
// 0x0010 (0x0010 - 0x0000)
struct NicolaUIManager_GetInstance final
{
public:
	const class UObject*                          InWCO;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNicolaUIManager*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaUIManager_GetInstance) == 0x000008, "Wrong alignment on NicolaUIManager_GetInstance");
static_assert(sizeof(NicolaUIManager_GetInstance) == 0x000010, "Wrong size on NicolaUIManager_GetInstance");
static_assert(offsetof(NicolaUIManager_GetInstance, InWCO) == 0x000000, "Member 'NicolaUIManager_GetInstance::InWCO' has a wrong offset!");
static_assert(offsetof(NicolaUIManager_GetInstance, ReturnValue) == 0x000008, "Member 'NicolaUIManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaVoiceFL.DebugChangeUnitVoicePattern
// 0x0008 (0x0008 - 0x0000)
struct NicolaVoiceFL_DebugChangeUnitVoicePattern final
{
public:
	int32                                         partyUnitIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         voicePatternNo;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaVoiceFL_DebugChangeUnitVoicePattern) == 0x000004, "Wrong alignment on NicolaVoiceFL_DebugChangeUnitVoicePattern");
static_assert(sizeof(NicolaVoiceFL_DebugChangeUnitVoicePattern) == 0x000008, "Wrong size on NicolaVoiceFL_DebugChangeUnitVoicePattern");
static_assert(offsetof(NicolaVoiceFL_DebugChangeUnitVoicePattern, partyUnitIndex) == 0x000000, "Member 'NicolaVoiceFL_DebugChangeUnitVoicePattern::partyUnitIndex' has a wrong offset!");
static_assert(offsetof(NicolaVoiceFL_DebugChangeUnitVoicePattern, voicePatternNo) == 0x000004, "Member 'NicolaVoiceFL_DebugChangeUnitVoicePattern::voicePatternNo' has a wrong offset!");

// Function Nicola.NicolaVoiceFL.DebugGetUnitVoicePattern
// 0x0008 (0x0008 - 0x0000)
struct NicolaVoiceFL_DebugGetUnitVoicePattern final
{
public:
	int32                                         partyUnitIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaVoiceFL_DebugGetUnitVoicePattern) == 0x000004, "Wrong alignment on NicolaVoiceFL_DebugGetUnitVoicePattern");
static_assert(sizeof(NicolaVoiceFL_DebugGetUnitVoicePattern) == 0x000008, "Wrong size on NicolaVoiceFL_DebugGetUnitVoicePattern");
static_assert(offsetof(NicolaVoiceFL_DebugGetUnitVoicePattern, partyUnitIndex) == 0x000000, "Member 'NicolaVoiceFL_DebugGetUnitVoicePattern::partyUnitIndex' has a wrong offset!");
static_assert(offsetof(NicolaVoiceFL_DebugGetUnitVoicePattern, ReturnValue) == 0x000004, "Member 'NicolaVoiceFL_DebugGetUnitVoicePattern::ReturnValue' has a wrong offset!");

// Function Nicola.NicolaVoiceFL.PlayVoiceBattle2D
// 0x0010 (0x0010 - 0x0000)
struct NicolaVoiceFL_PlayVoiceBattle2D final
{
public:
	class FName                                   GopVoiceBattleId;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnitVoicePattern                             VoicePattern;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FADSoundPlaybackId                     ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NicolaVoiceFL_PlayVoiceBattle2D) == 0x000004, "Wrong alignment on NicolaVoiceFL_PlayVoiceBattle2D");
static_assert(sizeof(NicolaVoiceFL_PlayVoiceBattle2D) == 0x000010, "Wrong size on NicolaVoiceFL_PlayVoiceBattle2D");
static_assert(offsetof(NicolaVoiceFL_PlayVoiceBattle2D, GopVoiceBattleId) == 0x000000, "Member 'NicolaVoiceFL_PlayVoiceBattle2D::GopVoiceBattleId' has a wrong offset!");
static_assert(offsetof(NicolaVoiceFL_PlayVoiceBattle2D, VoicePattern) == 0x000008, "Member 'NicolaVoiceFL_PlayVoiceBattle2D::VoicePattern' has a wrong offset!");
static_assert(offsetof(NicolaVoiceFL_PlayVoiceBattle2D, ReturnValue) == 0x00000C, "Member 'NicolaVoiceFL_PlayVoiceBattle2D::ReturnValue' has a wrong offset!");

// Function Nicola.NotifyChangeVisibleInterface.NotifyChangeVisibleActor
// 0x0001 (0x0001 - 0x0000)
struct NotifyChangeVisibleInterface_NotifyChangeVisibleActor final
{
public:
	bool                                          NewIsVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotifyChangeVisibleInterface_NotifyChangeVisibleActor) == 0x000001, "Wrong alignment on NotifyChangeVisibleInterface_NotifyChangeVisibleActor");
static_assert(sizeof(NotifyChangeVisibleInterface_NotifyChangeVisibleActor) == 0x000001, "Wrong size on NotifyChangeVisibleInterface_NotifyChangeVisibleActor");
static_assert(offsetof(NotifyChangeVisibleInterface_NotifyChangeVisibleActor, NewIsVisible) == 0x000000, "Member 'NotifyChangeVisibleInterface_NotifyChangeVisibleActor::NewIsVisible' has a wrong offset!");

// Function Nicola.NpcTestAIController.InitNpcController
// 0x0018 (0x0018 - 0x0000)
struct NpcTestAIController_InitNpcController final
{
public:
	const class UBoxComponent*                    PatrolVolumeComp;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           NpcActor;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcWaitTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcTestAIController_InitNpcController) == 0x000008, "Wrong alignment on NpcTestAIController_InitNpcController");
static_assert(sizeof(NpcTestAIController_InitNpcController) == 0x000018, "Wrong size on NpcTestAIController_InitNpcController");
static_assert(offsetof(NpcTestAIController_InitNpcController, PatrolVolumeComp) == 0x000000, "Member 'NpcTestAIController_InitNpcController::PatrolVolumeComp' has a wrong offset!");
static_assert(offsetof(NpcTestAIController_InitNpcController, NpcActor) == 0x000008, "Member 'NpcTestAIController_InitNpcController::NpcActor' has a wrong offset!");
static_assert(offsetof(NpcTestAIController_InitNpcController, NpcWaitTime) == 0x000010, "Member 'NpcTestAIController_InitNpcController::NpcWaitTime' has a wrong offset!");

// Function Nicola.PlayerFollowNpcAIController.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct PlayerFollowNpcAIController_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerFollowNpcAIController_OnComponentHit) == 0x000008, "Wrong alignment on PlayerFollowNpcAIController_OnComponentHit");
static_assert(sizeof(PlayerFollowNpcAIController_OnComponentHit) == 0x0000B0, "Wrong size on PlayerFollowNpcAIController_OnComponentHit");
static_assert(offsetof(PlayerFollowNpcAIController_OnComponentHit, HitComponent) == 0x000000, "Member 'PlayerFollowNpcAIController_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(PlayerFollowNpcAIController_OnComponentHit, OtherActor) == 0x000008, "Member 'PlayerFollowNpcAIController_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(PlayerFollowNpcAIController_OnComponentHit, OtherComp) == 0x000010, "Member 'PlayerFollowNpcAIController_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerFollowNpcAIController_OnComponentHit, NormalImpulse) == 0x000018, "Member 'PlayerFollowNpcAIController_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PlayerFollowNpcAIController_OnComponentHit, Hit) == 0x000024, "Member 'PlayerFollowNpcAIController_OnComponentHit::Hit' has a wrong offset!");

// Function Nicola.PlayerFollowNpcAIController.ScriptMove
// 0x0010 (0x0010 - 0x0000)
struct PlayerFollowNpcAIController_ScriptMove final
{
public:
	struct FVector                                targetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerFollowNpcAIController_ScriptMove) == 0x000004, "Wrong alignment on PlayerFollowNpcAIController_ScriptMove");
static_assert(sizeof(PlayerFollowNpcAIController_ScriptMove) == 0x000010, "Wrong size on PlayerFollowNpcAIController_ScriptMove");
static_assert(offsetof(PlayerFollowNpcAIController_ScriptMove, targetLocation) == 0x000000, "Member 'PlayerFollowNpcAIController_ScriptMove::targetLocation' has a wrong offset!");
static_assert(offsetof(PlayerFollowNpcAIController_ScriptMove, Speed) == 0x00000C, "Member 'PlayerFollowNpcAIController_ScriptMove::Speed' has a wrong offset!");

// Function Nicola.PlayerFollowNpcAIController.IsMoveState
// 0x0001 (0x0001 - 0x0000)
struct PlayerFollowNpcAIController_IsMoveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerFollowNpcAIController_IsMoveState) == 0x000001, "Wrong alignment on PlayerFollowNpcAIController_IsMoveState");
static_assert(sizeof(PlayerFollowNpcAIController_IsMoveState) == 0x000001, "Wrong size on PlayerFollowNpcAIController_IsMoveState");
static_assert(offsetof(PlayerFollowNpcAIController_IsMoveState, ReturnValue) == 0x000000, "Member 'PlayerFollowNpcAIController_IsMoveState::ReturnValue' has a wrong offset!");

// Function Nicola.PlayerLamia.GetHeightRate
// 0x0004 (0x0004 - 0x0000)
struct PlayerLamia_GetHeightRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLamia_GetHeightRate) == 0x000004, "Wrong alignment on PlayerLamia_GetHeightRate");
static_assert(sizeof(PlayerLamia_GetHeightRate) == 0x000004, "Wrong size on PlayerLamia_GetHeightRate");
static_assert(offsetof(PlayerLamia_GetHeightRate, ReturnValue) == 0x000000, "Member 'PlayerLamia_GetHeightRate::ReturnValue' has a wrong offset!");

// Function Nicola.PlayerShip.GetTopSpeed
// 0x0004 (0x0004 - 0x0000)
struct PlayerShip_GetTopSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerShip_GetTopSpeed) == 0x000004, "Wrong alignment on PlayerShip_GetTopSpeed");
static_assert(sizeof(PlayerShip_GetTopSpeed) == 0x000004, "Wrong size on PlayerShip_GetTopSpeed");
static_assert(offsetof(PlayerShip_GetTopSpeed, ReturnValue) == 0x000000, "Member 'PlayerShip_GetTopSpeed::ReturnValue' has a wrong offset!");

// Function Nicola.PlayerShip.GetTopSpeedDash
// 0x0004 (0x0004 - 0x0000)
struct PlayerShip_GetTopSpeedDash final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerShip_GetTopSpeedDash) == 0x000004, "Wrong alignment on PlayerShip_GetTopSpeedDash");
static_assert(sizeof(PlayerShip_GetTopSpeedDash) == 0x000004, "Wrong size on PlayerShip_GetTopSpeedDash");
static_assert(offsetof(PlayerShip_GetTopSpeedDash, ReturnValue) == 0x000000, "Member 'PlayerShip_GetTopSpeedDash::ReturnValue' has a wrong offset!");

// Function Nicola.ProduceSequencerBGM.PlayBattleBGM
// 0x000C (0x000C - 0x0000)
struct ProduceSequencerBGM_PlayBattleBGM final
{
public:
	class FName                                   GopBattleBgmId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSec;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerBGM_PlayBattleBGM) == 0x000004, "Wrong alignment on ProduceSequencerBGM_PlayBattleBGM");
static_assert(sizeof(ProduceSequencerBGM_PlayBattleBGM) == 0x00000C, "Wrong size on ProduceSequencerBGM_PlayBattleBGM");
static_assert(offsetof(ProduceSequencerBGM_PlayBattleBGM, GopBattleBgmId) == 0x000000, "Member 'ProduceSequencerBGM_PlayBattleBGM::GopBattleBgmId' has a wrong offset!");
static_assert(offsetof(ProduceSequencerBGM_PlayBattleBGM, FadeSec) == 0x000008, "Member 'ProduceSequencerBGM_PlayBattleBGM::FadeSec' has a wrong offset!");

// Function Nicola.ProduceSequencerBGM.PlayBGM
// 0x000C (0x000C - 0x0000)
struct ProduceSequencerBGM_PlayBGM final
{
public:
	class FName                                   GopBgmId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeSec;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerBGM_PlayBGM) == 0x000004, "Wrong alignment on ProduceSequencerBGM_PlayBGM");
static_assert(sizeof(ProduceSequencerBGM_PlayBGM) == 0x00000C, "Wrong size on ProduceSequencerBGM_PlayBGM");
static_assert(offsetof(ProduceSequencerBGM_PlayBGM, GopBgmId) == 0x000000, "Member 'ProduceSequencerBGM_PlayBGM::GopBgmId' has a wrong offset!");
static_assert(offsetof(ProduceSequencerBGM_PlayBGM, FadeSec) == 0x000008, "Member 'ProduceSequencerBGM_PlayBGM::FadeSec' has a wrong offset!");

// Function Nicola.ProduceSequencerBGM.StopBGM
// 0x0004 (0x0004 - 0x0000)
struct ProduceSequencerBGM_StopBGM final
{
public:
	float                                         fadeOutSec;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerBGM_StopBGM) == 0x000004, "Wrong alignment on ProduceSequencerBGM_StopBGM");
static_assert(sizeof(ProduceSequencerBGM_StopBGM) == 0x000004, "Wrong size on ProduceSequencerBGM_StopBGM");
static_assert(offsetof(ProduceSequencerBGM_StopBGM, fadeOutSec) == 0x000000, "Member 'ProduceSequencerBGM_StopBGM::fadeOutSec' has a wrong offset!");

// Function Nicola.ProduceSequencerSe.PlaySE
// 0x0010 (0x0010 - 0x0000)
struct ProduceSequencerSe_PlaySE final
{
public:
	class FString                                 GopSeID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProduceSequencerSe_PlaySE) == 0x000008, "Wrong alignment on ProduceSequencerSe_PlaySE");
static_assert(sizeof(ProduceSequencerSe_PlaySE) == 0x000010, "Wrong size on ProduceSequencerSe_PlaySE");
static_assert(offsetof(ProduceSequencerSe_PlaySE, GopSeID) == 0x000000, "Member 'ProduceSequencerSe_PlaySE::GopSeID' has a wrong offset!");

// Function Nicola.PS5ActivityManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct PS5ActivityManager_GetInstance final
{
public:
	class UPS5ActivityManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5ActivityManager_GetInstance) == 0x000008, "Wrong alignment on PS5ActivityManager_GetInstance");
static_assert(sizeof(PS5ActivityManager_GetInstance) == 0x000008, "Wrong size on PS5ActivityManager_GetInstance");
static_assert(offsetof(PS5ActivityManager_GetInstance, ReturnValue) == 0x000000, "Member 'PS5ActivityManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.PS5ActivityManager.ChangeActivityAvailability
// 0x0018 (0x0018 - 0x0000)
struct PS5ActivityManager_ChangeActivityAvailability final
{
public:
	class FString                                 ActivityId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PS5ActivityManager_ChangeActivityAvailability) == 0x000008, "Wrong alignment on PS5ActivityManager_ChangeActivityAvailability");
static_assert(sizeof(PS5ActivityManager_ChangeActivityAvailability) == 0x000018, "Wrong size on PS5ActivityManager_ChangeActivityAvailability");
static_assert(offsetof(PS5ActivityManager_ChangeActivityAvailability, ActivityId) == 0x000000, "Member 'PS5ActivityManager_ChangeActivityAvailability::ActivityId' has a wrong offset!");
static_assert(offsetof(PS5ActivityManager_ChangeActivityAvailability, IsAvailable) == 0x000010, "Member 'PS5ActivityManager_ChangeActivityAvailability::IsAvailable' has a wrong offset!");

// Function Nicola.PS5ActivityManager.DebugGetAllActivityIds
// 0x0010 (0x0010 - 0x0000)
struct PS5ActivityManager_DebugGetAllActivityIds final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5ActivityManager_DebugGetAllActivityIds) == 0x000008, "Wrong alignment on PS5ActivityManager_DebugGetAllActivityIds");
static_assert(sizeof(PS5ActivityManager_DebugGetAllActivityIds) == 0x000010, "Wrong size on PS5ActivityManager_DebugGetAllActivityIds");
static_assert(offsetof(PS5ActivityManager_DebugGetAllActivityIds, ReturnValue) == 0x000000, "Member 'PS5ActivityManager_DebugGetAllActivityIds::ReturnValue' has a wrong offset!");

// Function Nicola.PS5ActivityManager.EndActivity
// 0x0018 (0x0018 - 0x0000)
struct PS5ActivityManager_EndActivity final
{
public:
	class FString                                 ActivityId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPS5ActivityOutcome                           ActivityOutcome;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PS5ActivityManager_EndActivity) == 0x000008, "Wrong alignment on PS5ActivityManager_EndActivity");
static_assert(sizeof(PS5ActivityManager_EndActivity) == 0x000018, "Wrong size on PS5ActivityManager_EndActivity");
static_assert(offsetof(PS5ActivityManager_EndActivity, ActivityId) == 0x000000, "Member 'PS5ActivityManager_EndActivity::ActivityId' has a wrong offset!");
static_assert(offsetof(PS5ActivityManager_EndActivity, ActivityOutcome) == 0x000010, "Member 'PS5ActivityManager_EndActivity::ActivityOutcome' has a wrong offset!");

// Function Nicola.PS5ActivityManager.StartActivity
// 0x0010 (0x0010 - 0x0000)
struct PS5ActivityManager_StartActivity final
{
public:
	class FString                                 ActivityId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5ActivityManager_StartActivity) == 0x000008, "Wrong alignment on PS5ActivityManager_StartActivity");
static_assert(sizeof(PS5ActivityManager_StartActivity) == 0x000010, "Wrong size on PS5ActivityManager_StartActivity");
static_assert(offsetof(PS5ActivityManager_StartActivity, ActivityId) == 0x000000, "Member 'PS5ActivityManager_StartActivity::ActivityId' has a wrong offset!");

// Function Nicola.RecollectionDataFL.ImprintRecollection
// 0x0001 (0x0001 - 0x0000)
struct RecollectionDataFL_ImprintRecollection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecollectionDataFL_ImprintRecollection) == 0x000001, "Wrong alignment on RecollectionDataFL_ImprintRecollection");
static_assert(sizeof(RecollectionDataFL_ImprintRecollection) == 0x000001, "Wrong size on RecollectionDataFL_ImprintRecollection");
static_assert(offsetof(RecollectionDataFL_ImprintRecollection, ReturnValue) == 0x000000, "Member 'RecollectionDataFL_ImprintRecollection::ReturnValue' has a wrong offset!");

// Function Nicola.RockPuzzleGoalFloor.OnRockCheckCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin) == 0x000008, "Wrong alignment on RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin");
static_assert(sizeof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin) == 0x0000A8, "Wrong size on RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin, OverlappedComp) == 0x000000, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function Nicola.RockPuzzleGoalFloor.OnRockCheckCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd) == 0x000008, "Wrong alignment on RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd");
static_assert(sizeof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd) == 0x000020, "Wrong size on RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd, OverlappedComp) == 0x000000, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'RockPuzzleGoalFloor_OnRockCheckCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Nicola.SequenceBattleCameraManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct SequenceBattleCameraManager_GetInstance final
{
public:
	class ASequenceBattleCameraManager*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceBattleCameraManager_GetInstance) == 0x000008, "Wrong alignment on SequenceBattleCameraManager_GetInstance");
static_assert(sizeof(SequenceBattleCameraManager_GetInstance) == 0x000008, "Wrong size on SequenceBattleCameraManager_GetInstance");
static_assert(offsetof(SequenceBattleCameraManager_GetInstance, ReturnValue) == 0x000000, "Member 'SequenceBattleCameraManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.SequenceBattleCameraManager.PlaySequence
// 0x0008 (0x0008 - 0x0000)
struct SequenceBattleCameraManager_PlaySequence final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpToEnd;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequenceBattleCameraManager_PlaySequence) == 0x000004, "Wrong alignment on SequenceBattleCameraManager_PlaySequence");
static_assert(sizeof(SequenceBattleCameraManager_PlaySequence) == 0x000008, "Wrong size on SequenceBattleCameraManager_PlaySequence");
static_assert(offsetof(SequenceBattleCameraManager_PlaySequence, Index_0) == 0x000000, "Member 'SequenceBattleCameraManager_PlaySequence::Index_0' has a wrong offset!");
static_assert(offsetof(SequenceBattleCameraManager_PlaySequence, bJumpToEnd) == 0x000004, "Member 'SequenceBattleCameraManager_PlaySequence::bJumpToEnd' has a wrong offset!");

// Function Nicola.SequenceBattleCameraManager.PlaySequenceBackToFront
// 0x0001 (0x0001 - 0x0000)
struct SequenceBattleCameraManager_PlaySequenceBackToFront final
{
public:
	bool                                          bJumpToEnd;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceBattleCameraManager_PlaySequenceBackToFront) == 0x000001, "Wrong alignment on SequenceBattleCameraManager_PlaySequenceBackToFront");
static_assert(sizeof(SequenceBattleCameraManager_PlaySequenceBackToFront) == 0x000001, "Wrong size on SequenceBattleCameraManager_PlaySequenceBackToFront");
static_assert(offsetof(SequenceBattleCameraManager_PlaySequenceBackToFront, bJumpToEnd) == 0x000000, "Member 'SequenceBattleCameraManager_PlaySequenceBackToFront::bJumpToEnd' has a wrong offset!");

// Function Nicola.SequenceBattleCameraManager.PlaySequenceFrontToBack
// 0x0001 (0x0001 - 0x0000)
struct SequenceBattleCameraManager_PlaySequenceFrontToBack final
{
public:
	bool                                          bJumpToEnd;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceBattleCameraManager_PlaySequenceFrontToBack) == 0x000001, "Wrong alignment on SequenceBattleCameraManager_PlaySequenceFrontToBack");
static_assert(sizeof(SequenceBattleCameraManager_PlaySequenceFrontToBack) == 0x000001, "Wrong size on SequenceBattleCameraManager_PlaySequenceFrontToBack");
static_assert(offsetof(SequenceBattleCameraManager_PlaySequenceFrontToBack, bJumpToEnd) == 0x000000, "Member 'SequenceBattleCameraManager_PlaySequenceFrontToBack::bJumpToEnd' has a wrong offset!");

// Function Nicola.Ship.GetShipSpeedTypeEnum
// 0x0001 (0x0001 - 0x0000)
struct Ship_GetShipSpeedTypeEnum final
{
public:
	EShipSpeedType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ship_GetShipSpeedTypeEnum) == 0x000001, "Wrong alignment on Ship_GetShipSpeedTypeEnum");
static_assert(sizeof(Ship_GetShipSpeedTypeEnum) == 0x000001, "Wrong size on Ship_GetShipSpeedTypeEnum");
static_assert(offsetof(Ship_GetShipSpeedTypeEnum, ReturnValue) == 0x000000, "Member 'Ship_GetShipSpeedTypeEnum::ReturnValue' has a wrong offset!");

// Function Nicola.Ship.GetShipSpeedTypeInt
// 0x0004 (0x0004 - 0x0000)
struct Ship_GetShipSpeedTypeInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ship_GetShipSpeedTypeInt) == 0x000004, "Wrong alignment on Ship_GetShipSpeedTypeInt");
static_assert(sizeof(Ship_GetShipSpeedTypeInt) == 0x000004, "Wrong size on Ship_GetShipSpeedTypeInt");
static_assert(offsetof(Ship_GetShipSpeedTypeInt, ReturnValue) == 0x000000, "Member 'Ship_GetShipSpeedTypeInt::ReturnValue' has a wrong offset!");

// Function Nicola.Ship.IsSpeedTypeFast
// 0x0001 (0x0001 - 0x0000)
struct Ship_IsSpeedTypeFast final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ship_IsSpeedTypeFast) == 0x000001, "Wrong alignment on Ship_IsSpeedTypeFast");
static_assert(sizeof(Ship_IsSpeedTypeFast) == 0x000001, "Wrong size on Ship_IsSpeedTypeFast");
static_assert(offsetof(Ship_IsSpeedTypeFast, ReturnValue) == 0x000000, "Member 'Ship_IsSpeedTypeFast::ReturnValue' has a wrong offset!");

// Function Nicola.Ship.IsSpeedTypeSlow
// 0x0001 (0x0001 - 0x0000)
struct Ship_IsSpeedTypeSlow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ship_IsSpeedTypeSlow) == 0x000001, "Wrong alignment on Ship_IsSpeedTypeSlow");
static_assert(sizeof(Ship_IsSpeedTypeSlow) == 0x000001, "Wrong size on Ship_IsSpeedTypeSlow");
static_assert(offsetof(Ship_IsSpeedTypeSlow, ReturnValue) == 0x000000, "Member 'Ship_IsSpeedTypeSlow::ReturnValue' has a wrong offset!");

// Function Nicola.Ship.IsSpeedTypeStop
// 0x0001 (0x0001 - 0x0000)
struct Ship_IsSpeedTypeStop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ship_IsSpeedTypeStop) == 0x000001, "Wrong alignment on Ship_IsSpeedTypeStop");
static_assert(sizeof(Ship_IsSpeedTypeStop) == 0x000001, "Wrong size on Ship_IsSpeedTypeStop");
static_assert(offsetof(Ship_IsSpeedTypeStop, ReturnValue) == 0x000000, "Member 'Ship_IsSpeedTypeStop::ReturnValue' has a wrong offset!");

// Function Nicola.TestLamia.EnableGravity
// 0x0001 (0x0001 - 0x0000)
struct TestLamia_EnableGravity final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_EnableGravity) == 0x000001, "Wrong alignment on TestLamia_EnableGravity");
static_assert(sizeof(TestLamia_EnableGravity) == 0x000001, "Wrong size on TestLamia_EnableGravity");
static_assert(offsetof(TestLamia_EnableGravity, Enable) == 0x000000, "Member 'TestLamia_EnableGravity::Enable' has a wrong offset!");

// Function Nicola.TestLamia.GetDashPerSec
// 0x0004 (0x0004 - 0x0000)
struct TestLamia_GetDashPerSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_GetDashPerSec) == 0x000004, "Wrong alignment on TestLamia_GetDashPerSec");
static_assert(sizeof(TestLamia_GetDashPerSec) == 0x000004, "Wrong size on TestLamia_GetDashPerSec");
static_assert(offsetof(TestLamia_GetDashPerSec, ReturnValue) == 0x000000, "Member 'TestLamia_GetDashPerSec::ReturnValue' has a wrong offset!");

// Function Nicola.TestLamia.GetMovePerSec
// 0x0004 (0x0004 - 0x0000)
struct TestLamia_GetMovePerSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_GetMovePerSec) == 0x000004, "Wrong alignment on TestLamia_GetMovePerSec");
static_assert(sizeof(TestLamia_GetMovePerSec) == 0x000004, "Wrong size on TestLamia_GetMovePerSec");
static_assert(offsetof(TestLamia_GetMovePerSec, ReturnValue) == 0x000000, "Member 'TestLamia_GetMovePerSec::ReturnValue' has a wrong offset!");

// Function Nicola.TestLamia.GetMovePerStep
// 0x0004 (0x0004 - 0x0000)
struct TestLamia_GetMovePerStep final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_GetMovePerStep) == 0x000004, "Wrong alignment on TestLamia_GetMovePerStep");
static_assert(sizeof(TestLamia_GetMovePerStep) == 0x000004, "Wrong size on TestLamia_GetMovePerStep");
static_assert(offsetof(TestLamia_GetMovePerStep, ReturnValue) == 0x000000, "Member 'TestLamia_GetMovePerStep::ReturnValue' has a wrong offset!");

// Function Nicola.TestLamia.GetSpriteScale
// 0x0004 (0x0004 - 0x0000)
struct TestLamia_GetSpriteScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_GetSpriteScale) == 0x000004, "Wrong alignment on TestLamia_GetSpriteScale");
static_assert(sizeof(TestLamia_GetSpriteScale) == 0x000004, "Wrong size on TestLamia_GetSpriteScale");
static_assert(offsetof(TestLamia_GetSpriteScale, ReturnValue) == 0x000000, "Member 'TestLamia_GetSpriteScale::ReturnValue' has a wrong offset!");

// Function Nicola.TestLamia.GetTraceLandscapeFlag
// 0x0001 (0x0001 - 0x0000)
struct TestLamia_GetTraceLandscapeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_GetTraceLandscapeFlag) == 0x000001, "Wrong alignment on TestLamia_GetTraceLandscapeFlag");
static_assert(sizeof(TestLamia_GetTraceLandscapeFlag) == 0x000001, "Wrong size on TestLamia_GetTraceLandscapeFlag");
static_assert(offsetof(TestLamia_GetTraceLandscapeFlag, ReturnValue) == 0x000000, "Member 'TestLamia_GetTraceLandscapeFlag::ReturnValue' has a wrong offset!");

// Function Nicola.TestLamia.onChangedMovementMode
// 0x0010 (0x0010 - 0x0000)
struct TestLamia_onChangedMovementMode final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 prevMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevCustomMode;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TestLamia_onChangedMovementMode) == 0x000008, "Wrong alignment on TestLamia_onChangedMovementMode");
static_assert(sizeof(TestLamia_onChangedMovementMode) == 0x000010, "Wrong size on TestLamia_onChangedMovementMode");
static_assert(offsetof(TestLamia_onChangedMovementMode, Character) == 0x000000, "Member 'TestLamia_onChangedMovementMode::Character' has a wrong offset!");
static_assert(offsetof(TestLamia_onChangedMovementMode, prevMode) == 0x000008, "Member 'TestLamia_onChangedMovementMode::prevMode' has a wrong offset!");
static_assert(offsetof(TestLamia_onChangedMovementMode, PrevCustomMode) == 0x000009, "Member 'TestLamia_onChangedMovementMode::PrevCustomMode' has a wrong offset!");

// Function Nicola.TestLamia.onUpdateMovement
// 0x001C (0x001C - 0x0000)
struct TestLamia_onUpdateMovement final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_onUpdateMovement) == 0x000004, "Wrong alignment on TestLamia_onUpdateMovement");
static_assert(sizeof(TestLamia_onUpdateMovement) == 0x00001C, "Wrong size on TestLamia_onUpdateMovement");
static_assert(offsetof(TestLamia_onUpdateMovement, Delta) == 0x000000, "Member 'TestLamia_onUpdateMovement::Delta' has a wrong offset!");
static_assert(offsetof(TestLamia_onUpdateMovement, OldLocation) == 0x000004, "Member 'TestLamia_onUpdateMovement::OldLocation' has a wrong offset!");
static_assert(offsetof(TestLamia_onUpdateMovement, OldVelocity) == 0x000010, "Member 'TestLamia_onUpdateMovement::OldVelocity' has a wrong offset!");

// Function Nicola.TestLamia.SetDashPerSec
// 0x0004 (0x0004 - 0x0000)
struct TestLamia_SetDashPerSec final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_SetDashPerSec) == 0x000004, "Wrong alignment on TestLamia_SetDashPerSec");
static_assert(sizeof(TestLamia_SetDashPerSec) == 0x000004, "Wrong size on TestLamia_SetDashPerSec");
static_assert(offsetof(TestLamia_SetDashPerSec, Value) == 0x000000, "Member 'TestLamia_SetDashPerSec::Value' has a wrong offset!");

// Function Nicola.TestLamia.SetMovePerSec
// 0x0004 (0x0004 - 0x0000)
struct TestLamia_SetMovePerSec final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_SetMovePerSec) == 0x000004, "Wrong alignment on TestLamia_SetMovePerSec");
static_assert(sizeof(TestLamia_SetMovePerSec) == 0x000004, "Wrong size on TestLamia_SetMovePerSec");
static_assert(offsetof(TestLamia_SetMovePerSec, Value) == 0x000000, "Member 'TestLamia_SetMovePerSec::Value' has a wrong offset!");

// Function Nicola.TestLamia.SetPosAndAlignment
// 0x0010 (0x0010 - 0x0000)
struct TestLamia_SetPosAndAlignment final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionOnMap                               dirAlignment;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionOnMap                               dirLeader;                                         // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TestLamia_SetPosAndAlignment) == 0x000004, "Wrong alignment on TestLamia_SetPosAndAlignment");
static_assert(sizeof(TestLamia_SetPosAndAlignment) == 0x000010, "Wrong size on TestLamia_SetPosAndAlignment");
static_assert(offsetof(TestLamia_SetPosAndAlignment, Pos) == 0x000000, "Member 'TestLamia_SetPosAndAlignment::Pos' has a wrong offset!");
static_assert(offsetof(TestLamia_SetPosAndAlignment, dirAlignment) == 0x00000C, "Member 'TestLamia_SetPosAndAlignment::dirAlignment' has a wrong offset!");
static_assert(offsetof(TestLamia_SetPosAndAlignment, dirLeader) == 0x00000D, "Member 'TestLamia_SetPosAndAlignment::dirLeader' has a wrong offset!");

// Function Nicola.TestLamia.SetTraceLandscapeFlag
// 0x0001 (0x0001 - 0x0000)
struct TestLamia_SetTraceLandscapeFlag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_SetTraceLandscapeFlag) == 0x000001, "Wrong alignment on TestLamia_SetTraceLandscapeFlag");
static_assert(sizeof(TestLamia_SetTraceLandscapeFlag) == 0x000001, "Wrong size on TestLamia_SetTraceLandscapeFlag");
static_assert(offsetof(TestLamia_SetTraceLandscapeFlag, Value) == 0x000000, "Member 'TestLamia_SetTraceLandscapeFlag::Value' has a wrong offset!");

// Function Nicola.TestLamia.Together
// 0x000C (0x000C - 0x0000)
struct TestLamia_Together final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestLamia_Together) == 0x000004, "Wrong alignment on TestLamia_Together");
static_assert(sizeof(TestLamia_Together) == 0x00000C, "Wrong size on TestLamia_Together");
static_assert(offsetof(TestLamia_Together, Pos) == 0x000000, "Member 'TestLamia_Together::Pos' has a wrong offset!");

// Function Nicola.TestShip.GetDashPerSec
// 0x0004 (0x0004 - 0x0000)
struct TestShip_GetDashPerSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_GetDashPerSec) == 0x000004, "Wrong alignment on TestShip_GetDashPerSec");
static_assert(sizeof(TestShip_GetDashPerSec) == 0x000004, "Wrong size on TestShip_GetDashPerSec");
static_assert(offsetof(TestShip_GetDashPerSec, ReturnValue) == 0x000000, "Member 'TestShip_GetDashPerSec::ReturnValue' has a wrong offset!");

// Function Nicola.TestShip.GetMovePerSec
// 0x0004 (0x0004 - 0x0000)
struct TestShip_GetMovePerSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_GetMovePerSec) == 0x000004, "Wrong alignment on TestShip_GetMovePerSec");
static_assert(sizeof(TestShip_GetMovePerSec) == 0x000004, "Wrong size on TestShip_GetMovePerSec");
static_assert(offsetof(TestShip_GetMovePerSec, ReturnValue) == 0x000000, "Member 'TestShip_GetMovePerSec::ReturnValue' has a wrong offset!");

// Function Nicola.TestShip.IsEnableWalkingByPhysicalMaterial
// 0x0001 (0x0001 - 0x0000)
struct TestShip_IsEnableWalkingByPhysicalMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_IsEnableWalkingByPhysicalMaterial) == 0x000001, "Wrong alignment on TestShip_IsEnableWalkingByPhysicalMaterial");
static_assert(sizeof(TestShip_IsEnableWalkingByPhysicalMaterial) == 0x000001, "Wrong size on TestShip_IsEnableWalkingByPhysicalMaterial");
static_assert(offsetof(TestShip_IsEnableWalkingByPhysicalMaterial, ReturnValue) == 0x000000, "Member 'TestShip_IsEnableWalkingByPhysicalMaterial::ReturnValue' has a wrong offset!");

// Function Nicola.TestShip.SetDashPerSec
// 0x0004 (0x0004 - 0x0000)
struct TestShip_SetDashPerSec final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_SetDashPerSec) == 0x000004, "Wrong alignment on TestShip_SetDashPerSec");
static_assert(sizeof(TestShip_SetDashPerSec) == 0x000004, "Wrong size on TestShip_SetDashPerSec");
static_assert(offsetof(TestShip_SetDashPerSec, Value) == 0x000000, "Member 'TestShip_SetDashPerSec::Value' has a wrong offset!");

// Function Nicola.TestShip.SetEnableWalkingByPhysicalMaterial
// 0x0001 (0x0001 - 0x0000)
struct TestShip_SetEnableWalkingByPhysicalMaterial final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_SetEnableWalkingByPhysicalMaterial) == 0x000001, "Wrong alignment on TestShip_SetEnableWalkingByPhysicalMaterial");
static_assert(sizeof(TestShip_SetEnableWalkingByPhysicalMaterial) == 0x000001, "Wrong size on TestShip_SetEnableWalkingByPhysicalMaterial");
static_assert(offsetof(TestShip_SetEnableWalkingByPhysicalMaterial, Value) == 0x000000, "Member 'TestShip_SetEnableWalkingByPhysicalMaterial::Value' has a wrong offset!");

// Function Nicola.TestShip.SetMovePerSec
// 0x0004 (0x0004 - 0x0000)
struct TestShip_SetMovePerSec final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_SetMovePerSec) == 0x000004, "Wrong alignment on TestShip_SetMovePerSec");
static_assert(sizeof(TestShip_SetMovePerSec) == 0x000004, "Wrong size on TestShip_SetMovePerSec");
static_assert(offsetof(TestShip_SetMovePerSec, Value) == 0x000000, "Member 'TestShip_SetMovePerSec::Value' has a wrong offset!");

// Function Nicola.TestShip.GetMeshDir
// 0x000C (0x000C - 0x0000)
struct TestShip_GetMeshDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestShip_GetMeshDir) == 0x000004, "Wrong alignment on TestShip_GetMeshDir");
static_assert(sizeof(TestShip_GetMeshDir) == 0x00000C, "Wrong size on TestShip_GetMeshDir");
static_assert(offsetof(TestShip_GetMeshDir, ReturnValue) == 0x000000, "Member 'TestShip_GetMeshDir::ReturnValue' has a wrong offset!");

// Function Nicola.TriggerVolumeActorByOneFrame.SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume
// 0x0020 (0x0020 - 0x0000)
struct TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATriggerVolumeActor*                    SourceVolume;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATriggerVolumeActorByOneFrame> OneFrameVolumeClass;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATriggerVolumeActorByOneFrame*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume) == 0x000008, "Wrong alignment on TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume");
static_assert(sizeof(TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume) == 0x000020, "Wrong size on TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume");
static_assert(offsetof(TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume, WorldContext) == 0x000000, "Member 'TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume::WorldContext' has a wrong offset!");
static_assert(offsetof(TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume, SourceVolume) == 0x000008, "Member 'TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume::SourceVolume' has a wrong offset!");
static_assert(offsetof(TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume, OneFrameVolumeClass) == 0x000010, "Member 'TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume::OneFrameVolumeClass' has a wrong offset!");
static_assert(offsetof(TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume, ReturnValue) == 0x000018, "Member 'TriggerVolumeActorByOneFrame_SpawnOneFrameVolumeActorAndApplyParameterFromTriggerVolume::ReturnValue' has a wrong offset!");

// Function Nicola.RockTriggerVolumeActor.OnRockCollisionOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct RockTriggerVolumeActor_OnRockCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin) == 0x000008, "Wrong alignment on RockTriggerVolumeActor_OnRockCollisionOverlapBegin");
static_assert(sizeof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin) == 0x0000A8, "Wrong size on RockTriggerVolumeActor_OnRockCollisionOverlapBegin");
static_assert(offsetof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin, OverlappedComp) == 0x000000, "Member 'RockTriggerVolumeActor_OnRockCollisionOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'RockTriggerVolumeActor_OnRockCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'RockTriggerVolumeActor_OnRockCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'RockTriggerVolumeActor_OnRockCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin, bFromSweep) == 0x00001C, "Member 'RockTriggerVolumeActor_OnRockCollisionOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(RockTriggerVolumeActor_OnRockCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'RockTriggerVolumeActor_OnRockCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function Nicola.TurnGimmick.PlayEscapeAnimation
// 0x0001 (0x0001 - 0x0000)
struct TurnGimmick_PlayEscapeAnimation final
{
public:
	EAxis2Direction                               Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurnGimmick_PlayEscapeAnimation) == 0x000001, "Wrong alignment on TurnGimmick_PlayEscapeAnimation");
static_assert(sizeof(TurnGimmick_PlayEscapeAnimation) == 0x000001, "Wrong size on TurnGimmick_PlayEscapeAnimation");
static_assert(offsetof(TurnGimmick_PlayEscapeAnimation, Axis) == 0x000000, "Member 'TurnGimmick_PlayEscapeAnimation::Axis' has a wrong offset!");

// Function Nicola.UIBattleManager.DEBUG_StartMBRBattle2
// 0x0028 (0x0028 - 0x0000)
struct UIBattleManager_DEBUG_StartMBRBattle2 final
{
public:
	class FName                                   encountId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   playerId1;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   playerId2;                                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   playerId3;                                         // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapId;                                             // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBattleManager_DEBUG_StartMBRBattle2) == 0x000004, "Wrong alignment on UIBattleManager_DEBUG_StartMBRBattle2");
static_assert(sizeof(UIBattleManager_DEBUG_StartMBRBattle2) == 0x000028, "Wrong size on UIBattleManager_DEBUG_StartMBRBattle2");
static_assert(offsetof(UIBattleManager_DEBUG_StartMBRBattle2, encountId) == 0x000000, "Member 'UIBattleManager_DEBUG_StartMBRBattle2::encountId' has a wrong offset!");
static_assert(offsetof(UIBattleManager_DEBUG_StartMBRBattle2, playerId1) == 0x000008, "Member 'UIBattleManager_DEBUG_StartMBRBattle2::playerId1' has a wrong offset!");
static_assert(offsetof(UIBattleManager_DEBUG_StartMBRBattle2, playerId2) == 0x000010, "Member 'UIBattleManager_DEBUG_StartMBRBattle2::playerId2' has a wrong offset!");
static_assert(offsetof(UIBattleManager_DEBUG_StartMBRBattle2, playerId3) == 0x000018, "Member 'UIBattleManager_DEBUG_StartMBRBattle2::playerId3' has a wrong offset!");
static_assert(offsetof(UIBattleManager_DEBUG_StartMBRBattle2, MapId) == 0x000020, "Member 'UIBattleManager_DEBUG_StartMBRBattle2::MapId' has a wrong offset!");

// Function Nicola.UIBattleManager.GetInstance
// 0x0010 (0x0010 - 0x0000)
struct UIBattleManager_GetInstance final
{
public:
	const class UObject*                          InWCO;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIBattleManager*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBattleManager_GetInstance) == 0x000008, "Wrong alignment on UIBattleManager_GetInstance");
static_assert(sizeof(UIBattleManager_GetInstance) == 0x000010, "Wrong size on UIBattleManager_GetInstance");
static_assert(offsetof(UIBattleManager_GetInstance, InWCO) == 0x000000, "Member 'UIBattleManager_GetInstance::InWCO' has a wrong offset!");
static_assert(offsetof(UIBattleManager_GetInstance, ReturnValue) == 0x000008, "Member 'UIBattleManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.UIBattleMonsterName.DEBUG_GetDispRangeFlag
// 0x0001 (0x0001 - 0x0000)
struct UIBattleMonsterName_DEBUG_GetDispRangeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBattleMonsterName_DEBUG_GetDispRangeFlag) == 0x000001, "Wrong alignment on UIBattleMonsterName_DEBUG_GetDispRangeFlag");
static_assert(sizeof(UIBattleMonsterName_DEBUG_GetDispRangeFlag) == 0x000001, "Wrong size on UIBattleMonsterName_DEBUG_GetDispRangeFlag");
static_assert(offsetof(UIBattleMonsterName_DEBUG_GetDispRangeFlag, ReturnValue) == 0x000000, "Member 'UIBattleMonsterName_DEBUG_GetDispRangeFlag::ReturnValue' has a wrong offset!");

// Function Nicola.UIBattleMonsterName.DEBUG_SetDispRangeFlag
// 0x0001 (0x0001 - 0x0000)
struct UIBattleMonsterName_DEBUG_SetDispRangeFlag final
{
public:
	bool                                          InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBattleMonsterName_DEBUG_SetDispRangeFlag) == 0x000001, "Wrong alignment on UIBattleMonsterName_DEBUG_SetDispRangeFlag");
static_assert(sizeof(UIBattleMonsterName_DEBUG_SetDispRangeFlag) == 0x000001, "Wrong size on UIBattleMonsterName_DEBUG_SetDispRangeFlag");
static_assert(offsetof(UIBattleMonsterName_DEBUG_SetDispRangeFlag, InFlag) == 0x000000, "Member 'UIBattleMonsterName_DEBUG_SetDispRangeFlag::InFlag' has a wrong offset!");

// Function Nicola.UICommonMenuCheck.DEBUG_GetForceOpenFieldMenuFlag
// 0x0001 (0x0001 - 0x0000)
struct UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag) == 0x000001, "Wrong alignment on UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag");
static_assert(sizeof(UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag) == 0x000001, "Wrong size on UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag");
static_assert(offsetof(UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag, ReturnValue) == 0x000000, "Member 'UICommonMenuCheck_DEBUG_GetForceOpenFieldMenuFlag::ReturnValue' has a wrong offset!");

// Function Nicola.UICommonMenuCheck.DEBUG_SetForceOpenFieldMenuFlag
// 0x0001 (0x0001 - 0x0000)
struct UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag final
{
public:
	bool                                          InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag) == 0x000001, "Wrong alignment on UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag");
static_assert(sizeof(UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag) == 0x000001, "Wrong size on UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag");
static_assert(offsetof(UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag, InFlag) == 0x000000, "Member 'UICommonMenuCheck_DEBUG_SetForceOpenFieldMenuFlag::InFlag' has a wrong offset!");

// Function Nicola.UIEndingSaveMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIEndingSaveMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEndingSaveMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIEndingSaveMenu_IsExecMenu");
static_assert(sizeof(UIEndingSaveMenu_IsExecMenu) == 0x000001, "Wrong size on UIEndingSaveMenu_IsExecMenu");
static_assert(offsetof(UIEndingSaveMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIEndingSaveMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIEndingStaffRollMenu.IsDebugInfoVisible
// 0x0001 (0x0001 - 0x0000)
struct UIEndingStaffRollMenu_IsDebugInfoVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEndingStaffRollMenu_IsDebugInfoVisible) == 0x000001, "Wrong alignment on UIEndingStaffRollMenu_IsDebugInfoVisible");
static_assert(sizeof(UIEndingStaffRollMenu_IsDebugInfoVisible) == 0x000001, "Wrong size on UIEndingStaffRollMenu_IsDebugInfoVisible");
static_assert(offsetof(UIEndingStaffRollMenu_IsDebugInfoVisible, ReturnValue) == 0x000000, "Member 'UIEndingStaffRollMenu_IsDebugInfoVisible::ReturnValue' has a wrong offset!");

// Function Nicola.UIEndingStaffRollMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIEndingStaffRollMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEndingStaffRollMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIEndingStaffRollMenu_IsExecMenu");
static_assert(sizeof(UIEndingStaffRollMenu_IsExecMenu) == 0x000001, "Wrong size on UIEndingStaffRollMenu_IsExecMenu");
static_assert(offsetof(UIEndingStaffRollMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIEndingStaffRollMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIEndingStaffRollMenu.ToggleDebugInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIEndingStaffRollMenu_ToggleDebugInfoVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEndingStaffRollMenu_ToggleDebugInfoVisibility) == 0x000001, "Wrong alignment on UIEndingStaffRollMenu_ToggleDebugInfoVisibility");
static_assert(sizeof(UIEndingStaffRollMenu_ToggleDebugInfoVisibility) == 0x000001, "Wrong size on UIEndingStaffRollMenu_ToggleDebugInfoVisibility");
static_assert(offsetof(UIEndingStaffRollMenu_ToggleDebugInfoVisibility, ReturnValue) == 0x000000, "Member 'UIEndingStaffRollMenu_ToggleDebugInfoVisibility::ReturnValue' has a wrong offset!");

// Function Nicola.UIEventMovieControl.BPPlayEventControlUI
// 0x0001 (0x0001 - 0x0000)
struct UIEventMovieControl_BPPlayEventControlUI final
{
public:
	bool                                          bIsSkip;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventMovieControl_BPPlayEventControlUI) == 0x000001, "Wrong alignment on UIEventMovieControl_BPPlayEventControlUI");
static_assert(sizeof(UIEventMovieControl_BPPlayEventControlUI) == 0x000001, "Wrong size on UIEventMovieControl_BPPlayEventControlUI");
static_assert(offsetof(UIEventMovieControl_BPPlayEventControlUI, bIsSkip) == 0x000000, "Member 'UIEventMovieControl_BPPlayEventControlUI::bIsSkip' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.GuideIsPlaying
// 0x0008 (0x0008 - 0x0000)
struct UIFieldEfxMenu_GuideIsPlaying final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFieldEfxMenu_GuideIsPlaying) == 0x000004, "Wrong alignment on UIFieldEfxMenu_GuideIsPlaying");
static_assert(sizeof(UIFieldEfxMenu_GuideIsPlaying) == 0x000008, "Wrong size on UIFieldEfxMenu_GuideIsPlaying");
static_assert(offsetof(UIFieldEfxMenu_GuideIsPlaying, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_GuideIsPlaying::InHandle' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_GuideIsPlaying, ReturnValue) == 0x000004, "Member 'UIFieldEfxMenu_GuideIsPlaying::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.GuidePlayDecide
// 0x0004 (0x0004 - 0x0000)
struct UIFieldEfxMenu_GuidePlayDecide final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldEfxMenu_GuidePlayDecide) == 0x000004, "Wrong alignment on UIFieldEfxMenu_GuidePlayDecide");
static_assert(sizeof(UIFieldEfxMenu_GuidePlayDecide) == 0x000004, "Wrong size on UIFieldEfxMenu_GuidePlayDecide");
static_assert(offsetof(UIFieldEfxMenu_GuidePlayDecide, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_GuidePlayDecide::InHandle' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.GuidePlayIn
// 0x0014 (0x0014 - 0x0000)
struct UIFieldEfxMenu_GuidePlayIn final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPos;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldEfxMenu_GuidePlayIn) == 0x000004, "Wrong alignment on UIFieldEfxMenu_GuidePlayIn");
static_assert(sizeof(UIFieldEfxMenu_GuidePlayIn) == 0x000014, "Wrong size on UIFieldEfxMenu_GuidePlayIn");
static_assert(offsetof(UIFieldEfxMenu_GuidePlayIn, InName) == 0x000000, "Member 'UIFieldEfxMenu_GuidePlayIn::InName' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_GuidePlayIn, InPos) == 0x000008, "Member 'UIFieldEfxMenu_GuidePlayIn::InPos' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_GuidePlayIn, ReturnValue) == 0x000010, "Member 'UIFieldEfxMenu_GuidePlayIn::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.GuidePlayOut
// 0x0004 (0x0004 - 0x0000)
struct UIFieldEfxMenu_GuidePlayOut final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldEfxMenu_GuidePlayOut) == 0x000004, "Wrong alignment on UIFieldEfxMenu_GuidePlayOut");
static_assert(sizeof(UIFieldEfxMenu_GuidePlayOut) == 0x000004, "Wrong size on UIFieldEfxMenu_GuidePlayOut");
static_assert(offsetof(UIFieldEfxMenu_GuidePlayOut, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_GuidePlayOut::InHandle' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.GuideSetPosition
// 0x0010 (0x0010 - 0x0000)
struct UIFieldEfxMenu_GuideSetPosition final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPos;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFieldEfxMenu_GuideSetPosition) == 0x000004, "Wrong alignment on UIFieldEfxMenu_GuideSetPosition");
static_assert(sizeof(UIFieldEfxMenu_GuideSetPosition) == 0x000010, "Wrong size on UIFieldEfxMenu_GuideSetPosition");
static_assert(offsetof(UIFieldEfxMenu_GuideSetPosition, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_GuideSetPosition::InHandle' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_GuideSetPosition, InPos) == 0x000004, "Member 'UIFieldEfxMenu_GuideSetPosition::InPos' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_GuideSetPosition, ReturnValue) == 0x00000C, "Member 'UIFieldEfxMenu_GuideSetPosition::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.ManpuIsPlaying
// 0x0008 (0x0008 - 0x0000)
struct UIFieldEfxMenu_ManpuIsPlaying final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFieldEfxMenu_ManpuIsPlaying) == 0x000004, "Wrong alignment on UIFieldEfxMenu_ManpuIsPlaying");
static_assert(sizeof(UIFieldEfxMenu_ManpuIsPlaying) == 0x000008, "Wrong size on UIFieldEfxMenu_ManpuIsPlaying");
static_assert(offsetof(UIFieldEfxMenu_ManpuIsPlaying, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_ManpuIsPlaying::InHandle' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuIsPlaying, ReturnValue) == 0x000004, "Member 'UIFieldEfxMenu_ManpuIsPlaying::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.ManpuPlayIn
// 0x0014 (0x0014 - 0x0000)
struct UIFieldEfxMenu_ManpuPlayIn final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPos;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldEfxMenu_ManpuPlayIn) == 0x000004, "Wrong alignment on UIFieldEfxMenu_ManpuPlayIn");
static_assert(sizeof(UIFieldEfxMenu_ManpuPlayIn) == 0x000014, "Wrong size on UIFieldEfxMenu_ManpuPlayIn");
static_assert(offsetof(UIFieldEfxMenu_ManpuPlayIn, InName) == 0x000000, "Member 'UIFieldEfxMenu_ManpuPlayIn::InName' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuPlayIn, InPos) == 0x000008, "Member 'UIFieldEfxMenu_ManpuPlayIn::InPos' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuPlayIn, ReturnValue) == 0x000010, "Member 'UIFieldEfxMenu_ManpuPlayIn::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.ManpuPlayOut
// 0x0004 (0x0004 - 0x0000)
struct UIFieldEfxMenu_ManpuPlayOut final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldEfxMenu_ManpuPlayOut) == 0x000004, "Wrong alignment on UIFieldEfxMenu_ManpuPlayOut");
static_assert(sizeof(UIFieldEfxMenu_ManpuPlayOut) == 0x000004, "Wrong size on UIFieldEfxMenu_ManpuPlayOut");
static_assert(offsetof(UIFieldEfxMenu_ManpuPlayOut, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_ManpuPlayOut::InHandle' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.ManpuSetPosition
// 0x0010 (0x0010 - 0x0000)
struct UIFieldEfxMenu_ManpuSetPosition final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPos;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFieldEfxMenu_ManpuSetPosition) == 0x000004, "Wrong alignment on UIFieldEfxMenu_ManpuSetPosition");
static_assert(sizeof(UIFieldEfxMenu_ManpuSetPosition) == 0x000010, "Wrong size on UIFieldEfxMenu_ManpuSetPosition");
static_assert(offsetof(UIFieldEfxMenu_ManpuSetPosition, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_ManpuSetPosition::InHandle' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuSetPosition, InPos) == 0x000004, "Member 'UIFieldEfxMenu_ManpuSetPosition::InPos' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuSetPosition, ReturnValue) == 0x00000C, "Member 'UIFieldEfxMenu_ManpuSetPosition::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldEfxMenu.ManpuSetScale
// 0x000C (0x000C - 0x0000)
struct UIFieldEfxMenu_ManpuSetScale final
{
public:
	int32                                         InHandle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFieldEfxMenu_ManpuSetScale) == 0x000004, "Wrong alignment on UIFieldEfxMenu_ManpuSetScale");
static_assert(sizeof(UIFieldEfxMenu_ManpuSetScale) == 0x00000C, "Wrong size on UIFieldEfxMenu_ManpuSetScale");
static_assert(offsetof(UIFieldEfxMenu_ManpuSetScale, InHandle) == 0x000000, "Member 'UIFieldEfxMenu_ManpuSetScale::InHandle' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuSetScale, InScale) == 0x000004, "Member 'UIFieldEfxMenu_ManpuSetScale::InScale' has a wrong offset!");
static_assert(offsetof(UIFieldEfxMenu_ManpuSetScale, ReturnValue) == 0x000008, "Member 'UIFieldEfxMenu_ManpuSetScale::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldTacticsRecordMenuWindowTop.GetDebugRecordCount
// 0x0008 (0x0008 - 0x0000)
struct UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount final
{
public:
	EDEBUG_RecordCategory                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount) == 0x000004, "Wrong alignment on UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount");
static_assert(sizeof(UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount) == 0x000008, "Wrong size on UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount");
static_assert(offsetof(UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount, Index_0) == 0x000000, "Member 'UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount::Index_0' has a wrong offset!");
static_assert(offsetof(UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount, ReturnValue) == 0x000004, "Member 'UIFieldTacticsRecordMenuWindowTop_GetDebugRecordCount::ReturnValue' has a wrong offset!");

// Function Nicola.UIFieldTacticsRecordMenuWindowTop.SetDebugRecordCount
// 0x0008 (0x0008 - 0x0000)
struct UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount final
{
public:
	EDEBUG_RecordCategory                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount) == 0x000004, "Wrong alignment on UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount");
static_assert(sizeof(UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount) == 0x000008, "Wrong size on UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount");
static_assert(offsetof(UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount, Index_0) == 0x000000, "Member 'UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount::Index_0' has a wrong offset!");
static_assert(offsetof(UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount, Value) == 0x000004, "Member 'UIFieldTacticsRecordMenuWindowTop_SetDebugRecordCount::Value' has a wrong offset!");

// Function Nicola.UIKeyboardNameMenuKeyboardListTop.OnChangeText
// 0x0018 (0x0018 - 0x0000)
struct UIKeyboardNameMenuKeyboardListTop_OnChangeText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIKeyboardNameMenuKeyboardListTop_OnChangeText) == 0x000008, "Wrong alignment on UIKeyboardNameMenuKeyboardListTop_OnChangeText");
static_assert(sizeof(UIKeyboardNameMenuKeyboardListTop_OnChangeText) == 0x000018, "Wrong size on UIKeyboardNameMenuKeyboardListTop_OnChangeText");
static_assert(offsetof(UIKeyboardNameMenuKeyboardListTop_OnChangeText, InText) == 0x000000, "Member 'UIKeyboardNameMenuKeyboardListTop_OnChangeText::InText' has a wrong offset!");

// Function Nicola.UIKeyboardNameMenuKeyboardListTop.OnCommitText
// 0x0020 (0x0020 - 0x0000)
struct UIKeyboardNameMenuKeyboardListTop_OnCommitText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InType;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIKeyboardNameMenuKeyboardListTop_OnCommitText) == 0x000008, "Wrong alignment on UIKeyboardNameMenuKeyboardListTop_OnCommitText");
static_assert(sizeof(UIKeyboardNameMenuKeyboardListTop_OnCommitText) == 0x000020, "Wrong size on UIKeyboardNameMenuKeyboardListTop_OnCommitText");
static_assert(offsetof(UIKeyboardNameMenuKeyboardListTop_OnCommitText, InText) == 0x000000, "Member 'UIKeyboardNameMenuKeyboardListTop_OnCommitText::InText' has a wrong offset!");
static_assert(offsetof(UIKeyboardNameMenuKeyboardListTop_OnCommitText, InType) == 0x000018, "Member 'UIKeyboardNameMenuKeyboardListTop_OnCommitText::InType' has a wrong offset!");

// Function Nicola.UIMBRDebugFL.DEBUG_SetupForResult
// 0x0001 (0x0001 - 0x0000)
struct UIMBRDebugFL_DEBUG_SetupForResult final
{
public:
	bool                                          InWin;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMBRDebugFL_DEBUG_SetupForResult) == 0x000001, "Wrong alignment on UIMBRDebugFL_DEBUG_SetupForResult");
static_assert(sizeof(UIMBRDebugFL_DEBUG_SetupForResult) == 0x000001, "Wrong size on UIMBRDebugFL_DEBUG_SetupForResult");
static_assert(offsetof(UIMBRDebugFL_DEBUG_SetupForResult, InWin) == 0x000000, "Member 'UIMBRDebugFL_DEBUG_SetupForResult::InWin' has a wrong offset!");

// Function Nicola.UIMBREntryMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIMBREntryMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMBREntryMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIMBREntryMenu_IsExecMenu");
static_assert(sizeof(UIMBREntryMenu_IsExecMenu) == 0x000001, "Wrong size on UIMBREntryMenu_IsExecMenu");
static_assert(offsetof(UIMBREntryMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIMBREntryMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIMBREntryMenu.OpenMenuForEntry
// 0x0008 (0x0008 - 0x0000)
struct UIMBREntryMenu_OpenMenuForEntry final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMBREntryMenu_OpenMenuForEntry) == 0x000004, "Wrong alignment on UIMBREntryMenu_OpenMenuForEntry");
static_assert(sizeof(UIMBREntryMenu_OpenMenuForEntry) == 0x000008, "Wrong size on UIMBREntryMenu_OpenMenuForEntry");
static_assert(offsetof(UIMBREntryMenu_OpenMenuForEntry, InName) == 0x000000, "Member 'UIMBREntryMenu_OpenMenuForEntry::InName' has a wrong offset!");

// Function Nicola.UIMBRInfoMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIMBRInfoMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMBRInfoMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIMBRInfoMenu_IsExecMenu");
static_assert(sizeof(UIMBRInfoMenu_IsExecMenu) == 0x000001, "Wrong size on UIMBRInfoMenu_IsExecMenu");
static_assert(offsetof(UIMBRInfoMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIMBRInfoMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIMBRRecruitMenu.OpenMenu
// 0x0008 (0x0008 - 0x0000)
struct UIMBRRecruitMenu_OpenMenu final
{
public:
	class FName                                   RecruitMonsterSpeciesID;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMBRRecruitMenu_OpenMenu) == 0x000004, "Wrong alignment on UIMBRRecruitMenu_OpenMenu");
static_assert(sizeof(UIMBRRecruitMenu_OpenMenu) == 0x000008, "Wrong size on UIMBRRecruitMenu_OpenMenu");
static_assert(offsetof(UIMBRRecruitMenu_OpenMenu, RecruitMonsterSpeciesID) == 0x000000, "Member 'UIMBRRecruitMenu_OpenMenu::RecruitMonsterSpeciesID' has a wrong offset!");

// Function Nicola.UIMBRZooMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UIMBRZooMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMBRZooMenu_IsExecMenu) == 0x000001, "Wrong alignment on UIMBRZooMenu_IsExecMenu");
static_assert(sizeof(UIMBRZooMenu_IsExecMenu) == 0x000001, "Wrong size on UIMBRZooMenu_IsExecMenu");
static_assert(offsetof(UIMBRZooMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UIMBRZooMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIMedalTradeMenu.SetupDebugMedalCount
// 0x0008 (0x0008 - 0x0000)
struct UIMedalTradeMenu_SetupDebugMedalCount final
{
public:
	int32                                         TotalNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepositeNum;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMedalTradeMenu_SetupDebugMedalCount) == 0x000004, "Wrong alignment on UIMedalTradeMenu_SetupDebugMedalCount");
static_assert(sizeof(UIMedalTradeMenu_SetupDebugMedalCount) == 0x000008, "Wrong size on UIMedalTradeMenu_SetupDebugMedalCount");
static_assert(offsetof(UIMedalTradeMenu_SetupDebugMedalCount, TotalNum) == 0x000000, "Member 'UIMedalTradeMenu_SetupDebugMedalCount::TotalNum' has a wrong offset!");
static_assert(offsetof(UIMedalTradeMenu_SetupDebugMedalCount, DepositeNum) == 0x000004, "Member 'UIMedalTradeMenu_SetupDebugMedalCount::DepositeNum' has a wrong offset!");

// Function Nicola.UIMouseClickData.DEBUG_GetDispRangeFlag
// 0x0001 (0x0001 - 0x0000)
struct UIMouseClickData_DEBUG_GetDispRangeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMouseClickData_DEBUG_GetDispRangeFlag) == 0x000001, "Wrong alignment on UIMouseClickData_DEBUG_GetDispRangeFlag");
static_assert(sizeof(UIMouseClickData_DEBUG_GetDispRangeFlag) == 0x000001, "Wrong size on UIMouseClickData_DEBUG_GetDispRangeFlag");
static_assert(offsetof(UIMouseClickData_DEBUG_GetDispRangeFlag, ReturnValue) == 0x000000, "Member 'UIMouseClickData_DEBUG_GetDispRangeFlag::ReturnValue' has a wrong offset!");

// Function Nicola.UIMouseClickData.DEBUG_SetDispRangeFlag
// 0x0001 (0x0001 - 0x0000)
struct UIMouseClickData_DEBUG_SetDispRangeFlag final
{
public:
	bool                                          InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMouseClickData_DEBUG_SetDispRangeFlag) == 0x000001, "Wrong alignment on UIMouseClickData_DEBUG_SetDispRangeFlag");
static_assert(sizeof(UIMouseClickData_DEBUG_SetDispRangeFlag) == 0x000001, "Wrong size on UIMouseClickData_DEBUG_SetDispRangeFlag");
static_assert(offsetof(UIMouseClickData_DEBUG_SetDispRangeFlag, InFlag) == 0x000000, "Member 'UIMouseClickData_DEBUG_SetDispRangeFlag::InFlag' has a wrong offset!");

// Function Nicola.UITitle2Menu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UITitle2Menu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITitle2Menu_IsExecMenu) == 0x000001, "Wrong alignment on UITitle2Menu_IsExecMenu");
static_assert(sizeof(UITitle2Menu_IsExecMenu) == 0x000001, "Wrong size on UITitle2Menu_IsExecMenu");
static_assert(offsetof(UITitle2Menu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UITitle2Menu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UITitleDemoMenu.IsExecMenu
// 0x0001 (0x0001 - 0x0000)
struct UITitleDemoMenu_IsExecMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITitleDemoMenu_IsExecMenu) == 0x000001, "Wrong alignment on UITitleDemoMenu_IsExecMenu");
static_assert(sizeof(UITitleDemoMenu_IsExecMenu) == 0x000001, "Wrong size on UITitleDemoMenu_IsExecMenu");
static_assert(offsetof(UITitleDemoMenu_IsExecMenu, ReturnValue) == 0x000000, "Member 'UITitleDemoMenu_IsExecMenu::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct UIWidgetManager_GetInstance final
{
public:
	class UUIWidgetManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_GetInstance) == 0x000008, "Wrong alignment on UIWidgetManager_GetInstance");
static_assert(sizeof(UIWidgetManager_GetInstance) == 0x000008, "Wrong size on UIWidgetManager_GetInstance");
static_assert(offsetof(UIWidgetManager_GetInstance, ReturnValue) == 0x000000, "Member 'UIWidgetManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.DEBUG_GetHideUI_MV
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetManager_DEBUG_GetHideUI_MV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_DEBUG_GetHideUI_MV) == 0x000001, "Wrong alignment on UIWidgetManager_DEBUG_GetHideUI_MV");
static_assert(sizeof(UIWidgetManager_DEBUG_GetHideUI_MV) == 0x000001, "Wrong size on UIWidgetManager_DEBUG_GetHideUI_MV");
static_assert(offsetof(UIWidgetManager_DEBUG_GetHideUI_MV, ReturnValue) == 0x000000, "Member 'UIWidgetManager_DEBUG_GetHideUI_MV::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.DEBUG_GetHideUI_SS
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetManager_DEBUG_GetHideUI_SS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_DEBUG_GetHideUI_SS) == 0x000001, "Wrong alignment on UIWidgetManager_DEBUG_GetHideUI_SS");
static_assert(sizeof(UIWidgetManager_DEBUG_GetHideUI_SS) == 0x000001, "Wrong size on UIWidgetManager_DEBUG_GetHideUI_SS");
static_assert(offsetof(UIWidgetManager_DEBUG_GetHideUI_SS, ReturnValue) == 0x000000, "Member 'UIWidgetManager_DEBUG_GetHideUI_SS::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.DEBUG_SetHideUI_MV
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetManager_DEBUG_SetHideUI_MV final
{
public:
	bool                                          InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_DEBUG_SetHideUI_MV) == 0x000001, "Wrong alignment on UIWidgetManager_DEBUG_SetHideUI_MV");
static_assert(sizeof(UIWidgetManager_DEBUG_SetHideUI_MV) == 0x000001, "Wrong size on UIWidgetManager_DEBUG_SetHideUI_MV");
static_assert(offsetof(UIWidgetManager_DEBUG_SetHideUI_MV, InFlag) == 0x000000, "Member 'UIWidgetManager_DEBUG_SetHideUI_MV::InFlag' has a wrong offset!");

// Function Nicola.UIWidgetManager.DEBUG_SetHideUI_SS
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetManager_DEBUG_SetHideUI_SS final
{
public:
	bool                                          InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_DEBUG_SetHideUI_SS) == 0x000001, "Wrong alignment on UIWidgetManager_DEBUG_SetHideUI_SS");
static_assert(sizeof(UIWidgetManager_DEBUG_SetHideUI_SS) == 0x000001, "Wrong size on UIWidgetManager_DEBUG_SetHideUI_SS");
static_assert(offsetof(UIWidgetManager_DEBUG_SetHideUI_SS, InFlag) == 0x000000, "Member 'UIWidgetManager_DEBUG_SetHideUI_SS::InFlag' has a wrong offset!");

// Function Nicola.UIWidgetManager.DebugShowMessage
// 0x0010 (0x0010 - 0x0000)
struct UIWidgetManager_DebugShowMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_DebugShowMessage) == 0x000008, "Wrong alignment on UIWidgetManager_DebugShowMessage");
static_assert(sizeof(UIWidgetManager_DebugShowMessage) == 0x000010, "Wrong size on UIWidgetManager_DebugShowMessage");
static_assert(offsetof(UIWidgetManager_DebugShowMessage, InMessage) == 0x000000, "Member 'UIWidgetManager_DebugShowMessage::InMessage' has a wrong offset!");

// Function Nicola.UIWidgetManager.GetTitleMenuMessage
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetManager_GetTitleMenuMessage final
{
public:
	ETitleMenuMessage                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_GetTitleMenuMessage) == 0x000001, "Wrong alignment on UIWidgetManager_GetTitleMenuMessage");
static_assert(sizeof(UIWidgetManager_GetTitleMenuMessage) == 0x000001, "Wrong size on UIWidgetManager_GetTitleMenuMessage");
static_assert(offsetof(UIWidgetManager_GetTitleMenuMessage, ReturnValue) == 0x000000, "Member 'UIWidgetManager_GetTitleMenuMessage::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.GetTitleMenuSelectedSaveSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex) == 0x000004, "Wrong alignment on UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex");
static_assert(sizeof(UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex) == 0x000004, "Wrong size on UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex");
static_assert(offsetof(UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex, ReturnValue) == 0x000000, "Member 'UIWidgetManager_GetTitleMenuSelectedSaveSlotIndex::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.IsTitleMenuEnd
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetManager_IsTitleMenuEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_IsTitleMenuEnd) == 0x000001, "Wrong alignment on UIWidgetManager_IsTitleMenuEnd");
static_assert(sizeof(UIWidgetManager_IsTitleMenuEnd) == 0x000001, "Wrong size on UIWidgetManager_IsTitleMenuEnd");
static_assert(offsetof(UIWidgetManager_IsTitleMenuEnd, ReturnValue) == 0x000000, "Member 'UIWidgetManager_IsTitleMenuEnd::ReturnValue' has a wrong offset!");

// Function Nicola.UIWidgetManager.OpenInnMenu
// 0x0010 (0x0010 - 0x0000)
struct UIWidgetManager_OpenInnMenu final
{
public:
	class FName                                   InInnId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCallMemberIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDoChangeMap;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIWidgetManager_OpenInnMenu) == 0x000004, "Wrong alignment on UIWidgetManager_OpenInnMenu");
static_assert(sizeof(UIWidgetManager_OpenInnMenu) == 0x000010, "Wrong size on UIWidgetManager_OpenInnMenu");
static_assert(offsetof(UIWidgetManager_OpenInnMenu, InInnId) == 0x000000, "Member 'UIWidgetManager_OpenInnMenu::InInnId' has a wrong offset!");
static_assert(offsetof(UIWidgetManager_OpenInnMenu, InCallMemberIndex) == 0x000008, "Member 'UIWidgetManager_OpenInnMenu::InCallMemberIndex' has a wrong offset!");
static_assert(offsetof(UIWidgetManager_OpenInnMenu, InDoChangeMap) == 0x00000C, "Member 'UIWidgetManager_OpenInnMenu::InDoChangeMap' has a wrong offset!");

// Function Nicola.UIWidgetManager.OpenShopMenuTest
// 0x0008 (0x0008 - 0x0000)
struct UIWidgetManager_OpenShopMenuTest final
{
public:
	class FName                                   InShopId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_OpenShopMenuTest) == 0x000004, "Wrong alignment on UIWidgetManager_OpenShopMenuTest");
static_assert(sizeof(UIWidgetManager_OpenShopMenuTest) == 0x000008, "Wrong size on UIWidgetManager_OpenShopMenuTest");
static_assert(offsetof(UIWidgetManager_OpenShopMenuTest, InShopId) == 0x000000, "Member 'UIWidgetManager_OpenShopMenuTest::InShopId' has a wrong offset!");

// Function Nicola.UIWidgetManager.OpenTutorialTest
// 0x0008 (0x0008 - 0x0000)
struct UIWidgetManager_OpenTutorialTest final
{
public:
	class FName                                   InGopId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_OpenTutorialTest) == 0x000004, "Wrong alignment on UIWidgetManager_OpenTutorialTest");
static_assert(sizeof(UIWidgetManager_OpenTutorialTest) == 0x000008, "Wrong size on UIWidgetManager_OpenTutorialTest");
static_assert(offsetof(UIWidgetManager_OpenTutorialTest, InGopId) == 0x000000, "Member 'UIWidgetManager_OpenTutorialTest::InGopId' has a wrong offset!");

// Function Nicola.UIWidgetManager.StartMenu
// 0x0002 (0x0002 - 0x0000)
struct UIWidgetManager_StartMenu final
{
public:
	EUIWidgetId                                   InId;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetManager_StartMenu) == 0x000001, "Wrong alignment on UIWidgetManager_StartMenu");
static_assert(sizeof(UIWidgetManager_StartMenu) == 0x000002, "Wrong size on UIWidgetManager_StartMenu");
static_assert(offsetof(UIWidgetManager_StartMenu, InId) == 0x000000, "Member 'UIWidgetManager_StartMenu::InId' has a wrong offset!");
static_assert(offsetof(UIWidgetManager_StartMenu, ReturnValue) == 0x000001, "Member 'UIWidgetManager_StartMenu::ReturnValue' has a wrong offset!");

}

