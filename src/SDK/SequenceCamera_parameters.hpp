#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequenceCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SequenceCamera_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SequenceCamera.SequenceCameraManager.MakeSequenceCameraTargetInfoByActor
// 0x0030 (0x0030 - 0x0000)
struct SequenceCameraManager_MakeSequenceCameraTargetInfoByActor final
{
public:
	class AActor*                                 targetActor_;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceCameraTargetInfo              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_MakeSequenceCameraTargetInfoByActor) == 0x000008, "Wrong alignment on SequenceCameraManager_MakeSequenceCameraTargetInfoByActor");
static_assert(sizeof(SequenceCameraManager_MakeSequenceCameraTargetInfoByActor) == 0x000030, "Wrong size on SequenceCameraManager_MakeSequenceCameraTargetInfoByActor");
static_assert(offsetof(SequenceCameraManager_MakeSequenceCameraTargetInfoByActor, targetActor_) == 0x000000, "Member 'SequenceCameraManager_MakeSequenceCameraTargetInfoByActor::targetActor_' has a wrong offset!");
static_assert(offsetof(SequenceCameraManager_MakeSequenceCameraTargetInfoByActor, ReturnValue) == 0x000008, "Member 'SequenceCameraManager_MakeSequenceCameraTargetInfoByActor::ReturnValue' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.MakeSequenceCameraTargetInfoByTransform
// 0x0048 (0x0048 - 0x0000)
struct SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform final
{
public:
	struct FVector                                targetLocation_;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                targetForward_;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetRadius_;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceCameraTargetInfo              ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform) == 0x000008, "Wrong alignment on SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform");
static_assert(sizeof(SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform) == 0x000048, "Wrong size on SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform");
static_assert(offsetof(SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform, targetLocation_) == 0x000000, "Member 'SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform::targetLocation_' has a wrong offset!");
static_assert(offsetof(SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform, targetForward_) == 0x00000C, "Member 'SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform::targetForward_' has a wrong offset!");
static_assert(offsetof(SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform, targetRadius_) == 0x000018, "Member 'SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform::targetRadius_' has a wrong offset!");
static_assert(offsetof(SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform, ReturnValue) == 0x000020, "Member 'SequenceCameraManager_MakeSequenceCameraTargetInfoByTransform::ReturnValue' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.BlendInWithParam
// 0x0010 (0x0010 - 0x0000)
struct SequenceCameraManager_BlendInWithParam final
{
public:
	struct FViewTargetTransitionParams            InBlendParam_;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_BlendInWithParam) == 0x000004, "Wrong alignment on SequenceCameraManager_BlendInWithParam");
static_assert(sizeof(SequenceCameraManager_BlendInWithParam) == 0x000010, "Wrong size on SequenceCameraManager_BlendInWithParam");
static_assert(offsetof(SequenceCameraManager_BlendInWithParam, InBlendParam_) == 0x000000, "Member 'SequenceCameraManager_BlendInWithParam::InBlendParam_' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.BlendOutWithParam
// 0x0010 (0x0010 - 0x0000)
struct SequenceCameraManager_BlendOutWithParam final
{
public:
	struct FViewTargetTransitionParams            OutBlendParam_;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_BlendOutWithParam) == 0x000004, "Wrong alignment on SequenceCameraManager_BlendOutWithParam");
static_assert(sizeof(SequenceCameraManager_BlendOutWithParam) == 0x000010, "Wrong size on SequenceCameraManager_BlendOutWithParam");
static_assert(offsetof(SequenceCameraManager_BlendOutWithParam, OutBlendParam_) == 0x000000, "Member 'SequenceCameraManager_BlendOutWithParam::OutBlendParam_' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.BlendWithParam
// 0x0020 (0x0020 - 0x0000)
struct SequenceCameraManager_BlendWithParam final
{
public:
	struct FViewTargetTransitionParams            InBlendParam_;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            OutBlendParam_;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_BlendWithParam) == 0x000004, "Wrong alignment on SequenceCameraManager_BlendWithParam");
static_assert(sizeof(SequenceCameraManager_BlendWithParam) == 0x000020, "Wrong size on SequenceCameraManager_BlendWithParam");
static_assert(offsetof(SequenceCameraManager_BlendWithParam, InBlendParam_) == 0x000000, "Member 'SequenceCameraManager_BlendWithParam::InBlendParam_' has a wrong offset!");
static_assert(offsetof(SequenceCameraManager_BlendWithParam, OutBlendParam_) == 0x000010, "Member 'SequenceCameraManager_BlendWithParam::OutBlendParam_' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.GetEventReceivers
// 0x0010 (0x0010 - 0x0000)
struct SequenceCameraManager_GetEventReceivers final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_GetEventReceivers) == 0x000008, "Wrong alignment on SequenceCameraManager_GetEventReceivers");
static_assert(sizeof(SequenceCameraManager_GetEventReceivers) == 0x000010, "Wrong size on SequenceCameraManager_GetEventReceivers");
static_assert(offsetof(SequenceCameraManager_GetEventReceivers, ReturnValue) == 0x000000, "Member 'SequenceCameraManager_GetEventReceivers::ReturnValue' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.OnCameraCut
// 0x0008 (0x0008 - 0x0000)
struct SequenceCameraManager_OnCameraCut final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_OnCameraCut) == 0x000008, "Wrong alignment on SequenceCameraManager_OnCameraCut");
static_assert(sizeof(SequenceCameraManager_OnCameraCut) == 0x000008, "Wrong size on SequenceCameraManager_OnCameraCut");
static_assert(offsetof(SequenceCameraManager_OnCameraCut, CameraComponent) == 0x000000, "Member 'SequenceCameraManager_OnCameraCut::CameraComponent' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.StartSequence
// 0x00B8 (0x00B8 - 0x0000)
struct SequenceCameraManager_StartSequence final
{
public:
	struct FSequenceCameraInfo                    info_;                                             // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_StartSequence) == 0x000008, "Wrong alignment on SequenceCameraManager_StartSequence");
static_assert(sizeof(SequenceCameraManager_StartSequence) == 0x0000B8, "Wrong size on SequenceCameraManager_StartSequence");
static_assert(offsetof(SequenceCameraManager_StartSequence, info_) == 0x000000, "Member 'SequenceCameraManager_StartSequence::info_' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.StopSequence
// 0x0004 (0x0004 - 0x0000)
struct SequenceCameraManager_StopSequence final
{
public:
	float                                         OutBlendTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_StopSequence) == 0x000004, "Wrong alignment on SequenceCameraManager_StopSequence");
static_assert(sizeof(SequenceCameraManager_StopSequence) == 0x000004, "Wrong size on SequenceCameraManager_StopSequence");
static_assert(offsetof(SequenceCameraManager_StopSequence, OutBlendTime) == 0x000000, "Member 'SequenceCameraManager_StopSequence::OutBlendTime' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.CheckInfo
// 0x00C0 (0x00C0 - 0x0000)
struct SequenceCameraManager_CheckInfo final
{
public:
	struct FSequenceCameraInfo                    info_;                                             // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequenceCameraManager_CheckInfo) == 0x000008, "Wrong alignment on SequenceCameraManager_CheckInfo");
static_assert(sizeof(SequenceCameraManager_CheckInfo) == 0x0000C0, "Wrong size on SequenceCameraManager_CheckInfo");
static_assert(offsetof(SequenceCameraManager_CheckInfo, info_) == 0x000000, "Member 'SequenceCameraManager_CheckInfo::info_' has a wrong offset!");
static_assert(offsetof(SequenceCameraManager_CheckInfo, ReturnValue) == 0x0000B8, "Member 'SequenceCameraManager_CheckInfo::ReturnValue' has a wrong offset!");

// Function SequenceCamera.SequenceCameraManager.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SequenceCameraManager_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraManager_IsPlaying) == 0x000001, "Wrong alignment on SequenceCameraManager_IsPlaying");
static_assert(sizeof(SequenceCameraManager_IsPlaying) == 0x000001, "Wrong size on SequenceCameraManager_IsPlaying");
static_assert(offsetof(SequenceCameraManager_IsPlaying, ReturnValue) == 0x000000, "Member 'SequenceCameraManager_IsPlaying::ReturnValue' has a wrong offset!");

// Function SequenceCamera.CameraModifier_BlendAroundActor.BlendIn
// 0x0020 (0x0020 - 0x0000)
struct CameraModifier_BlendAroundActor_BlendIn final
{
public:
	class AActor*                                 InBaseActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EBlendCoordinate                              EBlendCoordinate;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModifier_BlendAroundActor_BlendIn) == 0x000008, "Wrong alignment on CameraModifier_BlendAroundActor_BlendIn");
static_assert(sizeof(CameraModifier_BlendAroundActor_BlendIn) == 0x000020, "Wrong size on CameraModifier_BlendAroundActor_BlendIn");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendIn, InBaseActor) == 0x000000, "Member 'CameraModifier_BlendAroundActor_BlendIn::InBaseActor' has a wrong offset!");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendIn, TransitionParams) == 0x000008, "Member 'CameraModifier_BlendAroundActor_BlendIn::TransitionParams' has a wrong offset!");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendIn, EBlendCoordinate) == 0x000018, "Member 'CameraModifier_BlendAroundActor_BlendIn::EBlendCoordinate' has a wrong offset!");

// Function SequenceCamera.CameraModifier_BlendAroundActor.BlendOut
// 0x0028 (0x0028 - 0x0000)
struct CameraModifier_BlendAroundActor_BlendOut final
{
public:
	class AActor*                                 InBaseActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherCameraActor;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EBlendCoordinate                              EBlendCoordinate;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraModifier_BlendAroundActor_BlendOut) == 0x000008, "Wrong alignment on CameraModifier_BlendAroundActor_BlendOut");
static_assert(sizeof(CameraModifier_BlendAroundActor_BlendOut) == 0x000028, "Wrong size on CameraModifier_BlendAroundActor_BlendOut");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendOut, InBaseActor) == 0x000000, "Member 'CameraModifier_BlendAroundActor_BlendOut::InBaseActor' has a wrong offset!");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendOut, InOtherCameraActor) == 0x000008, "Member 'CameraModifier_BlendAroundActor_BlendOut::InOtherCameraActor' has a wrong offset!");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendOut, TransitionParams) == 0x000010, "Member 'CameraModifier_BlendAroundActor_BlendOut::TransitionParams' has a wrong offset!");
static_assert(offsetof(CameraModifier_BlendAroundActor_BlendOut, EBlendCoordinate) == 0x000020, "Member 'CameraModifier_BlendAroundActor_BlendOut::EBlendCoordinate' has a wrong offset!");

// Function SequenceCamera.SequenceCameraBaseActor.BeginTransform
// 0x0008 (0x0008 - 0x0000)
struct SequenceCameraBaseActor_BeginTransform final
{
public:
	class ASequenceCameraManager*                 man;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraBaseActor_BeginTransform) == 0x000008, "Wrong alignment on SequenceCameraBaseActor_BeginTransform");
static_assert(sizeof(SequenceCameraBaseActor_BeginTransform) == 0x000008, "Wrong size on SequenceCameraBaseActor_BeginTransform");
static_assert(offsetof(SequenceCameraBaseActor_BeginTransform, man) == 0x000000, "Member 'SequenceCameraBaseActor_BeginTransform::man' has a wrong offset!");

// Function SequenceCamera.SequenceCameraBaseActor.SetTargetActorInEditor
// 0x0008 (0x0008 - 0x0000)
struct SequenceCameraBaseActor_SetTargetActorInEditor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraBaseActor_SetTargetActorInEditor) == 0x000008, "Wrong alignment on SequenceCameraBaseActor_SetTargetActorInEditor");
static_assert(sizeof(SequenceCameraBaseActor_SetTargetActorInEditor) == 0x000008, "Wrong size on SequenceCameraBaseActor_SetTargetActorInEditor");
static_assert(offsetof(SequenceCameraBaseActor_SetTargetActorInEditor, Actor) == 0x000000, "Member 'SequenceCameraBaseActor_SetTargetActorInEditor::Actor' has a wrong offset!");

// Function SequenceCamera.SequenceCameraCenterBaseActor.SetCenterRate
// 0x0004 (0x0004 - 0x0000)
struct SequenceCameraCenterBaseActor_SetCenterRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceCameraCenterBaseActor_SetCenterRate) == 0x000004, "Wrong alignment on SequenceCameraCenterBaseActor_SetCenterRate");
static_assert(sizeof(SequenceCameraCenterBaseActor_SetCenterRate) == 0x000004, "Wrong size on SequenceCameraCenterBaseActor_SetCenterRate");
static_assert(offsetof(SequenceCameraCenterBaseActor_SetCenterRate, Rate) == 0x000000, "Member 'SequenceCameraCenterBaseActor_SetCenterRate::Rate' has a wrong offset!");

}

