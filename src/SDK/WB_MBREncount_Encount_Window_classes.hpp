#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MBREncount_Encount_Window

#include "Basic.hpp"

#include "Nicola_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_MBREncount_Encount_Window.WB_MBREncount_Encount_Window_C
// 0x0028 (0x03D8 - 0x03B0)
class UWB_MBREncount_Encount_Window_C final : public UCommonWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Fight;                                             // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ItemFight;                                         // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemFight_Add;                                     // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Line;                                              // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void SequenceEvent__ENTRYPOINTWB_MBREncount_Encount_Window_0();
	void MBREncount_WhiteOut();
	void ExecuteUbergraph_WB_MBREncount_Encount_Window(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_MBREncount_Encount_Window_C">();
	}
	static class UWB_MBREncount_Encount_Window_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_MBREncount_Encount_Window_C>();
	}
};
static_assert(alignof(UWB_MBREncount_Encount_Window_C) == 0x000008, "Wrong alignment on UWB_MBREncount_Encount_Window_C");
static_assert(sizeof(UWB_MBREncount_Encount_Window_C) == 0x0003D8, "Wrong size on UWB_MBREncount_Encount_Window_C");
static_assert(offsetof(UWB_MBREncount_Encount_Window_C, UberGraphFrame) == 0x0003B0, "Member 'UWB_MBREncount_Encount_Window_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_MBREncount_Encount_Window_C, Fight) == 0x0003B8, "Member 'UWB_MBREncount_Encount_Window_C::Fight' has a wrong offset!");
static_assert(offsetof(UWB_MBREncount_Encount_Window_C, ItemFight) == 0x0003C0, "Member 'UWB_MBREncount_Encount_Window_C::ItemFight' has a wrong offset!");
static_assert(offsetof(UWB_MBREncount_Encount_Window_C, ItemFight_Add) == 0x0003C8, "Member 'UWB_MBREncount_Encount_Window_C::ItemFight_Add' has a wrong offset!");
static_assert(offsetof(UWB_MBREncount_Encount_Window_C, Line) == 0x0003D0, "Member 'UWB_MBREncount_Encount_Window_C::Line' has a wrong offset!");

}

